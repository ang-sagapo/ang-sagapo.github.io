<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2023/09/10/2023A%E6%91%98%E8%A6%81/</url>
    <content><![CDATA[<p>针对问题一，问题一的难点在于<strong>计算镜场</strong>的阴影遮蔽效率和截断效率。对于阴影遮蔽效率的计算，本文采用改良的蒙特卡罗射线追踪法。通过计算待测镜与问题镜之间的距离，排除掉肯定无法对待测镜造成阴影遮蔽损失的问题镜，在待测镜上选取大量点，通过追踪这些点的入射和反射光线，建立点法式直线方程计算是否与问题镜相交从而将这些点分成能量损失点和非能量损失点，非能量损失点数量与选取的总点数的比值则为阴影遮蔽效率。对于截断效率的计算，采用光锥母线追迹法，将圆柱集热器投影成矩形平面，在非能量损失点反射的光锥上追迹多条母线，计算追迹的这些光锥母线是否与集热器平面相交，与集热器平面相交的光锥母线数量与追迹的总光锥母线数量的比值则为截断效率。在计算过程中，我们使用了局-整-局坐标转换法，将每面定日镜和集热器都当成独立对象并为其建立局部坐标系，计算坐标转换时使用整体坐标系作为桥梁，就可大大简化计算的难度。</p>
<p>针对问题二，由于问题一中的阴影遮挡损失最大，本问题选择一种可以消除遮挡损失的定日镜布局方式——EB布局。根据EB布局方式中任意两个定日镜之间不存在遮挡损失的原理，固定吸收塔的平面坐标为(0,0)，由几何关系计算并调整初始定日镜的位置。然后对定日镜数量、吸收塔高度等参数进行迭代求解，以平均镜面面积的热功率为目标函数，在年平均效率$E_{field,all} &gt; 60MW$为约束函数，运用粒子群算法和非线性规划COBYLA算法对定日镜的坐标位置进行优化运算，建立单目标优化模型并使用SolarPILOT工具对结果进行进一步的分析拟合。求解得到[定日镜数量，吸收塔高度，定日镜安装高度，定日镜宽度，定日镜高度，单位面积镜面年平均输出热功率 ] &#x3D; [1020，155.73，7.23，13.28，9.80，0.45]。每面定日镜的具体位置坐标存在result2.xlsx中。</p>
<p>针对问题三，基于问题二的单目标优化模型以及SolarPILOT拟合方法，仍然采用EB布局方法，根据不同定日镜的尺寸和安装高度不同，参考问题二的结果，可以得知定日镜的朝向以及距离吸收塔的距离会影响光学效率大小。以EB布局的定日镜位置为基础，计算定日镜和北方向（即地面参考系的y轴正方向）的夹角thea以及定日镜距离吸收塔的距离leng，将其和定日镜坐标、镜面安装高度以及吸收塔坐标作为变量带入粒子群和COBYLA结合的单目标优化模型中，最终发现定日镜和北方夹角越小或者距离吸收塔更近可以增大光学效率。以此为基础将夹角和距离结合作为比率rate对定日镜的尺寸进行调整，得到最优结果。本题目求解得到[定日镜数量，吸收塔高度，单位面积镜面年平均输出热功率 ] &#x3D; [933，158.24，0.5153]。每面定日镜的尺寸、安装高度以及坐标位置存在result3.xlsx中。</p>
<p>模型的优点：</p>
<p>模型综合使用了塔式太阳能定日镜场一种经典的可以消除阴影遮挡损失的影响，使定日镜场的光学效率得以大步提升</p>
<p>在建立单目标优化模型时，将粒子群算法和COBLAY非线性规划算法进行结合，再降低计算时间复杂度问题的同时提升了结果的准确程度。</p>
<p>缺点：EB布局方法在大量的定日镜数量时小于D blocking布局方法的准确性和光学效率。</p>
<p>模型的改进：</p>
<p>1、在问题一中还可以考虑吸收塔阴影对于阴影遮挡效率的影响，进一步优化光学效率的计算并优化定日经常的布局。</p>
<p>2、在问题二中可以应用更加准确且高校的D blocking 方法，比较不同布局下对于最终光学效率以及热功率的影响。</p>
<p>3、在问题三中还可以将遗传算法结合至单目标优化模型中，可以提高最终参数的准确性。</p>
<p>DC37B88E91C005FD692CB07BB71A5863</p>
<p>A6E6A8FA9041388ADA0483BA586E000E</p>
]]></content>
  </entry>
  <entry>
    <title>RSA</title>
    <url>/2022/10/19/RSA/</url>
    <content><![CDATA[<p>​	</p>
<h2 id="第二题——signin-——不会（且和第六题一个德行）（一看原来是同一个出题人）"><a href="#第二题——signin-——不会（且和第六题一个德行）（一看原来是同一个出题人）" class="headerlink" title="第二题——signin ——不会（且和第六题一个德行）（一看原来是同一个出题人）"></a>第二题——signin ——不会（且和第六题一个德行）（一看原来是同一个出题人）</h2><span id="more"></span>

<p>​	这是一个类似于RSA的题目，但是实际上并不是，题目中已经给出了p，q，e以及明文c的情况下，可以很简单的利用RSA进行解密，但是在求欧拉函数的过程中，发现e对于phi_n不存在逆元，于是联想到欧拉函数和e并不是互素的，经检查之后发现的确如此，然后对于此种e和phi_n不互素的情况，发现可以利用 <em><strong>AMM算法</strong></em> 进行运算。</p>
<p>对此的解释，如果e和phi_n不互素，则二者存在最大公约数，而如果将最大公约数约分掉，则此时两者必然互素，必存在逆元，然后由还没看懂的数论知识，最终得出的铭文m将会是m^e,且e即为伟大公约数，所以此时就会遇到另一个问题，如何对这个大整数明文m^e进行开e次根号，此时AMM算法就开始发挥作用了，AMM算法是一种可以对大整数进行开n次根号的算法，以下附代码</p>
<p>时间原因，没来得及写注释（</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">language：python3</span><br><span class="line">title: RSA&amp;AMM</span><br><span class="line">mark: <span class="number">29</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> tabnanny <span class="keyword">import</span> check</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">12408795636519868275579286477747181009018504169827579387457997229774738126230652970860811085539129972962189443268046963335610845404214331426857155412988073</span></span><br><span class="line">q = <span class="number">12190036856294802286447270376342375357864587534233715766210874702670724440751066267168907565322961270655972226761426182258587581206888580394726683112820379</span></span><br><span class="line">n = q</span><br><span class="line"><span class="comment">#phi_n = (p-1)*(q-1)</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="comment">#e_1 = gmpy2.gcd(e,phi_n)</span></span><br><span class="line"><span class="comment">#d = gmpy2.invert(e//e_1,phi_n)</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">68960610962019321576894097705679955071402844421318149418040507036722717269530195000135979777852568744281930839319120003106023209276898286482202725287026853925179071583797231099755287410760748104635674307266042492611618076506037004587354018148812584502385622631122387857218023049204722123597067641896169655595</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#m = gmpy2.powmod(c,d,phi_n)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GF</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    p = a</span><br><span class="line"><span class="comment">#乘法取模</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">global</span> p</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(a,b,p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM</span>(<span class="params">x,e,p</span>):</span><br><span class="line">    GF(p)</span><br><span class="line">    y = random.randint(<span class="number">1</span>, p-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> g(y, (p-<span class="number">1</span>)//e) == <span class="number">1</span>:</span><br><span class="line">        y = random.randint(<span class="number">1</span>, p-<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#print(y)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;find&quot;</span>)</span><br><span class="line">    <span class="comment">#p-1 = e^t*s</span></span><br><span class="line">    t = <span class="number">1</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> p % e == <span class="number">0</span>:</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">        <span class="comment">#print(t)</span></span><br><span class="line">    s = p // (e**t)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    print(&#x27;e&#x27;,e)</span></span><br><span class="line"><span class="string">    print(&#x27;p&#x27;,p)</span></span><br><span class="line"><span class="string">    print(&#x27;s&#x27;,s)</span></span><br><span class="line"><span class="string">    print(&#x27;t&#x27;,t)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># s|ralpha-1</span></span><br><span class="line">    k = <span class="number">1</span>    </span><br><span class="line">    <span class="keyword">while</span>((s * k + <span class="number">1</span>) % e != <span class="number">0</span>):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alpha = (s * k + <span class="number">1</span>) // e</span><br><span class="line">    <span class="comment">#计算a = y^s b = x^s h =1</span></span><br><span class="line">    <span class="comment">#h为e次非剩余部分的积</span></span><br><span class="line">    a = g(y, (e ** (t - <span class="number">1</span>) ) * s)</span><br><span class="line">    b = g(x, e * alpha - <span class="number">1</span>)</span><br><span class="line">    c = g(y, s)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t-<span class="number">1</span>):</span><br><span class="line">        d = g(b,e**(t-<span class="number">1</span>-i))</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = (-math.log(d,a) % e)</span><br><span class="line">        b = b * (g(g(c, e), j))</span><br><span class="line">        h = h * g(c, j)</span><br><span class="line">        c = g(c,e)</span><br><span class="line">    <span class="keyword">return</span> (g(x,alpha * h)) % p</span><br><span class="line"></span><br><span class="line">mps = AMM(c,e,n)</span><br><span class="line"></span><br><span class="line">flag = long_to_bytes(mps)</span><br><span class="line"><span class="built_in">print</span>(flag.decode(<span class="string">&#x27;utf_8&#x27;</span>,<span class="string">&#x27;ignore&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>题目参考moectf——signin</p>
<h2 id="第四题："><a href="#第四题：" class="headerlink" title="第四题："></a>第四题：</h2><p>此题加密形式给定的两个素数为相邻（等价于相差很小的两个素数），题目种只给出了 n,e,c,所以显然是要通过特定方法对n进行分解</p>
<p>费马分解：可以直接将n进行取平方根，然后此值一定在两个数之间，由于两个质数是由next_prime函数连接的，所以p和q之间不存在素数</p>
<h5 id="则第一种方法，直接对n进行开平方根"><a href="#则第一种方法，直接对n进行开平方根" class="headerlink" title="则第一种方法，直接对n进行开平方根"></a>则第一种方法，直接对n进行开平方根</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="string">&#x27;  &#x27;</span></span><br><span class="line">tmp=gmpy2.iroot(n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">p=gmpy2.next_prime(tmp)</span><br><span class="line">q=n//p</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;p=&quot;</span>,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;q=&quot;</span>,q)</span><br></pre></td></tr></table></figure>

<p>上述方法在运算时只能解出一个较小的解，下面的方法可以同时得到两个解：</p>
<h5 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factor</span>(<span class="params">n</span>):</span><br><span class="line">a=gmpy2.iroot(n,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">a+=<span class="number">1</span></span><br><span class="line">b2=a*a-n</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> gmpy2.is_square(b2):</span><br><span class="line"> b2=gmpy2.mpz(b2)</span><br><span class="line"> b,xflag=gmpy2.iroot(b2,<span class="number">2</span>)</span><br><span class="line"> <span class="keyword">assert</span> xflag</span><br><span class="line"> <span class="keyword">return</span> (a-b,a+b)</span><br></pre></td></tr></table></figure>

<p>这种方法是将<br>$$<br>n &#x3D; p*q<br>$$<br>分解为<br>$$<br>n &#x3D; (a-b)(a+b) &#x3D; a^2 - b^2<br>$$</p>
<p>$$<br>p &#x3D; a+b;q &#x3D; a-b<br>$$</p>
<p>在成功分解的情况下, 得出a后，令<br>$$<br>b2 &#x3D; a^2 - n<br>$$<br>则此时得到<br>$$<br>b2 &#x3D; b^2<br>$$<br>所以对得出的a进行遍历，每次另a++,直至得到b2为一个完全平方数为止。</p>
<p>题目代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> flags</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isqrt</span>(<span class="params">n</span>):</span><br><span class="line">  x = n</span><br><span class="line">  y = (x + n // x) // <span class="number">2</span></span><br><span class="line">  <span class="keyword">while</span> y &lt; x:</span><br><span class="line">    x = y</span><br><span class="line">    y = (x + n // x) // <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fermat</span>(<span class="params">n, verbose=<span class="literal">True</span></span>):</span><br><span class="line">    a = isqrt(n) <span class="comment"># int(ceil(n**0.5))</span></span><br><span class="line">    b2 = a*a - n</span><br><span class="line">    b = isqrt(n) <span class="comment"># int(b2**0.5)</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> b*b != b2:</span><br><span class="line">        <span class="comment"># if verbose:</span></span><br><span class="line">        <span class="comment">#     print(&#x27;Trying: a=%s b2=%s b=%s&#x27; % (a, b2, b))</span></span><br><span class="line">        a = a + <span class="number">1</span></span><br><span class="line">        b2 = a*a - n</span><br><span class="line">        b = isqrt(b2) <span class="comment"># int(b2**0.5)</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    p=a+b</span><br><span class="line">    q=a-b</span><br><span class="line">    <span class="keyword">assert</span> n == p * q</span><br><span class="line">    <span class="comment"># print(&#x27;a=&#x27;,a)</span></span><br><span class="line">    <span class="comment"># print(&#x27;b=&#x27;,b)</span></span><br><span class="line">    <span class="comment"># print(&#x27;p=&#x27;,p)</span></span><br><span class="line">    <span class="comment"># print(&#x27;q=&#x27;,q)</span></span><br><span class="line">    <span class="comment"># print(&#x27;pq=&#x27;,p*q)</span></span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line">n = <span class="number">164395171965189899201846744244839588935095288852148507114700855000512464673975991783671493756953831066569435489213778701866548078207835105414442567008315975881952023037557292470005621852113709605286462434049311321175270134326956812936961821511753256992797013020030263567313257339785161436188882721736453384403</span></span><br><span class="line"></span><br><span class="line">p,q = fermat(n)</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">127749242340004016446001520961422059381052911692861305057396462507126566256652316418648339729479729456613704261614569202080544183416817827900318057127539938899577580150210279291202882125162360563285794285643498788533366420857232908632854569967831654923280152015070999912426044356353393293132914925252494215314</span></span><br><span class="line"></span><br><span class="line">phi_n = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi_n)</span><br><span class="line"></span><br><span class="line">m = gmpy2.powmod(c,d,n)</span><br><span class="line"></span><br><span class="line">key = long_to_bytes(m)</span><br><span class="line">c1 = <span class="string">b&#x27;Just once,I will accompany you to see the world&#x27;</span></span><br><span class="line">flag = strxor(key,c1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag.decode())</span><br></pre></td></tr></table></figure>



<h3 id="第五题："><a href="#第五题：" class="headerlink" title="第五题："></a>第五题：</h3><p>第五题为一个flag分成两半来解</p>
<h5 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h5><p>此为n很大而e很小的rsa解密，对n进行分解采用低指数加密</p>
<h6 id="低指数加密原理："><a href="#低指数加密原理：" class="headerlink" title="低指数加密原理："></a>低指数加密原理：</h6><p>当选取素数为e &#x3D; 3时，加密公匙变为：<br>$$<br>m^3 ≡ c(mod n)<br>$$<br>对此式进行变换可知<br>$$<br>由\ c mod n &#x3D; MOD \ n\m^3 mod n &#x3D; MOD<br>$$</p>
<p>$$<br>m^3  &#x3D;c + k<em>n\m &#x3D; (c+k</em>n)^(1&#x2F;3)<br>$$</p>
<p>所以可以从小到大对k进行枚举，直到开方开出整数为止</p>
<h5 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h5><p>此为dp泄露的RSA解密<br>$$<br>dp &#x3D; d\ mod(p-1)<br>$$<br>推导公式：<br>$$<br>dp &#x3D; d\ mod\ (p-1)<br>➡️dp<em>e &#x3D; d</em>e\ mod\ (p-1)➡️\d<em>e &#x3D; k</em>(p-1)+dp<em>e<br>$$<br>又因为<br>$$<br>d</em>e ≡ 1\ mod\ phi_n<br>$$<br>所以<br>$$<br>k*(p-1) + dp*e ≡ 1mod\ phi_n<br>$$<br>…………………………未完待续：</p>
<p>最后导出<br>$$<br>dp<em>e &#x3D; X</em>(p-1)+1\X∈(0,e)<br>$$<br>所以只需要对X进行遍历即可（X有e-1种可能），求出p-1后，即可求解。</p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>cmake_learn</title>
    <url>/2022/10/29/cmake-learn/</url>
    <content><![CDATA[<h5 id="Cmake"><a href="#Cmake" class="headerlink" title="Cmake"></a>Cmake</h5><p>​	没想到竟然会为了抄一个编译原理作业而“学到”这么多东西，原来从大佬的github上扒代码也是要讲究技术的，呜呜呜，属实是被薄纱了，在求助了fl师傅之后，终于意识到了自己的错误，cmake和make这两个命令的区别。未完待续……</p>
<span id="more"></span>

<p><a href="https://www.jianshu.com/p/9763cd8325bf">https://www.jianshu.com/p/9763cd8325bf</a></p>
<p><a href="https://www.cnblogs.com/yinheyi/p/14968494.html">https://www.cnblogs.com/yinheyi/p/14968494.html</a></p>
<p><a href="https://learn.microsoft.com/zh-cn/cpp/build/cmake-projects-in-visual-studio?view=msvc-170">https://learn.microsoft.com/zh-cn/cpp/build/cmake-projects-in-visual-studio?view=msvc-170</a></p>
<p>一篇特别好的cmake入门文章：</p>
<p><a href="https://zhuanlan.zhihu.com/p/500002865">https://zhuanlan.zhihu.com/p/500002865</a></p>
<p>windows shell <a href="https://www.jb51.net/article/69966.htm">https://www.jb51.net/article/69966.htm</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/448884264%E5%AF%B9%E4%BA%8EGNU/Mingw/LLVM%E4%BB%A5%E5%8F%8Amake/cmake%E7%9A%84%E5%85%A8%E5%B1%80%E4%BB%8B%E7%BB%8D">https://zhuanlan.zhihu.com/p/448884264对于GNU/Mingw/LLVM以及make/cmake的全局介绍</a></p>
<h5 id="mingw和Nmake-makefile的区别："><a href="#mingw和Nmake-makefile的区别：" class="headerlink" title="mingw和Nmake makefile的区别："></a>mingw和Nmake makefile的区别：</h5><p>MinGW Makefile 和 Nmake Makefile 是针对不同的构建工具链而设计的两种不同类型的 Makefile。下面是它们之间的区别：</p>
<ol>
<li>构建工具链：<ul>
<li>MinGW Makefile：针对 MinGW 工具链的 Makefile，用于在 Windows 上进行编译和构建。MinGW（Minimalist GNU for Windows）提供了一套在 Windows 上使用 GNU 工具链的开发工具，包括 GCC 编译器和 GNU Make 工具。</li>
<li>Nmake Makefile：针对 Microsoft Visual Studio 的 Nmake 工具链的 Makefile，用于在 Windows 上进行编译和构建。Nmake 是 Microsoft 提供的用于 Windows 平台的构建工具，通常与 Visual Studio 一起使用。</li>
</ul>
</li>
<li>语法和指令：<ul>
<li>MinGW Makefile：MinGW Makefile 遵循 GNU Make 的语法和指令。它使用类似于 POSIX 环境中的 Makefile 的规范，并支持 GNU Make 的扩展功能和指令。</li>
<li>Nmake Makefile：Nmake Makefile 使用微软的 Nmake 语法和指令。它使用不同于 GNU Make 的规范，并具有自己特定的指令和变量。</li>
</ul>
</li>
<li>平台兼容性：<ul>
<li>MinGW Makefile：MinGW Makefile 可以在 POSIX 兼容的环境（如 Windows、Linux 和 macOS）中使用，并且可以跨平台移植。</li>
<li>Nmake Makefile：Nmake Makefile 是特定于 Windows 平台的，与 Microsoft Visual Studio 和 Nmake 构建工具链紧密集成。</li>
</ul>
</li>
<li>可移植性：<ul>
<li>MinGW Makefile：由于 MinGW 工具链是基于 GNU 工具链的，MinGW Makefile 具有较好的可移植性，并且可以在多个平台和环境中使用。</li>
<li>Nmake Makefile：Nmake Makefile 是特定于 Windows 平台和 Microsoft Visual Studio 的，不具有与其他平台的直接兼容性。</li>
</ul>
</li>
</ol>
<p>需要注意的是，MinGW Makefile 和 Nmake Makefile 在语法和指令上有所不同，因此不能直接互换使用。选择适合你的构建工具链的 Makefile 类型，以便与相关工具和环境集成，并支持正确的构建过程。</p>
<h5 id="makefiles的种类以及相应的编译器版本："><a href="#makefiles的种类以及相应的编译器版本：" class="headerlink" title="makefiles的种类以及相应的编译器版本："></a>makefiles的种类以及相应的编译器版本：</h5><p>Generators</p>
<ul>
<li>Visual Studio 17 2022        &#x3D; Generates Visual Studio 2022 project files.<br>                           Use -A option to specify architecture.<br>Visual Studio 16 2019        &#x3D; Generates Visual Studio 2019 project files.<br>                           Use -A option to specify architecture.<br>Visual Studio 15 2017 [arch] &#x3D; Generates Visual Studio 2017 project files.<br>                           Optional [arch] can be “Win64” or “ARM”.<br>Visual Studio 14 2015 [arch] &#x3D; Generates Visual Studio 2015 project files.<br>                           Optional [arch] can be “Win64” or “ARM”.<br>Visual Studio 12 2013 [arch] &#x3D; Generates Visual Studio 2013 project files.<br>                           Optional [arch] can be “Win64” or “ARM”.<br>Visual Studio 11 2012 [arch] &#x3D; Deprecated.  Generates Visual Studio 2012<br>                           project files.  Optional [arch] can be<br>                           “Win64” or “ARM”.<br>Visual Studio 9 2008 [arch]  &#x3D; Generates Visual Studio 2008 project files.<br>                           Optional [arch] can be “Win64” or “IA64”.<br>Borland Makefiles            &#x3D; Generates Borland makefiles.<br>NMake Makefiles              &#x3D; Generates NMake makefiles.<br>NMake Makefiles JOM          &#x3D; Generates JOM makefiles.<br>MSYS Makefiles               &#x3D; Generates MSYS makefiles.<br>MinGW Makefiles              &#x3D; Generates a make file for use with<br>                           mingw32-make.<br>Green Hills MULTI            &#x3D; Generates Green Hills MULTI files<br>                           (experimental, work-in-progress).<br>Unix Makefiles               &#x3D; Generates standard UNIX makefiles.<br>Ninja                        &#x3D; Generates build.ninja files.<br>Ninja Multi-Config           &#x3D; Generates build-<Config>.ninja files.<br>Watcom WMake                 &#x3D; Generates Watcom WMake makefiles.<br>CodeBlocks - MinGW Makefiles &#x3D; Generates CodeBlocks project files.<br>CodeBlocks - NMake Makefiles &#x3D; Generates CodeBlocks project files.<br>CodeBlocks - NMake Makefiles JOM<br>                         &#x3D; Generates CodeBlocks project files.<br>CodeBlocks - Ninja           &#x3D; Generates CodeBlocks project files.<br>CodeBlocks - Unix Makefiles  &#x3D; Generates CodeBlocks project files.<br>CodeLite - MinGW Makefiles   &#x3D; Generates CodeLite project files.<br>CodeLite - NMake Makefiles   &#x3D; Generates CodeLite project files.<br>CodeLite - Ninja             &#x3D; Generates CodeLite project files.<br>CodeLite - Unix Makefiles    &#x3D; Generates CodeLite project files.<br>Eclipse CDT4 - NMake Makefiles<br>                         &#x3D; Generates Eclipse CDT 4.0 project files.<br>Eclipse CDT4 - MinGW Makefiles<br>                         &#x3D; Generates Eclipse CDT 4.0 project files.<br>Eclipse CDT4 - Ninja         &#x3D; Generates Eclipse CDT 4.0 project files.<br>Eclipse CDT4 - Unix Makefiles&#x3D; Generates Eclipse CDT 4.0 project files.<br>Kate - MinGW Makefiles       &#x3D; Generates Kate project files.<br>Kate - NMake Makefiles       &#x3D; Generates Kate project files.<br>Kate - Ninja                 &#x3D; Generates Kate project files.<br>Kate - Unix Makefiles        &#x3D; Generates Kate project files.<br>Sublime Text 2 - MinGW Makefiles<br>                         &#x3D; Generates Sublime Text 2 project files.<br>Sublime Text 2 - NMake Makefiles<br>                         &#x3D; Generates Sublime Text 2 project files.<br>Sublime Text 2 - Ninja       &#x3D; Generates Sublime Text 2 project files.<br>Sublime Text 2 - Unix Makefiles<br>                         &#x3D; Generates Sublime Text 2 project files.</li>
</ul>
]]></content>
      <categories>
        <category>一些工具的学习</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Ctf练习</title>
    <url>/2023/03/26/coppersmith/</url>
    <content><![CDATA[<h5 id="2-1-示例一"><a href="#2-1-示例一" class="headerlink" title="2.1 示例一"></a>2.1 示例一</h5><h5 id="N-x3D-179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639477074095512480796227391561801824887394139579933613278628104952355769470429079061808809522886423955917442317693387325171135071792698344550223571732405562649211"><a href="#N-x3D-179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639477074095512480796227391561801824887394139579933613278628104952355769470429079061808809522886423955917442317693387325171135071792698344550223571732405562649211" class="headerlink" title="N &#x3D; 179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639477074095512480796227391561801824887394139579933613278628104952355769470429079061808809522886423955917442317693387325171135071792698344550223571732405562649211"></a>N &#x3D; 179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639477074095512480796227391561801824887394139579933613278628104952355769470429079061808809522886423955917442317693387325171135071792698344550223571732405562649211</h5><h5 id="C-x3D-179769313486231590772930519078879918173304939703457226373275247148595498759717648122918281796652009802987669006925212794207879662511415896044452932898704049018688901059103708542193959190783144422816477633612563780683282959788789236360344669112860717536812210743214198827228145383454293387005012636745015334547"><a href="#C-x3D-179769313486231590772930519078879918173304939703457226373275247148595498759717648122918281796652009802987669006925212794207879662511415896044452932898704049018688901059103708542193959190783144422816477633612563780683282959788789236360344669112860717536812210743214198827228145383454293387005012636745015334547" class="headerlink" title="C &#x3D; 179769313486231590772930519078879918173304939703457226373275247148595498759717648122918281796652009802987669006925212794207879662511415896044452932898704049018688901059103708542193959190783144422816477633612563780683282959788789236360344669112860717536812210743214198827228145383454293387005012636745015334547"></a>C &#x3D; 179769313486231590772930519078879918173304939703457226373275247148595498759717648122918281796652009802987669006925212794207879662511415896044452932898704049018688901059103708542193959190783144422816477633612563780683282959788789236360344669112860717536812210743214198827228145383454293387005012636745015334547</h5><h5 id="K-known-x3D-179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827235556412466425596022697985153597317113782632362546831388835840"><a href="#K-known-x3D-179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827235556412466425596022697985153597317113782632362546831388835840" class="headerlink" title="K_known &#x3D; 179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827235556412466425596022697985153597317113782632362546831388835840"></a>K_known &#x3D; 179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827235556412466425596022697985153597317113782632362546831388835840</h5><h5 id="e-x3D-3"><a href="#e-x3D-3" class="headerlink" title="e&#x3D;3,"></a>e&#x3D;3,</h5><h5 id="求M，其中M-x3D-K-known-x-0，即求x-0"><a href="#求M，其中M-x3D-K-known-x-0，即求x-0" class="headerlink" title="求M，其中M &#x3D; K_known+x_0，即求x_0."></a>求M，其中M &#x3D; K_known+x_0，即求x_0.</h5><p>x0 &#x3D; </p>
<h5 id="2-2示例二"><a href="#2-2示例二" class="headerlink" title="2.2示例二"></a>2.2示例二</h5><h5 id="N-x3D-564761954589225685790600357175654927630507102952458240533488436763726131946307269500484579650103183883365719004294487534489841240202553161677917446702576880580483049669620695517848610900355474290043985788683180202610956370314542593233068920908309907035416313647682738795572793559472040741450305208268946934787"><a href="#N-x3D-564761954589225685790600357175654927630507102952458240533488436763726131946307269500484579650103183883365719004294487534489841240202553161677917446702576880580483049669620695517848610900355474290043985788683180202610956370314542593233068920908309907035416313647682738795572793559472040741450305208268946934787" class="headerlink" title="N&#x3D;564761954589225685790600357175654927630507102952458240533488436763726131946307269500484579650103183883365719004294487534489841240202553161677917446702576880580483049669620695517848610900355474290043985788683180202610956370314542593233068920908309907035416313647682738795572793559472040741450305208268946934787"></a>N&#x3D;564761954589225685790600357175654927630507102952458240533488436763726131946307269500484579650103183883365719004294487534489841240202553161677917446702576880580483049669620695517848610900355474290043985788683180202610956370314542593233068920908309907035416313647682738795572793559472040741450305208268946934787</h5><h5 id="qbar-x3D-42121870893450634577463914985889299119866228583627912396576170307551916037987547771260822964332541009710061289949691591169163556780902047793243036193914880"><a href="#qbar-x3D-42121870893450634577463914985889299119866228583627912396576170307551916037987547771260822964332541009710061289949691591169163556780902047793243036193914880" class="headerlink" title="qbar &#x3D; 42121870893450634577463914985889299119866228583627912396576170307551916037987547771260822964332541009710061289949691591169163556780902047793243036193914880"></a>qbar &#x3D; 42121870893450634577463914985889299119866228583627912396576170307551916037987547771260822964332541009710061289949691591169163556780902047793243036193914880</h5><h5 id="求p-q-其中q-x3D-qbar-x-0，即求x-0。"><a href="#求p-q-其中q-x3D-qbar-x-0，即求x-0。" class="headerlink" title="求p, q,其中q &#x3D; qbar +x_0，即求x_0。"></a>求p, q,其中q &#x3D; qbar +x_0，即求x_0。</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">N = <span class="number">179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639477074095512480796227391561801824887394139579933613278628104952355769470429079061808809522886423955917442317693387325171135071792698344550223571732405562649211</span></span><br><span class="line">e  =<span class="number">3</span></span><br><span class="line">m = <span class="number">179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827235556412466425596022697985153597317113782632362546831388835840</span></span><br><span class="line">c = <span class="number">179769313486231590772930519078879918173304939703457226373275247148595498759717648122918281796652009802987669006925212794207879662511415896044452932898704049018688901059103708542193959190783144422816477633612563780683282959788789236360344669112860717536812210743214198827228145383454293387005012636745015334547</span></span><br><span class="line">ZmodN = Zmod(N)</span><br><span class="line">P.&lt;x&gt; = PolynomialRing(ZmodN)</span><br><span class="line">f = (m+x)^e - c </span><br><span class="line">dd = f.degree()</span><br><span class="line">beta = <span class="number">1</span></span><br><span class="line">epsilon = beta/<span class="number">7</span></span><br><span class="line">mm = ceil(beta**<span class="number">2</span> / (dd * epsilon))</span><br><span class="line">tt = floor(dd * mm *((<span class="number">1</span>/beta)-<span class="number">1</span>))</span><br><span class="line">xx = ceil(N**((beta**<span class="number">2</span> / dd)-epsilon))</span><br><span class="line">roots = coppersmith_howgrave_univariate(f,N,beta,mm,tt,xx)</span><br><span class="line"><span class="built_in">print</span>(roots)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(roots[<span class="number">0</span>])+m)</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">10425362517576480673939720452981938818279517750298316165817</span></span><br></pre></td></tr></table></figure>



<h3 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">564761954589225685790600357175654927630507102952458240533488436763726131946307269500484579650103183883365719004294487534489841240202553161677917446702576880580483049669620695517848610900355474290043985788683180202610956370314542593233068920908309907035416313647682738795572793559472040741450305208268946934787</span></span><br><span class="line">qbar = <span class="number">42121870893450634577463914985889299119866228583627912396576170307551916037987547771260822964332541009710061289949691591169163556780902047793243036193914880</span></span><br><span class="line">ZmodN = Zmod(N)</span><br><span class="line">P.&lt;x&gt; = PolynomialRing(ZmodN)</span><br><span class="line">f = x - qbar</span><br><span class="line">beta = <span class="number">0.5</span></span><br><span class="line">dd = f.degree()</span><br><span class="line">epsilon = beta/<span class="number">7</span></span><br><span class="line">mm = ceil(beta**<span class="number">2</span> /(dd * epsilon))</span><br><span class="line">tt = floor(dd*mm*((<span class="number">1</span>/beta) - <span class="number">1</span>))</span><br><span class="line">xx = ceil(N**((beta**<span class="number">2</span> / dd)-epsilon))</span><br><span class="line">roots = coppersmith_howgrave_univariate(f,N,beta,mm,tt,xx)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">potential roots: [(<span class="number">42121870893450634577463914985889299119866228583627912396576170307551916037987547771260822964332541009710061289949691591169163556780902047793243036193914880</span>, <span class="number">1</span>), (-<span class="number">66320978925266625</span>/<span class="number">281474976710656</span>, <span class="number">3</span>), (-<span class="number">1606938044258990275541962092341162602522202993782792835301417</span>, <span class="number">3</span>)]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>ctf密码er留校刷题</title>
    <url>/2022/12/21/ctf%E5%AF%86%E7%A0%81er%E7%95%99%E6%A0%A1%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<h1 id="留校刷题喵"><a href="#留校刷题喵" class="headerlink" title="留校刷题喵"></a>留校刷题喵</h1><span id="more"></span>

<h2 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h2><h4 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h4><p>base64：将byte数组编码为字符串，且编码出的字符串只包含ASCII基础字符，</p>
<h5 id="其中“-x3D-”号作为填充符。很关键，识别base64解密"><a href="#其中“-x3D-”号作为填充符。很关键，识别base64解密" class="headerlink" title="其中“&#x3D;”号作为填充符。很关键，识别base64解密"></a>其中“&#x3D;”号作为填充符。很关键，识别base64解密</h5><p>编码后的文本只包含64个ASCII字符（偶尔会加一个填充符&#x3D;）</p>
<p>base为了解决各个系统以及传输协议中二进制不兼容的问题而生的</p>
<h5 id="base算法实现过程：、"><a href="#base算法实现过程：、" class="headerlink" title="base算法实现过程：、"></a>base算法实现过程：、</h5><p>1、将原始数据每三个字节作为一组（24bit）</p>
<p>2、将24个bit分为4组（每组6个bit）</p>
<p>3、在每组前面补00，将其补成4组8个bit</p>
<p>4、根据base64码表得到扩展后每个字节的对应符号</p>
<p>结束<a href="https://zh.wikipedia.org/wiki/Base64">https://zh.wikipedia.org/wiki/Base64</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/384238870">https://zhuanlan.zhihu.com/p/384238870</a></p>
<h5 id="当原文符号数不是三的倍数的时候，在后面补等于号（binggo！）"><a href="#当原文符号数不是三的倍数的时候，在后面补等于号（binggo！）" class="headerlink" title="当原文符号数不是三的倍数的时候，在后面补等于号（binggo！）"></a>当原文符号数不是三的倍数的时候，在后面补等于号（binggo！）</h5><h4 id="2、URL编码：（百分比编码）"><a href="#2、URL编码：（百分比编码）" class="headerlink" title="2、URL编码：（百分比编码）"></a>2、URL编码：（百分比编码）</h4><p>URL编码将字符串转换为可通过因特网传输的格式</p>
<p>URL只能使用ASCII字符集通过因特网进行发送</p>
<p>URL编码使用后跟16进制数字的%替代不安全的ASCII字符</p>
<p>URL不能包含空格，URL编码使用+或者%20 替代空格。</p>
<p><a href="https://www.w3school.com.cn/tags/html_ref_urlencode.asp">https://www.w3school.com.cn/tags/html_ref_urlencode.asp</a></p>
<h4 id="3、ROT13"><a href="#3、ROT13" class="headerlink" title="3、ROT13"></a>3、ROT13</h4><p>通过观察偏移量判断出凯斯密码</p>
<p>ROT13是它本身的逆反，同样的操作可同时用于加密和解密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzNOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm</span><br></pre></td></tr></table></figure>

<p><a href="https://zh.wikipedia.org/wiki/ROT13">https://zh.wikipedia.org/wiki/ROT13</a></p>
<p>偏移量为10：Avocat</p>
<p>-5：Cassis</p>
<p>-6：Cassette</p>
<h4 id="4、凯撒密码"><a href="#4、凯撒密码" class="headerlink" title="4、凯撒密码"></a>4、凯撒密码</h4><p>凯撒密码基础加密只会对字母进行偏移</p>
<p><img src="https://img-blog.csdnimg.cn/20201027104312210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FvNTI0MjYwNTU=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>变异凯撒（自己找规律）</p>
<p>python：不可变数据类型：number，string，tuple（元组）</p>
<p>可变数据：列表（List）、字典、集合</p>
<p>python中不存在单个字符的类型，单个字符作为一个字符串来处理</p>
<h5 id="字符转ascii码：ord（）"><a href="#字符转ascii码：ord（）" class="headerlink" title="字符转ascii码：ord（）"></a>字符转ascii码：ord（）</h5><h5 id="数字转字符：chr（数字）"><a href="#数字转字符：chr（数字）" class="headerlink" title="数字转字符：chr（数字）"></a>数字转字符：chr（数字）</h5><h4 id="5、Quoted-printable编码"><a href="#5、Quoted-printable编码" class="headerlink" title="5、Quoted-printable编码"></a>5、Quoted-printable编码</h4><h4 id="6、rabbit加密"><a href="#6、rabbit加密" class="headerlink" title="6、rabbit加密"></a>6、rabbit加密</h4><p>这是一种高速流密码：使用一个128位密匙和一个64位初始化向量，由26个英文字母以及+ - * &#x2F; 组成</p>
<p>以U2FsdGVkX1开头</p>
<p>可能以等号结尾</p>
<h4 id="7、栅栏加密"><a href="#7、栅栏加密" class="headerlink" title="7、栅栏加密"></a>7、栅栏加密</h4><p>把要加密的明文分为N个为一组，然后把每组的第一个字连起来，形成一段无规律的话</p>
<h4 id="8、哈希函数"><a href="#8、哈希函数" class="headerlink" title="8、哈希函数"></a>8、哈希函数</h4><p>1md5转换：128bit 32位</p>
<p>SHA1：160bit 40位</p>
<p>SHA256：256bit 64位</p>
<p>SHA512：512bit 128位</p>
<h4 id="9、windows系统密码（hash文件）"><a href="#9、windows系统密码（hash文件）" class="headerlink" title="9、windows系统密码（hash文件）"></a>9、windows系统密码（hash文件）</h4><p>cmd打开文件命令：start</p>
<h5 id="windows认证体系：NTLM认证"><a href="#windows认证体系：NTLM认证" class="headerlink" title="windows认证体系：NTLM认证"></a>windows认证体系：NTLM认证</h5><p>NLTM-Hash：存储在SAM数据库及NTDS数据库中对密码进行hash摘要计算后的结</p>
<p>数字转中文：unicode编码、中文电码</p>
<h4 id="10、猪圈密码（草）when-the-pig-want-treat"><a href="#10、猪圈密码（草）when-the-pig-want-treat" class="headerlink" title="10、猪圈密码（草）when the pig want treat"></a>10、猪圈密码（草）when the pig want treat</h4><h2 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h2><h4 id="11、dp-amp-dq泄露"><a href="#11、dp-amp-dq泄露" class="headerlink" title="11、dp&amp;dq泄露"></a>11、dp&amp;dq泄露</h4><p>在这里终于补上了一些东西：</p>
<p>1、欧几里得与扩展欧几里得（用python写递归好抽象。。。）</p>
<p>2、利用费马小定理求逆元时用到的快速幂算法</p>
<h4 id="快速幂算法："><a href="#快速幂算法：" class="headerlink" title="快速幂算法："></a>快速幂算法：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;保留最后的三位，所以要对1000取余&#x27;&#x27;&#x27;</span></span><br><span class="line">mod = <span class="number">1000</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fastpower</span>(<span class="params">a,b</span>):</span><br><span class="line">    ans = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> b&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span>(b%<span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">            b//=<span class="number">2</span></span><br><span class="line">            a = a*a%mod</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            b = b-<span class="number">1</span></span><br><span class="line">            ans = ans*a%mod</span><br><span class="line">            b//=<span class="number">2</span></span><br><span class="line">            a = a*a%mod</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fastpower(<span class="number">2</span>,<span class="number">1000000000</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;下面再对快速幂算法进行优化&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fasterpower</span>(<span class="params">a,b</span>):</span><br><span class="line">    ans = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> b &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> b%<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            ans = ans*a%mod</span><br><span class="line">        b//=<span class="number">2</span> </span><br><span class="line">        a = a*a%mod</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">ans = fasterpower(<span class="number">2</span>,<span class="number">1000000000</span>)</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure>



<h5 id="这里是一个给出dp，dq，c，p，q但是并没有给出e的题目，属于dp和dq双泄露但是并没有给定密钥"><a href="#这里是一个给出dp，dq，c，p，q但是并没有给出e的题目，属于dp和dq双泄露但是并没有给定密钥" class="headerlink" title="这里是一个给出dp，dq，c，p，q但是并没有给出e的题目，属于dp和dq双泄露但是并没有给定密钥"></a>这里是一个给出dp，dq，c，p，q但是并没有给出e的题目，属于dp和dq双泄露但是并没有给定密钥</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span> </span><br><span class="line">q = <span class="number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span> </span><br><span class="line">dp = <span class="number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span> </span><br><span class="line">dq = <span class="number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span> </span><br><span class="line">c = <span class="number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m1 = <span class="built_in">pow</span>(c,dp,p)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c,dq,q)</span><br><span class="line">inv_p = inverse(p,q)</span><br><span class="line">k = ((m2-m1)%q)*inv_p%q</span><br><span class="line">m = (k*p+m1)%(p*q)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="12、共模攻击"><a href="#12、共模攻击" class="headerlink" title="12、共模攻击"></a>12、共模攻击</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c1=<span class="number">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span></span><br><span class="line">n=<span class="number">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span></span><br><span class="line">e1=<span class="number">11187289</span></span><br><span class="line">c2=<span class="number">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span></span><br><span class="line">e2=<span class="number">9647291</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exgcd</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> a,<span class="number">1</span>,<span class="number">0</span></span><br><span class="line">    r,x,y = exgcd(b,a%b)</span><br><span class="line">    k = a//b</span><br><span class="line">    temp = x</span><br><span class="line">    x = y</span><br><span class="line">    y = temp - k*y</span><br><span class="line">    <span class="keyword">return</span> r,x,y</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fastpower</span>(<span class="params">a,b,mod</span>):</span><br><span class="line">    ans = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(b &gt; <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> b%<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            ans = ans*a%mod</span><br><span class="line">        a = a*a%mod</span><br><span class="line">        b//=<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">public_mod</span>(<span class="params">c1,c2,e1,e2,n</span>):</span><br><span class="line">    r,s1,s2 = exgcd(e1,e2)</span><br><span class="line">    <span class="built_in">print</span>(r,s1,s2)</span><br><span class="line">    <span class="keyword">if</span> s1 &lt; <span class="number">0</span>:</span><br><span class="line">        s1 = -s1</span><br><span class="line">        c1 = inverse(c1,n)</span><br><span class="line">    <span class="keyword">if</span> s2 &lt; <span class="number">0</span>:</span><br><span class="line">        s2 = -s2</span><br><span class="line">        c2 = inverse(c2,n)</span><br><span class="line"></span><br><span class="line">    m = <span class="built_in">pow</span>(c1,s1,n)*(<span class="built_in">pow</span>(c2,s2,n))%n</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line">m = public_mod(c1,c2,e1,e2,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure>



<h4 id="13、Unencode编码："><a href="#13、Unencode编码：" class="headerlink" title="13、Unencode编码："></a>13、Unencode编码：</h4><p>编码算法：将三个字符顺序放入一个24位的缓冲区，缺字符的地方补零，然后将缓冲区截断为4个部分，高位在先，每个部分6位，用专门的64个字符重新表示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">“`!”<span class="comment">#$%&amp;’()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_”</span></span><br></pre></td></tr></table></figure>

<p>在文件的开头有”begin xxx(被编码的文件名)</p>
<p>在文件的结尾有”end“用于标志Uue文件的开始与结束</p>
<p>编码时，每次读取源文件的45个字符，不足45个的用”NULL”补足为3的整数倍，然后输入目标文件一个ASCII为：</p>
<p>32+实际读取的字符数”的字符作为每一行的开始。读取的字符编码后输入目标文件，再输入一个“换行符”。如果源文件被编码完了，那么输入“&#96;（ASCII为96）”和一个“换行符”表示编码结束。</p>
<p>解码时它将4个字符分别转换为4个6位字符后，截取有用的后六位放入一个 24 位的缓冲区，即得3个二进制代码。</p>
<h4 id="14、dp泄露"><a href="#14、dp泄露" class="headerlink" title="14、dp泄露"></a>14、dp泄露</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113</span></span><br><span class="line">dp = <span class="number">905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dp_leak</span>(<span class="params">e,dp,n</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e):</span><br><span class="line">        <span class="keyword">if</span>(dp*e - <span class="number">1</span>)%i == <span class="number">0</span>:</span><br><span class="line">            p = (dp*e - <span class="number">1</span>)//i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> n%p == <span class="number">0</span>:</span><br><span class="line">                q = n//p</span><br><span class="line">                <span class="keyword">return</span> p,q</span><br><span class="line">    </span><br><span class="line">p,q = dp_leak(e,dp,n)</span><br><span class="line">phi_n = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi_n)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line">        </span><br></pre></td></tr></table></figure>



<h2 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h2><h4 id="15、十六进制转为字符串"><a href="#15、十六进制转为字符串" class="headerlink" title="15、十六进制转为字符串"></a>15、十六进制转为字符串</h4><p>可以直接用函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">&#x27;61666374667B317327745F73305F333435797D&#x27;</span></span><br><span class="line">flag = <span class="built_in">bytes</span>.fromhex(c).decode()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>可以选择base16编码的函数来解码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">hex_str = <span class="string">&#x27;7468616e6b20796f752076657279206d75636821&#x27;</span> </span><br><span class="line"><span class="built_in">print</span>(base64.b16decode(hex_str.upper()))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>字符串转为16进制：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_char = char.encode().<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(char + <span class="string">&quot; 的十六进制序列是：&quot;</span> + _char)</span><br></pre></td></tr></table></figure>

<h4 id="16、"><a href="#16、" class="headerlink" title="16、"></a>16、</h4><p>字符串转为二进制</p>
<p>二进制进行异或操作</p>
<p>二进制转为16进制</p>
<p>16进制转为字符串</p>
<h5 id="bytes-from-hex-s"><a href="#bytes-from-hex-s" class="headerlink" title="bytes.from(hex(s))"></a>bytes.from(hex(s))</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>.join([<span class="built_in">bin</span>(<span class="built_in">ord</span>(c)).replace(<span class="string">&#x27;0b&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="built_in">int</span>(b, <span class="number">2</span>) <span class="keyword">for</span> b <span class="keyword">in</span> s.split(<span class="string">&#x27; &#x27;</span>)]])</span><br><span class="line">    </span><br><span class="line">s1 = <span class="string">&#x27;ἇ̀Ј唒ဃ塔屋䩘卖剄䐃堂ن䝔嘅均ቄ䩝ᬔ&#x27;</span></span><br><span class="line">s2 = <span class="string">&#x27;asadsasdasdasdasdasdasdasdasdasdqwesqf&#x27;</span></span><br><span class="line"></span><br><span class="line">c1 = <span class="string">&#x27;1111100000111 1100000000 10000001000 101010100010010 1000000000011 101100001010100 101110001001011 100101001011000 101001101010110 101001001000100 100010000000011 101100000000010 11001000110 100011101010100 101011000000101 101011101000111 1001001000100 100101001011101 1101100010100&#x27;</span></span><br><span class="line">c1 = c1.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">c2 = <span class="string">&#x27;1100001 1110011 1100001 1100100 1110011 1100001 1110011 1100100 1100001 1110011 1100100 1100001 1110011 1100100 1100001 1110011 1100100 1100001 1110011 1100100 1100001 1110011 1100100 1100001 1110011 1100100 1100001 1110011 1100100 1100001 1110011 1100100 1110001 1110111 1100101 1110011 1110001 1100110&#x27;</span></span><br><span class="line">c2 = c2.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">a = <span class="string">&#x27;0110000101110011011000010110010001110011011000010111001101100100011000010111001101100100011000010111001101100100011000010111001101100100011000010111001101100100011000010111001101100100011000010111001101100100011000010111001101100100011000010111001101100100011100010111011101100101011100110111000101100110&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;0000011100011111000000000000001100001000000001000001001001010101000000110001000001010100010110000100101101011100010110000100101001010110010100110100010001010010000000110100010000000010010110000100011000000110010101000100011100000101010101100100011101010111010001000001001001011101010010100001010000011011&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="keyword">if</span>(a[i] == b[i]):</span><br><span class="line">        c+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        c+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">m = <span class="built_in">hex</span>(<span class="built_in">int</span>(c,<span class="number">2</span>))</span><br><span class="line">flag = <span class="built_in">bytes</span>.fromhex(m[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p>下面附上进制转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">任意进制转为<span class="number">10</span>进制：</span><br><span class="line"><span class="built_in">int</span>(s,待转换进制)</span><br><span class="line"></span><br><span class="line"><span class="number">10</span>进制转为<span class="number">16</span>进制：</span><br><span class="line"><span class="built_in">hex</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="number">10</span>进制转为<span class="number">2</span>进制</span><br><span class="line"><span class="built_in">bin</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="number">16</span>进制转为<span class="number">2</span>进制：</span><br><span class="line">先要<span class="number">16</span>进制转为<span class="number">10</span>进制再将<span class="number">10</span>进制转为<span class="number">2</span>进制</span><br><span class="line"></span><br><span class="line">任意进制转为<span class="number">8</span>进制</span><br><span class="line"><span class="built_in">oct</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="number">16</span>进制转为字符串</span><br><span class="line"><span class="built_in">bytes</span>.fromhex(s).decode()</span><br></pre></td></tr></table></figure>

<h4 id="17、给出两个文件flag-enc-密文-以及pub-key-公钥"><a href="#17、给出两个文件flag-enc-密文-以及pub-key-公钥" class="headerlink" title="17、给出两个文件flag.enc(密文)以及pub.key(公钥)"></a>17、给出两个文件flag.enc(密文)以及pub.key(公钥)</h4><p>首先根据公钥解出n以及e的具体值</p>
<p>利用openssl？但是还没有仔细看，下次一定看呜呜呜</p>
<p>google得到可以利用python自带的库，又学到了一个新模板Crypto.PublicKey.RSA</p>
<p>直接应用RSA中的importkey函数导入文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">public_key = RSA.importKey(<span class="built_in">open</span>(<span class="string">r&quot;C:\Users\20191\Desktop\pub.key&quot;</span>,<span class="string">&#x27;rb&#x27;</span>).read())</span><br></pre></td></tr></table></figure>

<p>然后可以yafu将n进行分解p和q</p>
<p>利用rsa库可以得到私钥:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;private.pem&#x27;</span>, mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> privatefile:</span><br><span class="line">	keydata = privatefile.read()</span><br><span class="line">privkey = rsa.PrivateKey.load_pkcs1(keydata)</span><br><span class="line"></span><br><span class="line">具体操作如下：</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line">(pubkey, privkey) = rsa.newkeys(<span class="number">512</span>)  <span class="comment"># 创建公钥和私钥，512为设定你加密字符串的最大可支持加密长度为512位=64字节，你也可以按需设置任意长度，越长加密越慢，越短越快</span></span><br><span class="line"><span class="comment"># 将公钥和私钥以pem编码格式保存</span></span><br><span class="line">pub = pubkey.save_pkcs1()</span><br><span class="line">pri = privkey.save_pkcs1()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;公钥初始的值为：<span class="subst">&#123;pubkey&#125;</span>，以pem格式的保存后的数据为：<span class="subst">&#123;pub&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;私钥初始的值为：<span class="subst">&#123;privkey&#125;</span> \n 以pem格式的保存后的私钥数据为：<span class="subst">&#123;pri&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">#  打印结果</span></span><br><span class="line"><span class="comment"># 公钥初始的值为：PublicKey(7481244465315159030174941866408088977078689270761513884333182534899112302828868853012354970827459273420757239091319237996571359037764144367408861808720513, 65537) </span></span><br><span class="line"><span class="comment"># 以pem格式的保存后的公钥数据为：b&#x27;-----BEGIN RSA PUBLIC KEY-----\nMEgCQQCO14+r/YbVU9gmeglgJoi8PNUvVaLzRFOBi/dNN5muCB6kRCzBylNhWpMi\nGAKy+wNjY/V1JKp7eILkc3KyMHqBAgMBAAE=\n-----END RSA PUBLIC KEY-----\n&#x27;</span></span><br><span class="line"><span class="comment"># 私钥初始的值为：PrivateKey(7481244465315159030174941866408088977078689270761513884333182534899112302828868853012354970827459273420757239091319237996571359037764144367408861808720513, 65537, 3506665680913321791475716605798100085247726562224742435766529354251275320158796528099874018589937145723483840242318255274732417780923351826009689191428353, 5643184159408851232131776560683191883064718200648061020021754396931515736448351153, 1325713330273249992945906759133446589093679828123455507108369540590727121) </span></span><br><span class="line"><span class="comment"># 以pem格式的保存后的私钥数据为：b&#x27;-----BEGIN RSA PRIVATE KEY-----\nMIIBPAIBAAJBAI7Xj6v9htVT2CZ6CWAmiLw81S9VovNEU4GL9003ma4IHqRELMHK\nU2FakyIYArL7A2Nj9XUkqnt4guRzcrIweoECAwEAAQJAQvQ5jNWeYNoXJBnp0R7e\n0tT03GYYpkxtk/iGZ7RaxGNXkIecc0u+bg4kSXC8BpcxpVS7xqWIPO4+ognbOkUx\nAQIjAL5ffVWlM15Ijcy5isAEzO6UnspteTYaA1H098CNMrSgu7ECHwDAFXC9M3X5\nKGM7tRw7/Vb7hroNJ23crvKG7Y/N79ECImrGeC/PRq59FztaXd4xUxgFt8JmAHQ9\nxtrzAPq4t1XkSSECHwCEbkPMLi6oGbBQ+gz9Ty0pPToI16ZnADc1z5PV6AECIhGm\n7Hx73R+hCWXIih/bttl0W7hl6mlIOqZXo30IfFUPHtQ=\n-----END RSA PRIVATE KEY-----\n&#x27;</span></span><br><span class="line"><span class="comment"># 将公钥保存到文件 ,将字节写入文件需要加上decode（&#x27;utf-8&#x27;），python3新增</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;public.pub&quot;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> file:  <span class="comment"># public.pub，保存的文件名，可更改路径，这里保存在当前路径下</span></span><br><span class="line">    file.write(pub.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="comment"># 将私钥保存到文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;private.pem&quot;</span>, <span class="string">&#x27;w+&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(pri.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 取出公钥</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;public.pub&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file_pub:</span><br><span class="line">	<span class="comment"># 从文件中读出数据</span></span><br><span class="line">    pub_data = file_pub.read()</span><br><span class="line">    <span class="comment"># 将读出数据通过PublicKey.load_pkcs1()转换为公钥</span></span><br><span class="line">    pubkey = rsa.PublicKey.load_pkcs1(pub_data)</span><br><span class="line"><span class="comment"># 取出私钥</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;private.pub&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file_pri:</span><br><span class="line">    pri_data = file_pri.read()</span><br><span class="line">    <span class="comment"># 将读出数据通过PrivateKey.load_pkcs1()转换为私钥</span></span><br><span class="line">    prikey = rsa.PrivateKey.load_pkcs1(pri_data)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>rsa加解密过程：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># rsa加密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsaEncrypt</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    <span class="comment"># 生成公钥、私钥</span></span><br><span class="line">    (pubkey, privkey) = rsa.newkeys(<span class="number">512</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;公钥:\n%s\n私钥:\n:%s&quot;</span> % (pubkey, privkey))</span><br><span class="line">    <span class="comment"># 明文编码格式</span></span><br><span class="line">    content = <span class="built_in">str</span>.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="comment"># 公钥加密</span></span><br><span class="line">    crypto = rsa.encrypt(content, pubkey)</span><br><span class="line">    <span class="keyword">return</span> (crypto, privkey)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># rsa解密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rsaDecrypt</span>(<span class="params"><span class="built_in">str</span>, pk</span>):</span><br><span class="line">    <span class="comment"># 私钥解密</span></span><br><span class="line">    content = rsa.decrypt(<span class="built_in">str</span>, pk)</span><br><span class="line">    con = content.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> con</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">str</span>, pk = rsaEncrypt(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;加密后密文：\n%s&quot;</span> % <span class="built_in">str</span>)</span><br><span class="line">    content = rsaDecrypt(<span class="built_in">str</span>, pk)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解密后明文：\n%s&quot;</span> % content)</span><br></pre></td></tr></table></figure>

<p>python文件操作：<a href="https://www.w3cschool.cn/article/25704283.html%E3%80%81">https://www.w3cschool.cn/article/25704283.html、</a></p>
<h1 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h1><h4 id="18、Rsaroll"><a href="#18、Rsaroll" class="headerlink" title="18、Rsaroll"></a>18、Rsaroll</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p =  <span class="number">49891</span></span><br><span class="line">q =  <span class="number">18443</span></span><br><span class="line">e = <span class="number">19</span></span><br><span class="line">n = p*q</span><br><span class="line">phi_n = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi_n)</span><br><span class="line">c  = [<span class="number">704796792</span>,<span class="number">752211152</span>,<span class="number">274704164</span>,<span class="number">18414022</span>,<span class="number">368270835</span>,<span class="number">483295235</span>,<span class="number">263072905</span>,<span class="number">459788476</span>,<span class="number">483295235</span>,<span class="number">459788476</span>,<span class="number">663551792</span>,<span class="number">475206804</span>,<span class="number">459788476</span>,<span class="number">428313374</span>,<span class="number">475206804</span>,<span class="number">459788476</span>,<span class="number">425392137</span>,<span class="number">704796792</span>,<span class="number">458265677</span>,<span class="number">341524652</span>,<span class="number">483295235</span>,<span class="number">534149509</span>,<span class="number">425392137</span>,<span class="number">428313374</span>,<span class="number">425392137</span>,<span class="number">341524652</span>,<span class="number">458265677</span>,<span class="number">263072905</span>,<span class="number">483295235</span>,<span class="number">828509797</span>,<span class="number">341524652</span>,<span class="number">425392137</span>,<span class="number">475206804</span>,<span class="number">428313374</span>,<span class="number">483295235</span>,<span class="number">475206804</span>,<span class="number">459788476</span>,<span class="number">306220148</span>,]</span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> temp <span class="keyword">in</span> c:</span><br><span class="line">    temp_flag = <span class="built_in">pow</span>(temp,d,n)</span><br><span class="line">    temp_flag = long_to_bytes(temp_flag)</span><br><span class="line">    flag = flag + temp_flag</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="19、低指数攻击（e-x3D-3）"><a href="#19、低指数攻击（e-x3D-3）" class="headerlink" title="19、低指数攻击（e &#x3D; 3）"></a>19、低指数攻击（e &#x3D; 3）</h4><p>直接对k进行递增循环，从0开始，判断开方之后是否为整数，如果为整数则退出循环。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793</span></span><br><span class="line"></span><br><span class="line">e= <span class="built_in">int</span>(<span class="string">&#x27;0x3&#x27;</span>,<span class="number">16</span>)</span><br><span class="line">c= <span class="built_in">int</span>(<span class="string">&#x27;0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365&#x27;</span>,<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(n,e,c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">little_crt</span>(<span class="params">c,e,n</span>):</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        flag = gmpy2.iroot(c+k*n,<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">if</span> flag[<span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> flag[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">m = little_crt(c,e,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>

<h4 id="20、babyRSA"><a href="#20、babyRSA" class="headerlink" title="20、babyRSA"></a>20、babyRSA</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> a2b_hex,b2a_hex</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;*****************&quot;</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">262248800182277040650192055439906580479</span></span><br><span class="line">q = <span class="number">262854994239322828547925595487519915551</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65533</span></span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">c = <span class="number">27565231154623519221597938803435789010285480123476977081867877272451638645710</span></span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 27565231154623519221597938803435789010285480123476977081867877272451638645710</span></span><br></pre></td></tr></table></figure>

<h4 id="21、Playfair加密"><a href="#21、Playfair加密" class="headerlink" title="21、Playfair加密"></a>21、Playfair加密</h4><p><a href="http://www.metools.info/code/playfair_186.html">http://www.metools.info/code/playfair_186.html</a> 现在属于是想把这些奇奇怪怪的加密和解密算法都实现一下，但是好难，还是先刷题吧</p>
<p>膜大佬的加解密实现原理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#########################Playfair密码#########################</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#约定1：若明文字母数量为奇数，在明文末尾添加一个&#x27;Z&#x27;</span></span><br><span class="line"><span class="comment">#约定2：&#x27;I&#x27;作为&#x27;J&#x27;来处理</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#字母表</span></span><br><span class="line">letter_list=<span class="string">&#x27;ABCDEFGHJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#密码表</span></span><br><span class="line">T_letter=[<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;&#x27;</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment">#根据密钥建立密码表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Create_Matrix</span>(<span class="params">key</span>):</span><br><span class="line">  key=Remove_Duplicates(key)  <span class="comment">#移除密钥中的重复字母</span></span><br><span class="line">  key=key.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>) <span class="comment">#去除密钥中的空格</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> ch <span class="keyword">in</span> letter_list:  <span class="comment">#根据密钥获取新组合的字母表</span></span><br><span class="line">    <span class="keyword">if</span> ch <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">      key+=ch</span><br><span class="line">  </span><br><span class="line">  j=<span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)): <span class="comment">#将新的字母表里的字母逐个填入密码表中，组成5*5的矩阵</span></span><br><span class="line">    T_letter[j]+=key[i]     <span class="comment">#j用来定位字母表的行</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span>==(i+<span class="number">1</span>)%<span class="number">5</span>:</span><br><span class="line">      j+=<span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#移除字符串中重复的字母</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Remove_Duplicates</span>(<span class="params">key</span>):</span><br><span class="line">  key=key.upper() <span class="comment">#转成大写字母组成的字符串</span></span><br><span class="line">  _key=<span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> ch <span class="keyword">in</span> key:</span><br><span class="line">    <span class="keyword">if</span> ch==<span class="string">&#x27;I&#x27;</span>:</span><br><span class="line">      ch=<span class="string">&#x27;J&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> ch <span class="keyword">in</span> _key:</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      _key+=ch</span><br><span class="line">  <span class="keyword">return</span> _key</span><br><span class="line"> </span><br><span class="line"><span class="comment">#获取字符在密码表中的位置</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Get_MatrixIndex</span>(<span class="params">ch</span>):</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(T_letter)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(T_letter)):</span><br><span class="line">      <span class="keyword">if</span> ch==T_letter[i][j]:</span><br><span class="line">        <span class="keyword">return</span> i,j <span class="comment">#i为行，j为列</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#加密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Encrypt</span>(<span class="params">plaintext,T_letter</span>):</span><br><span class="line">  ciphertext=<span class="string">&#x27;&#x27;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(plaintext) % <span class="number">2</span> !=<span class="number">0</span>:  <span class="comment">#如果新的明文长度为奇数，在其末尾添上&#x27;Z&#x27;</span></span><br><span class="line">    plaintext+=<span class="string">&#x27;Z&#x27;</span></span><br><span class="line">  </span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(plaintext): <span class="comment">#对明文进行遍历</span></span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span>==plaintext[i].isalpha():  <span class="comment">#如果是明文是字母的话，</span></span><br><span class="line">      j=i+<span class="number">1</span>                           <span class="comment">#则开始对该字母之后的明文进行遍历，</span></span><br><span class="line">      <span class="keyword">while</span> j&lt;<span class="built_in">len</span>(plaintext):         <span class="comment">#直到遍历到字母，进行加密</span></span><br><span class="line">        <span class="keyword">if</span> <span class="literal">True</span>==plaintext[j].isalpha():</span><br><span class="line">          <span class="keyword">if</span> <span class="string">&#x27;I&#x27;</span>==plaintext[i].upper():             <span class="comment">#</span></span><br><span class="line">            x=Get_MatrixIndex(<span class="string">&#x27;J&#x27;</span>)                  <span class="comment">#</span></span><br><span class="line">          <span class="keyword">else</span>:                                     <span class="comment">#</span></span><br><span class="line">            x=Get_MatrixIndex(plaintext[i].upper()) <span class="comment">#对字符在密码表中的坐标</span></span><br><span class="line">          <span class="keyword">if</span> <span class="string">&#x27;I&#x27;</span>==plaintext[j].upper():             <span class="comment">#进行定位,同时将&#x27;I&#x27;作为</span></span><br><span class="line">              y=Get_MatrixIndex(<span class="string">&#x27;J&#x27;</span>)                <span class="comment">#&#x27;J&#x27;来处理</span></span><br><span class="line">          <span class="keyword">else</span>:                                     <span class="comment">#</span></span><br><span class="line">            y=Get_MatrixIndex(plaintext[j].upper()) <span class="comment">#</span></span><br><span class="line">          </span><br><span class="line">          <span class="keyword">if</span> x[<span class="number">0</span>]==y[<span class="number">0</span>]:    <span class="comment">#如果在同一行</span></span><br><span class="line">            ciphertext+=T_letter[x[<span class="number">0</span>]][(x[<span class="number">1</span>]+<span class="number">1</span>)%<span class="number">5</span>]+T_letter[y[<span class="number">0</span>]][(y[<span class="number">1</span>]+<span class="number">1</span>)%<span class="number">5</span>]</span><br><span class="line">          <span class="keyword">elif</span> x[<span class="number">1</span>]==y[<span class="number">1</span>]:  <span class="comment">#如果在同一列</span></span><br><span class="line">            ciphertext+=T_letter[(x[<span class="number">1</span>]+<span class="number">1</span>)%<span class="number">5</span>][x[<span class="number">0</span>]]+T_letter[(y[<span class="number">1</span>]+<span class="number">1</span>)%<span class="number">5</span>][y[<span class="number">0</span>]]</span><br><span class="line">          <span class="keyword">else</span>:             <span class="comment">#如果不同行不同列</span></span><br><span class="line">            ciphertext+=T_letter[x[<span class="number">0</span>]][y[<span class="number">1</span>]]+T_letter[y[<span class="number">0</span>]][x[<span class="number">1</span>]]</span><br><span class="line">          <span class="keyword">break</span>;  <span class="comment">#每组明文对加密完成后，结束本次对明文的遍历</span></span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line">      i=j+<span class="number">1</span>  <span class="comment">#每次对明文的遍历是从加密过后的明文的后一个明文开始的,结束本次循环</span></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      ciphertext+=plaintext[i]  <span class="comment">#如果明文不是字母，直接加到密文上</span></span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> ciphertext</span><br><span class="line"> </span><br><span class="line"><span class="comment">#解密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Decrypt</span>(<span class="params">ciphertext,T_letter</span>):</span><br><span class="line">  plaintext=<span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(ciphertext) % <span class="number">2</span> !=<span class="number">0</span>:  <span class="comment">#如果新的密文长度为奇数，在其末尾添上&#x27;Z&#x27;</span></span><br><span class="line">    ciphertext+=<span class="string">&#x27;Z&#x27;</span></span><br><span class="line">  </span><br><span class="line">  i=<span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(ciphertext): <span class="comment">#对密文进行遍历</span></span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span>==ciphertext[i].isalpha():  <span class="comment">#如果是密文是字母的话，</span></span><br><span class="line">      j=i+<span class="number">1</span>                            <span class="comment">#则开始对该字母之后的密文进行遍历，</span></span><br><span class="line">      <span class="keyword">while</span> j&lt;<span class="built_in">len</span>(ciphertext):         <span class="comment">#直到遍历到字母，进行解密</span></span><br><span class="line">        <span class="keyword">if</span> <span class="literal">True</span>==ciphertext[j].isalpha():</span><br><span class="line">          <span class="keyword">if</span> <span class="string">&#x27;I&#x27;</span>==ciphertext[i].upper():              <span class="comment">#</span></span><br><span class="line">            x=Get_MatrixIndex(<span class="string">&#x27;J&#x27;</span>)                    <span class="comment">#</span></span><br><span class="line">          <span class="keyword">else</span>:                                       <span class="comment">#</span></span><br><span class="line">            x=Get_MatrixIndex(ciphertext[i].upper())  <span class="comment">#对字符在密码表中的坐标</span></span><br><span class="line">          <span class="keyword">if</span> <span class="string">&#x27;I&#x27;</span>==ciphertext[j].upper():              <span class="comment">#进行定位,同时将&#x27;I&#x27;作为</span></span><br><span class="line">              y=Get_MatrixIndex(<span class="string">&#x27;J&#x27;</span>)                  <span class="comment">#&#x27;J&#x27;来处理</span></span><br><span class="line">          <span class="keyword">else</span>:                                       <span class="comment">#</span></span><br><span class="line">            y=Get_MatrixIndex(ciphertext[j].upper())  <span class="comment">#</span></span><br><span class="line">          </span><br><span class="line">          <span class="keyword">if</span> x[<span class="number">0</span>]==y[<span class="number">0</span>]:    <span class="comment">#如果在同一行</span></span><br><span class="line">            plaintext+=T_letter[x[<span class="number">0</span>]][(x[<span class="number">1</span>]-<span class="number">1</span>)%<span class="number">5</span>]+T_letter[y[<span class="number">0</span>]][(y[<span class="number">1</span>]-<span class="number">1</span>)%<span class="number">5</span>]</span><br><span class="line">          <span class="keyword">elif</span> x[<span class="number">1</span>]==y[<span class="number">1</span>]:  <span class="comment">#如果在同一列</span></span><br><span class="line">            plaintext+=T_letter[(x[<span class="number">1</span>]-<span class="number">1</span>)%<span class="number">5</span>][x[<span class="number">0</span>]]+T_letter[(y[<span class="number">1</span>]-<span class="number">1</span>)%<span class="number">5</span>][y[<span class="number">0</span>]]</span><br><span class="line">          <span class="keyword">else</span>:             <span class="comment">#如果不同行不同列</span></span><br><span class="line">            plaintext+=T_letter[x[<span class="number">0</span>]][y[<span class="number">1</span>]]+T_letter[y[<span class="number">0</span>]][x[<span class="number">1</span>]]</span><br><span class="line">          <span class="keyword">break</span>;  <span class="comment">#每组密文对解密完成后，结束本次对密文的遍历</span></span><br><span class="line">        j+=<span class="number">1</span></span><br><span class="line">      i=j+<span class="number">1</span>  <span class="comment">#每次对密文的遍历是从解密过后的密文的后一个密文开始的,结束本次循环</span></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      plaintext+=ciphertext[i]  <span class="comment">#如果密文不是字母，直接加到明文上</span></span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> plaintext</span><br><span class="line"> </span><br><span class="line"><span class="comment">#主函数</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;加密请按D,解密请按E:&quot;</span>)</span><br><span class="line">  user_input=<span class="built_in">input</span>();</span><br><span class="line">  <span class="keyword">while</span>(user_input!=<span class="string">&#x27;D&#x27;</span> <span class="keyword">and</span> user_input!=<span class="string">&#x27;E&#x27;</span>):<span class="comment">#输入合法性检测</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;输入有误!请重新输入:&quot;</span>)</span><br><span class="line">    user_input=<span class="built_in">input</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;请输入密钥，密钥由英文字母组成:&#x27;</span>)</span><br><span class="line">  key=<span class="built_in">input</span>()</span><br><span class="line">  </span><br><span class="line">  Create_Matrix(key)  <span class="comment">#建立密码表</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> user_input==<span class="string">&#x27;D&#x27;</span>: <span class="comment">#加密</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请输入明文:&#x27;</span>)</span><br><span class="line">    plaintext=<span class="built_in">input</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;密文为:\n%s&quot;</span> % Encrypt(plaintext,T_letter))</span><br><span class="line">  <span class="keyword">else</span>:               <span class="comment">#解密</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请输入密文:&#x27;</span>)</span><br><span class="line">    ciphertext=<span class="built_in">input</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;明文为:\n%s&#x27;</span> % Decrypt(ciphertext,T_letter))</span><br></pre></td></tr></table></figure>

<h4 id="22、"><a href="#22、" class="headerlink" title="22、"></a>22、</h4><p>先base64再进行rot一个一个试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">&#x27;v)*L*_F0&lt;&#125;@H0&gt;F49023@FE0#@EN&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rot_n</span>(<span class="params">c</span>):</span><br><span class="line">    </span><br><span class="line">    i = <span class="number">47</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; <span class="number">50</span>):</span><br><span class="line">        ans = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">            <span class="built_in">ascii</span> = <span class="number">0</span></span><br><span class="line">            <span class="built_in">ascii</span> = <span class="built_in">int</span>(<span class="built_in">ord</span>(c[k] )-i)</span><br><span class="line">            ans = ans + <span class="built_in">chr</span>(<span class="built_in">ascii</span>)</span><br><span class="line">        i = i+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> ans[:<span class="number">3</span>] == <span class="string">&#x27;GXY&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(ans)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">flag = rot_n(c)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<h4 id="23、"><a href="#23、" class="headerlink" title="23、"></a>23、</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c = [<span class="number">111</span>,<span class="number">114</span>,<span class="number">157</span>,<span class="number">166</span>,<span class="number">145</span>,<span class="number">123</span>,<span class="number">145</span>,<span class="number">143</span>,<span class="number">165</span>,<span class="number">162</span>,<span class="number">151</span>,<span class="number">164</span>,<span class="number">171</span>,<span class="number">126</span>,<span class="number">145</span>,<span class="number">162</span>,<span class="number">171</span>,<span class="number">115</span>,<span class="number">165</span>,<span class="number">143</span>,<span class="number">150</span>]</span><br><span class="line">ans = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> temp <span class="keyword">in</span> c:</span><br><span class="line">    ans = ans + <span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(temp),<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure>

<h4 id="24、Wiener’s-Attack"><a href="#24、Wiener’s-Attack" class="headerlink" title="24、Wiener’s Attack"></a>24、Wiener’s Attack</h4><p>知乎：<a href="https://zhuanlan.zhihu.com/p/400818185">https://zhuanlan.zhihu.com/p/400818185</a></p>
<h2 id="Day5"><a href="#Day5" class="headerlink" title="Day5"></a>Day5</h2><h4 id="25、这是base？"><a href="#25、这是base？" class="headerlink" title="25、这是base？"></a>25、这是base？</h4><p>bin():返回一个int或者long int的二进制表示</p>
<p>python中的re.findall函数：<a href="https://blog.csdn.net/qq_36556893/article/details/89182067">https://blog.csdn.net/qq_36556893/article/details/89182067</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">此题则是根据base64编码的规则将密文还原为明文</span></span><br><span class="line"><span class="string">自己慢慢写代码吧</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s1 = &#123;<span class="number">0</span>: <span class="string">&#x27;J&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;K&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;L&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;M&#x27;</span>, <span class="number">4</span>: <span class="string">&#x27;N&#x27;</span>, <span class="number">5</span>: <span class="string">&#x27;O&#x27;</span>, <span class="number">6</span>: <span class="string">&#x27;x&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;y&#x27;</span>, <span class="number">8</span>: <span class="string">&#x27;U&#x27;</span>, <span class="number">9</span>: <span class="string">&#x27;V&#x27;</span>, <span class="number">10</span>: <span class="string">&#x27;z&#x27;</span>, <span class="number">11</span>: <span class="string">&#x27;A&#x27;</span>, <span class="number">12</span>: <span class="string">&#x27;B&#x27;</span>, <span class="number">13</span>: <span class="string">&#x27;C&#x27;</span>, <span class="number">14</span>: <span class="string">&#x27;D&#x27;</span>, <span class="number">15</span>: <span class="string">&#x27;E&#x27;</span>, <span class="number">16</span>: <span class="string">&#x27;F&#x27;</span>, <span class="number">17</span>: <span class="string">&#x27;G&#x27;</span>, <span class="number">18</span>: <span class="string">&#x27;H&#x27;</span>, <span class="number">19</span>: <span class="string">&#x27;7&#x27;</span>, <span class="number">20</span>: <span class="string">&#x27;8&#x27;</span>, <span class="number">21</span>: <span class="string">&#x27;9&#x27;</span>, <span class="number">22</span>: <span class="string">&#x27;P&#x27;</span>, <span class="number">23</span>: <span class="string">&#x27;Q&#x27;</span>, <span class="number">24</span>: <span class="string">&#x27;I&#x27;</span>, <span class="number">25</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">26</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">27</span>: <span class="string">&#x27;c&#x27;</span>, <span class="number">28</span>: <span class="string">&#x27;d&#x27;</span>, <span class="number">29</span>: <span class="string">&#x27;e&#x27;</span>, <span class="number">30</span>: <span class="string">&#x27;f&#x27;</span>, <span class="number">31</span>: <span class="string">&#x27;g&#x27;</span>, <span class="number">32</span>: <span class="string">&#x27;h&#x27;</span>, <span class="number">33</span>: <span class="string">&#x27;i&#x27;</span>, <span class="number">34</span>: <span class="string">&#x27;j&#x27;</span>, <span class="number">35</span>: <span class="string">&#x27;k&#x27;</span>, <span class="number">36</span>: <span class="string">&#x27;l&#x27;</span>, <span class="number">37</span>: <span class="string">&#x27;m&#x27;</span>, <span class="number">38</span>: <span class="string">&#x27;W&#x27;</span>, <span class="number">39</span>: <span class="string">&#x27;X&#x27;</span>, <span class="number">40</span>: <span class="string">&#x27;Y&#x27;</span>, <span class="number">41</span>: <span class="string">&#x27;Z&#x27;</span>, <span class="number">42</span>: <span class="string">&#x27;0&#x27;</span>, <span class="number">43</span>: <span class="string">&#x27;1&#x27;</span>, <span class="number">44</span>: <span class="string">&#x27;2&#x27;</span>, <span class="number">45</span>: <span class="string">&#x27;3&#x27;</span>, <span class="number">46</span>: <span class="string">&#x27;4&#x27;</span>, <span class="number">47</span>: <span class="string">&#x27;5&#x27;</span>, <span class="number">48</span>: <span class="string">&#x27;6&#x27;</span>, <span class="number">49</span>: <span class="string">&#x27;R&#x27;</span>, <span class="number">50</span>: <span class="string">&#x27;S&#x27;</span>, <span class="number">51</span>: <span class="string">&#x27;T&#x27;</span>, <span class="number">52</span>: <span class="string">&#x27;n&#x27;</span>, <span class="number">53</span>: <span class="string">&#x27;o&#x27;</span>, <span class="number">54</span>: <span class="string">&#x27;p&#x27;</span>, <span class="number">55</span>: <span class="string">&#x27;q&#x27;</span>, <span class="number">56</span>: <span class="string">&#x27;r&#x27;</span>, <span class="number">57</span>: <span class="string">&#x27;s&#x27;</span>, <span class="number">58</span>: <span class="string">&#x27;t&#x27;</span>, <span class="number">59</span>: <span class="string">&#x27;u&#x27;</span>, <span class="number">60</span>: <span class="string">&#x27;v&#x27;</span>, <span class="number">61</span>: <span class="string">&#x27;w&#x27;</span>, <span class="number">62</span>: <span class="string">&#x27;+&#x27;</span>, <span class="number">63</span>: <span class="string">&#x27;/&#x27;</span>, <span class="number">64</span>: <span class="string">&#x27;=&#x27;</span>&#125;</span><br><span class="line">key_list= []</span><br><span class="line">value_list = []</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> s1.items():</span><br><span class="line">    key_list.append(key)</span><br><span class="line">    value_list.append(value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">value_to_key</span>(<span class="params">a</span>):</span><br><span class="line">    get_value = a</span><br><span class="line">    <span class="keyword">if</span> get_value <span class="keyword">in</span> value_list:</span><br><span class="line">        get_value_index = value_list.index(get_value)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;base64编码转化中没有这个字符&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span>(get_value_index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s2 =  <span class="string">&#x27;FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw&#x27;</span></span><br><span class="line">    ans = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s2:</span><br><span class="line">        ans.append(value_to_key(i))</span><br><span class="line">    <span class="built_in">print</span>(ans)</span><br><span class="line"></span><br><span class="line">ans = [<span class="number">16</span>, <span class="number">36</span>, <span class="number">41</span>, <span class="number">4</span>, <span class="number">30</span>, <span class="number">52</span>, <span class="number">16</span>, <span class="number">48</span>, <span class="number">23</span>, <span class="number">53</span>, <span class="number">36</span>, <span class="number">48</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">43</span>, <span class="number">19</span>, <span class="number">38</span>, <span class="number">61</span>, <span class="number">23</span>, <span class="number">23</span>, <span class="number">53</span>, <span class="number">17</span>, <span class="number">40</span>, <span class="number">12</span>, <span class="number">23</span>, <span class="number">13</span>, <span class="number">31</span>, <span class="number">24</span>, <span class="number">35</span>, <span class="number">17</span>, <span class="number">51</span>, <span class="number">25</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">45</span>, <span class="number">24</span>, <span class="number">23</span>, <span class="number">1</span>, <span class="number">61</span>]</span><br><span class="line">bin_s = []</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">将每个数字转换为二进制，并只取出后六位</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line">    bin_s.append(<span class="built_in">bin</span>(i)[<span class="number">2</span>:])</span><br><span class="line">temp_bin = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> bin_s:</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(i) &lt; <span class="number">6</span>):</span><br><span class="line">        i = (<span class="number">6</span>-<span class="built_in">len</span>(i))*<span class="string">&#x27;0&#x27;</span> + i</span><br><span class="line">    temp_bin.append(i)</span><br><span class="line">temp_s = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(temp_bin)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> temp_bin:</span><br><span class="line">    temp_s = temp_s + i</span><br><span class="line"><span class="built_in">print</span>(temp_s)</span><br><span class="line">temp_s2 = re.findall(<span class="string">r&#x27;.&#123;8&#125;&#x27;</span>,temp_s)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(temp_s2)</span><br><span class="line">temp_s3 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> temp_s2:</span><br><span class="line">    temp_s3.append(<span class="built_in">int</span>(i,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> temp_s3:</span><br><span class="line">    flag = flag + <span class="built_in">chr</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="26、RSA5"><a href="#26、RSA5" class="headerlink" title="26、RSA5"></a>26、RSA5</h4><h5 id="低加密指数广播攻击："><a href="#低加密指数广播攻击：" class="headerlink" title="低加密指数广播攻击："></a>低加密指数广播攻击：</h5><p>特点：e非常小（65537），一份明文m使用不同的模数n，使用相同的e进行多次加密，</p>
<p>此时使用的n都会非常大，一般不能够分解出来，但是因为n只能分解为p*q，在取的模数n足够多的时候，就会难免出现gcd（n1，n2）不等于1的情况，而因为n只有两个因数，所以这个公因数只能为p或者q，根据p，q求出d即可求出明文。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n1 = <span class="number">20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207</span></span><br><span class="line">c1 = <span class="number">974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320</span></span><br><span class="line"></span><br><span class="line">n2 = <span class="number">20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759</span></span><br><span class="line">c2 = <span class="number">15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855</span></span><br><span class="line"></span><br><span class="line">n3 = <span class="number">25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491</span></span><br><span class="line">c3 = <span class="number">4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862</span></span><br><span class="line"></span><br><span class="line">n4 = <span class="number">21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751</span></span><br><span class="line">c4 = <span class="number">4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613</span></span><br><span class="line"></span><br><span class="line">n5 = <span class="number">22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067</span></span><br><span class="line">c5 = <span class="number">15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357</span></span><br><span class="line"></span><br><span class="line">n6 = <span class="number">21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369</span></span><br><span class="line">c6 = <span class="number">20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932</span></span><br><span class="line"></span><br><span class="line">n7 = <span class="number">25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137</span></span><br><span class="line">c7 = <span class="number">19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179</span></span><br><span class="line"></span><br><span class="line">n8 = <span class="number">22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191</span></span><br><span class="line">c8 = <span class="number">6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006</span></span><br><span class="line"></span><br><span class="line">n9 = <span class="number">23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941</span></span><br><span class="line">c9 = <span class="number">5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934</span></span><br><span class="line"></span><br><span class="line">n10 = <span class="number">28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491</span></span><br><span class="line">c10 = <span class="number">9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869</span></span><br><span class="line"></span><br><span class="line">n11 = <span class="number">22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019</span></span><br><span class="line">c11 = <span class="number">1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467</span></span><br><span class="line"></span><br><span class="line">n12 = <span class="number">27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299</span></span><br><span class="line">c12 = <span class="number">21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971</span></span><br><span class="line"></span><br><span class="line">n13 = <span class="number">20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551</span></span><br><span class="line">c13 = <span class="number">14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175</span></span><br><span class="line"></span><br><span class="line">n14 = <span class="number">27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987</span></span><br><span class="line">c14 = <span class="number">3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457</span></span><br><span class="line"></span><br><span class="line">n15 = <span class="number">27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837</span></span><br><span class="line">c15 = <span class="number">14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842</span></span><br><span class="line"></span><br><span class="line">n16 = <span class="number">25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451</span></span><br><span class="line">c16 = <span class="number">17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724</span></span><br><span class="line"></span><br><span class="line">n17 = <span class="number">23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499</span></span><br><span class="line">c17 = <span class="number">10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024</span></span><br><span class="line"></span><br><span class="line">n18 = <span class="number">19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973</span></span><br><span class="line">c18 = <span class="number">3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887</span></span><br><span class="line"></span><br><span class="line">n19 = <span class="number">19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603</span></span><br><span class="line">c19 = <span class="number">6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889</span></span><br><span class="line"></span><br><span class="line">n20 = <span class="number">26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659</span></span><br><span class="line">c20 = <span class="number">386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346</span></span><br><span class="line"></span><br><span class="line">temp1 = [n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20]</span><br><span class="line">temp2 = [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">if</span> y &gt; x:</span><br><span class="line">        x,y = y,x</span><br><span class="line">    <span class="keyword">while</span>(x%y != <span class="number">0</span>):</span><br><span class="line">        a = x%y</span><br><span class="line">        x = y</span><br><span class="line">        y = a</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">p = <span class="number">0</span></span><br><span class="line">N = <span class="number">0</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">        <span class="keyword">if</span>(gcd(temp1[i],temp1[j]) != <span class="number">1</span>):</span><br><span class="line">            <span class="built_in">print</span>(i,j)</span><br><span class="line">            <span class="built_in">print</span>(gcd(temp1[i],temp1[j]))</span><br><span class="line">            N = temp1[i]</span><br><span class="line">            c = temp2[i]</span><br><span class="line">            p = gcd(temp1[i],temp1[j])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">q = N//p</span><br><span class="line">phi_n = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi_n)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,N)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>适用于e和phi_n不互素的情况大佬的具体文章：<a href="http://www.hackdig.com/03/hack-629174.htm">http://www.hackdig.com/03/hack-629174.htm</a></p>
<p>四方密码：<a href="https://www.freebuf.com/articles/network/253700.html">https://www.freebuf.com/articles/network/253700.html</a></p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>python_learn</title>
    <url>/2022/10/04/python-learn/</url>
    <content><![CDATA[<p>​	字符串前加b表示这是一个bytes对象</p>
<p>字符串前加f表示这是一个</p>
<p>大佬博客 <a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html">RSA算法原理（一） - 阮一峰的网络日志 (ruanyifeng.com)</a></p>
<span id="more"></span>

<p>如果n可以被因数分解，d就可以算出，也就意味着私匙被解密。</p>
<p>0x -16进制 </p>
<p>strxor函数对两个等长字符串取异或</p>
<p>getprime(n) 取一个n位素数</p>
<p>powmod（m，e，n） &#x3D; m^e%n;</p>
<p>gcd 取最大公因数</p>
<p>ord 返回一个字符的ascii值</p>
<p>map() 函数会根据提供的函数对指定序列做映射。</p>
<p>append函数：将参数添加在字符串的后面</p>
<p>第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。</p>
<p>乘发逆元：<a href="https://oi-wiki.org/math/number-theory/inverse/">https://oi-wiki.org/math/number-theory/inverse/</a></p>
<p>sage使用：</p>
<p>欧拉函数:euler_phi</p>
<p>对于rsa算法来说，如果取的两个质数相距很接近，则可以直接对这个大数进行开根号处理</p>
<p>第二题: 大佬博客·：<a href="https://www.cnblogs.com/nul1/p/13489269.html">CTF中的RSA套路 - _nul1 - 博客园 (cnblogs.com)</a></p>
<p>Python ljust() 方法返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串</p>
<p>assert（）相当于一个判断程序是否正确的断言，其实就相当于一个if语句。</p>
<p>​		1、对于两个相近的随机素数，可以直接进行开根号处理，然后进行判断，算法为费马分解</p>
<p><a href="https://www.freebuf.com/articles/database/290623.html">浅析RSA因子大小相近时分解因子攻击方法 - FreeBuf网络安全行业门户</a></p>
<p>​		2、对于n很大而e很小，可以采用低指数加密来对n进行分解  参考博客：<a href="https://blog.csdn.net/fengerxi33/article/details/123353560">(74条消息) CTF_RSA_低加密指数攻击脚本_风二西的博客-CSDN博客_ctf rsa脚本</a></p>
<p>​		3、给出dp或者dq 参考博客 <a href="https://oceansec.blog.csdn.net/article/details/121023558?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-121023558-blog-95500279.pc_relevant_multi_platform_whitelistv4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-121023558-blog-95500279.pc_relevant_multi_platform_whitelistv4&utm_relevant_index=2">(74条消息) CTF-Crypto-RSA整理_OceanSec的博客-CSDN博客_ctf ras</a></p>
<p>dp泄露:<a href="https://blog.csdn.net/weixin_45369385/article/details/109208109">(75条消息) RSA-详解dp泄漏_来梦桃子的博客-CSDN博客_rsa dp</a></p>
<p>​		4、</p>
<p>​		1️⃣e和欧拉函数不互素的情况 AMM算法进行开e次根 <a href="https://www.anquanke.com/post/id/262634">RSA中e和phi不互素时的AMM开根-安全客 - 安全资讯平台 (anquanke.com)</a></p>
<p>​		2️⃣<a href="https://zhuanlan.zhihu.com/p/446499019">RSA中e和phi不互素时的AMM开根 - 知乎 (zhihu.com)</a></p>
<p>​		3️⃣<a href="https://dgz-cyber.github.io/2020/03/03/RSA%E2%80%94%E2%80%94%E5%BD%93e%E4%B8%8E%CF%86(n)%E4%B8%8D%E4%BA%92%E7%B4%A0%E6%97%B6/">RSA——当e与φ(n)不互素时 · DGZ’s Blog (dgz-cyber.github.io)</a></p>
<p>进入python第三方库文档命令 </p>
<p>相关题型：<a href="https://www.freebuf.com/articles/web/287854.html">『CTF』史上最全 RSA 题目总结 - FreeBuf网络安全行业门户</a></p>
<p>sage使用命令:</p>
<p><a href="https://chu-kangming.gitee.io/crypto/Use-of-Sagemath-in-CTF-Cryptography.html">sagemath在ctf密码学中的使用 - GAEA (gitee.io)</a></p>
<p><a href="https://tl2cents.github.io/2022/03/27/SageMath%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/">SageMath简明教程 | tl2cents blog</a></p>
<h4 id="RSA常用工具博客：-原创-Crypto中RSA常用工具及python库说明-密码应用-看雪论坛-安全社区-安全招聘-bbs-pediy-com"><a href="#RSA常用工具博客：-原创-Crypto中RSA常用工具及python库说明-密码应用-看雪论坛-安全社区-安全招聘-bbs-pediy-com" class="headerlink" title="RSA常用工具博客：[原创]Crypto中RSA常用工具及python库说明-密码应用-看雪论坛-安全社区|安全招聘|bbs.pediy.com"></a>RSA常用工具博客：[<a href="https://bbs.pediy.com/thread-266504.htm">原创]Crypto中RSA常用工具及python库说明-密码应用-看雪论坛-安全社区|安全招聘|bbs.pediy.com</a></h4><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>线性同余生成器：</p>
<p>zip函数：可以理解为压缩函数，以可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，返回由这些元组组成的对象以达成节约内存的作用。</p>
<p>%02x：x表示以16进制输出，02表示不足两位，前面补0输出</p>
]]></content>
      <categories>
        <category>一些工具的学习</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/07/test/</url>
    <content><![CDATA[<p>两种优化方案都是在分支为4的时候最快，其中虚实块树优化可以最快加速13.001％，满n叉树方案能够最快加速7.393%。</p>
<p><strong>但是两个方案均存在以下问题</strong>：</p>
<p>在rtree的分支个数为8或者更大的时候，速率急剧降低，这是树的查询节点时间增加所导致</p>
<p>其中满n叉树方案存在两种实现方式：</p>
<h5 id="第一种方式：从根节点开始向下编码"><a href="#第一种方式：从根节点开始向下编码" class="headerlink" title="第一种方式：从根节点开始向下编码"></a>第一种方式：从根节点开始向下编码</h5><p>这种编码方式，在编码时计算简便，但是在查询的时间复杂度为o(n)；</p>
<p>公式如下：</p>
<img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20231007011205178.png" alt="image-20231007011205178" style="zoom: 50%;" />

<h5 id="第二种方式：从第一个叶子节点开始向上编码"><a href="#第二种方式：从第一个叶子节点开始向上编码" class="headerlink" title="第二种方式：从第一个叶子节点开始向上编码"></a>第二种方式：从第一个叶子节点开始向上编码</h5><p>这种编码方式计算复杂，但是查询时间复杂度为o(1);</p>
<p>但是这种查询时间复杂度为o(1)的情况，仅在只对数据库进行一次的数据填充而不进行数据的增加和删改操作时才能实现。</p>
<p><img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20231007011037781.png" alt="image-20231007011037781"></p>
]]></content>
  </entry>
  <entry>
    <title>Latex_1</title>
    <url>/2022/12/21/latex1/</url>
    <content><![CDATA[<p>%保存为UTF-8编码格式<br>%用xelatex编译</p>
<p>\documentclass[UTF8,a4paper,12pt]{ctexart}<br>\usepackage[left&#x3D;3.18cm, right&#x3D;3.18cm, top&#x3D;2.54cm, bottom&#x3D;2.54cm]{geometry} %页边距<br>\CTEXsetup[format&#x3D;{\Large\bfseries}]{section} %设置章标题字号为Large，居左<br>%\CTEXsetup[number&#x3D;{\chinese{section}}]{section}<br>%\CTEXsetup[name&#x3D;{（,）}]{subsection}<br>%\CTEXsetup[number&#x3D;{\chinese{subsection}}]{subsection}<br>%\CTEXsetup[name&#x3D;{（,）}]{subsubsection}<br>%\CTEXsetup[number&#x3D;\arabic{subsubsection}]{subsubsection}  %以上四行为各级标题样式设置，可根据需要做修改</p>
<p>\linespread{1.25} %设置全文行间距</p>
<p>%\usepackage[english]{babel}<br>%\usepackage{float}     %放弃美学排版图表<br>\usepackage{fontspec}   %修改字体<br>\usepackage{amsmath, amsfonts, amssymb} % 数学公式相关宏包<br>\usepackage{color}      % color content<br>\usepackage{graphicx}   % 导入图片<br>\usepackage{subfigure}  % 并排子图<br>\usepackage{url}        % 超链接<br>\usepackage{bm}         % 加粗部分公式，比如\bm{aaa}aaa<br>\usepackage{multirow}<br>\usepackage{booktabs}<br>\usepackage{epstopdf}<br>\usepackage{epsfig}<br>\usepackage{longtable}  %长表格<br>\usepackage{supertabular}%跨页表格<br>\usepackage{algorithm}<br>\usepackage{algorithmic}<br>\usepackage{changepage}<br>\usepackage{booktabs}<br>\usepackage{appendix}</p>
<p>%%%%%%%%%%%%%%%%%%%%%%%<br>% – text font –<br>% compile using Xelatex<br>%%%%%%%%%%%%%%%%%%%%%%%<br>% – 中文字体 –<br>%\setCJKmainfont{Microsoft YaHei}  % 微软雅黑<br>%\setCJKmainfont{YouYuan}  % 幼圆<br>%\setCJKmainfont{NSimSun}  % 新宋体<br>%\setCJKmainfont{KaiTi}    % 楷体<br>\setCJKmainfont[AutoFakeBold&#x3D;true]{SimSun}   % 宋体<br>%\setCJKmainfont{SimHei}   % 黑体</p>
<p>% – 英文字体 –<br>\setmainfont{Times New Roman}<br>%\setmainfont{DejaVu Sans}<br>%\setmainfont{Latin Modern Mono}<br>%\setmainfont{Consolas}<br>%<br>%<br>\renewcommand{\algorithmicrequire}{ \textbf{Input:}}     % use Input in the format of Algorithm<br>\renewcommand{\algorithmicensure}{ \textbf{Initialize:}} % use Initialize in the format of Algorithm<br>\renewcommand{\algorithmicreturn}{ \textbf{Output:}}     % use Output in the format of Algorithm<br>\renewcommand{\abstractname}{\textbf{\large {摘\quad 要}}} %更改摘要二字的样式<br>\newcommand{\xiaosi}{\fontsize{12pt}{\baselineskip}}     %\xiaosi代替设置12pt字号命令,不加\selectfont,行间距设置无效<br>\newcommand{\wuhao}{\fontsize{10.5pt}{10.5pt}\selectfont}</p>
<p>\usepackage{fancyhdr} %设置全文页眉、页脚的格式<br>\pagestyle{fancy}<br>\lhead{}           %页眉左边设为空<br>\chead{}           %页眉中间<br>\rhead{}           %页眉右边<br>%\rhead{\includegraphics[width&#x3D;1.2cm]{1.eps}}  %页眉右侧放置logo<br>\lfoot{}          %页脚左边<br>\cfoot{\thepage}  %页脚中间<br>\rfoot{}          %页脚右边</p>
<p>%%%%%%%%%%%%%%%%%%%%%%%<br>%  设置水印<br>%%%%%%%%%%%%%%%%%%%%%%%<br>%\usepackage{draftwatermark}         % 所有页加水印<br>%\usepackage[firstpage]{draftwatermark} % 只有第一页加水印<br>% \SetWatermarkText{Water-Mark}           % 设置水印内容<br>% \SetWatermarkText{\includegraphics{fig&#x2F;ZJDX-WaterMark.eps}}         % 设置水印logo<br>% \SetWatermarkLightness{0.9}             % 设置水印透明度 0-1<br>% \SetWatermarkScale{1}                   % 设置水印大小 0-1</p>
<p>\usepackage{hyperref} %bookmarks<br>\hypersetup{colorlinks&#x3D;true, linkcolor&#x3D;black,filecolor&#x3D;black,urlcolor&#x3D;black,citecolor&#x3D;black,bookmarks, unicode} %unicode</p>
<p>\title{\textbf{\Large{正大所以润矿泉水线上营销策略分析}}}</p>
<p>\begin{document}</p>
<pre><code>\maketitle
%\tableofcontents

\begin&#123;abstract&#125;
    随着我国居民生活水平的提高，人们对矿泉水的需求不断增长。在今后的一段时期中，我国矿泉水产业发展主要体现在：
    
    一是随着消费升级和人们健康意识的提高，未来天然矿泉水将成为第一大饮用水品种，成为饮用水市场的主导力量 ; 二是随着国内市场竞争日趋激烈，矿泉水产业集中度和生产集约化将进一步提高。我国现有矿泉水市场格局基本是以农夫山泉、怡宝、康师傅、娃哈哈等为一 线中低端，昆仑山、5100、恒大冰泉、阿尔山等主中高端，依云、巴黎水等国际品牌为进口高端的，其他二线品牌和地方品牌占据一小部分市场份额。
    
    正大饮品(北京)有限公司成立于2021年9月。 公司依托集团百年历史根基，贯彻集团“成为全球最大食饮企业”的发展愿景，秉承“利国、利民、利企业”的经营宗旨，以包装饮用水 为业务切入点，不断开发中国优质水源地，依托正大集团遍布全球的销售网络，把物美价优的水饮产品带给中国和世界的广大消费者。 公司首批上市产品为正大集团品牌背书的“所以润”天然矿泉水。产品品牌主要针对Z时代的年轻客群，以“口感”作为品牌区隔于市场竞品的定位方向。延续这一定位方向，从当下主力年轻消费群体的消费需求及喜好出发，从命名、 包装设计呈现，到后续传播，全方位塑造出差异化、年轻化、个性化的正大全新天然矿泉水品牌。 本次调研内容以z 世代的年轻消费者为出发点，目标是要了解 z 世代对矿泉水营销推广活动的偏好、天然矿泉水在年轻受众群体中的接受程度和发展趋势。发放调查问卷，对问卷得到的数据进行分析。
    
    基于 Linear Regression 和 Pearson 相关性分析探究矿泉水购买意愿的影响因素，基于以上分析我们得出以下结论：（1） 对于水的销售取决于价格促销，这与年龄和薪水无关。（2）相关性分析和线性回归都提到了线下这个点，所以消费者更愿意到线下购买。（3）消费者对于互联网直播带货有非常大的兴趣，所以要打开互联网直播营销市场。（4） 消费者需要对品牌联动也有足够的消费意愿。（5） 相关性分析和线性回归都有赠送赠品，说明gift 能提升消费者的购买意愿。
    
    为了解决所以润矿泉水目前存在的问题，本文通过4P营销组合理论，从产品策略，价格策略，渠道策略，促销策略等方面提出了具体的营销策略，具体包括基于各类媒体的广告投放，品牌推广，开拓网络营销渠道，采用品牌联动营销打法等。
    
    本论文研究的开展既有助于提升所以润矿泉水品牌的营销水平，为所以润矿泉水扩大在年轻群体的市场份额提供策略，又可丰富国内其他类似品牌的营销实践。
    
    关键词：矿泉水 \ \ 年轻群体\ \  营销策略 \ \  相关性分析
\end&#123;abstract&#125;

\begin&#123;center&#125;
    \large&#123;\textbf&#123;Abstract&#125;&#125;
\end&#123;center&#125;

\begin&#123;adjustwidth&#125;&#123;1cm&#125;&#123;1cm&#125;
    \noindent\hspace&#123;1.5em&#125;With the improvement of the living standard of Chinese residents, people&#39;s demand for mineral water continues to grow. In the next period of time, the development of my country&#39;s mineral water industry is mainly reflected in:
    
    First, with the upgrading of consumption and the improvement of people&#39;s health awareness, natural mineral water will become the largest drinking water variety in the future and become the leading force in the drinking water market; second, with the increasingly fierce competition in the domestic market, the concentration and Production intensification will be further enhanced. my country&#39;s existing mineral water market structure is basically based on Nongfu Spring, Yibao, Master Kong, Wahaha, etc. as the first-tier mid-to-low end, Kunlun Mountain, 5100, Evergrande Bingquan, Aershan, etc. The brands are imported high-end, and other second-tier brands and local brands occupy a small market share.
    
    Zhengda Beverage (Beijing) Co., Ltd. was established in September 2021. Relying on the group&#39;s century-old foundation, the company implements the group&#39;s development vision of &quot;becoming the world&#39;s largest catering enterprise&quot;, adheres to the business purpose of &quot;benefiting the country, benefiting the people, and benefiting the enterprise&quot;, takes packaged drinking water as the business entry point, and continuously develops high-quality water sources in China Locally, relying on the global sales network of CP Group, it brings high-quality and affordable drinking water products to consumers in China and the world. The company&#39;s first listed products are &quot;So Run&quot; natural mineral water endorsed by the Chia Tai Group brand. The product brand is mainly aimed at the young customer groups in the Z era, and uses &quot;taste&quot; as the positioning direction to differentiate the brand from competing products in the market. Continuing this positioning direction, starting from the consumption needs and preferences of the current main young consumer groups, from naming, packaging design presentation, to follow-up communication, we will create a differentiated, younger and personalized Chia Tai new natural mineral water brand in an all-round way. The content of this survey is based on the young consumers of Generation Z. The goal is to understand the preferences of Generation Z for mineral water marketing and promotion activities, the acceptance and development trend of natural mineral water among young audiences. Distribute questionnaires and analyze the data obtained from the questionnaires.
    
    Based on Linear Regression and Pearson correlation analysis to explore the influencing factors of mineral water purchase intention, based on the above analysis we draw the following conclusions: (1) The sale of water depends on price promotion, which has nothing to do with age and salary. (2) Correlation analysis and linear regression both mentioned the offline point, so consumers are more willing to buy offline. (3) Consumers are very interested in online live streaming, so it is necessary to open up the Internet live streaming marketing market. (4) Consumers need to have enough willingness to spend on brand linkage. (5) Correlation analysis and linear regression both have gifts, indicating that gifts can increase consumers&#39; willingness to purchase.
    
    In order to solve the current problems of Sorun Mineral Water, this paper puts forward specific marketing strategies from the aspects of product strategy, price strategy, channel strategy and promotion strategy through the 4P marketing mix theory, including advertising placement based on various media, brand Promote, develop online marketing channels, adopt brand linkage marketing methods, etc.
    The development of the research in this paper will not only help to improve the marketing level of Sorun mineral water brand, provide strategies for Sorun mineral water to expand the market share in young people, but also enrich the marketing practice of other similar domestic brands.
    
    \textbf&#123;KeyWords&#125;：Mineral water, Young people, Marketing strategy, Correlation analysis
\end&#123;adjustwidth&#125;
$\\
\\
\\
\\
\\
\\$
%\thispagestyle&#123;empty&#125;       %本页不显示页码
%\newpage                    %分页
%%\tableofcontents\thispagestyle&#123;empty&#125;
%\newpage
%\setcounter&#123;page&#125;&#123;1&#125;        %从下面开始编页，页脚格式为导言部分设置的格式

\tableofcontents
$\\
\\
\\
\\
\\
\\
\\
\\
\\
\\
\\
\\
\\
\\
\\
\\
\\
\\
\\
\\
\\
\\
$
\section&#123;引言&#125;

\subsection&#123;调查背景及选题意义 &#125;

\subsubsection&#123;调查背景&#125;

 随着我国居民生活水平的提高，人们对矿泉水的需求也在不断增加，矿泉水呈现出替代&quot;矿物质水&quot;和&quot;纯净水&quot;的趋势，增长潜力巨大。在今后的一段时期中，我国矿泉水产业发展主要体现在：一是随着消费升级和人们健康意识的提高，未来天然矿泉水将成为第一大饮用水品种，成为饮用水市场的主导力量;二是随着国内市场竞争日趋激烈，矿泉水产业集中度和生产集约化将进一步提高。
 
随着健康意识的增强，消费者倾向于选择来源于优质天然水源、含有天然矿物元素的包装饮用水及低卡路里、低糖等的饮料。消费升级。随着收入水平及购买力的持续提升，消费者在选择产品时，对价格的敏感度降低，转而更关注产品质量、口味以及便利性等。消费者差异化需求的增加，推动了对优质产品进行更多消费。矿泉水作为健康饮食的重要组成部分，顺应&quot;天然、营养、无公害、绿色&quot; 消费趋势，是都市健康生活的首要选择，未来矿泉水产业发展具有广阔的市场前景。

而随着科技的发展以及数字化时代网络时代的到来，矿泉水的销售渠道也日益多元化，不再仅仅局限于线下的便利店，超市等途径。日益多元化的销售渠道，如电商平台，直播带货，自动贩卖机等。增加了消费者购买产品的便利性，从而增加了产品的消费频率。随着中国消费者健康意识增强及消费能力的提升，近年来矿泉水在包装饮用水类别中增长最快。矿泉水作为健康饮食的重要组成部分，顺应&quot;天然、营养、无公害、绿色&quot; 消费趋势，是都市健康生活的首要选择，未来矿泉水产业发展具有广阔的市场前景。

根据网络调查搜集的一些数据，2022年在京东平台上，饮用水的总销量6600多万件，同比增长了50 \% ；饮用水产品的销售额也将近突破30亿元，同比去年增长了46.7\%。目前，在京东平台上，饮用水相关品牌数共计450个。饮用矿泉水市场规模不断增长，饮用水产品的产销量增速较快。

随着饮用水行业的逐渐成熟，相关品牌也越来越多，因此，饮用水市场在繁荣发展的同时，竞争也会异常激烈。现阶段，饮用水市场的集中度相对较高，销量TOP10品牌的市场占比共计85.5\%。 目前，市场上的矿泉水品牌较多，包括国内外各大知名品牌，如法国依云、法国巴黎水、百岁山、怡宝、农夫山泉等。而一些新锐品牌的矿泉水，如何能扩大自己的知名度和影响力，在老牌矿泉水中突出重围，以线上营销的方式开展推广活动，在年轻人群体中开展营销扩大销量则成为本项目组的重要研究问题。

饮用水作为高消耗品，有着旺盛的市场需求。并且，随着饮用水产业的迅速发展，饮用水市场整体的产销量快速增长，消费人群也不断扩大。同时，随着饮用水行业的相对成熟，门槛偏低的现实让入局的品牌越来越多，竞争愈发激烈。因此，相关品牌需要及时捕捉到消费者需求的变化，做好新品布局、投入研发等，以在行业中更有竞争力。

\subsubsection&#123;研究目的&#125;

随着中国消费者健康意识的增强及消费能力的提升，近年来天然水及天然矿泉水在包装饮用水类别中增长最快。2014年至2019年，天然水及天然矿泉水的复合年增长率分别为24.8\%、18.4\%左右;按零售额计算，2019年市场规模分别达到372亿元、151亿元。而2019年至2024年，预计天然水及天然矿泉水的复合年增长率分别为15.4\%、14.2\%左右。从2020年开始，中国矿泉水保持在8\%～9\%的年均增速持续增长。2025年市场规模有望突破3000亿元。年轻化，时尚化的客群结构打破了矿泉水，纯净水，天然水的老叁样格局，更多的新品类如苏打水，气泡水，电解质水等瞄准了年轻消费者群体。到2021年，据尼尔森数据，包装饮用水行业市占率排名为农夫山泉(33\%)、华润怡宝(26\%)、百岁山(13\%)、 康师傅(12\%)、娃哈哈(9\%)、可口可乐(7\%)，农夫山泉和怡宝合计占一半以上的市场份额。稳坐行业龙头位置后，农夫山泉继续在包装饮用水领域继续深耕用户需求，推出针对特定人群和特定场景的包装饮用水。
为了展现我国矿泉水市场的庞大规模和巨大的发展潜力，便于正大品牌所以润矿泉水在迅速发展的矿泉水市场中抓住机遇，本项目研究目的具体如下：

\begin&#123;itemize&#125;
    \item 调查年轻消费者对矿泉水产品的看法理解，关注因素，购买意愿。
    \item 了解年轻消费者对矿泉水产品的品质需求，功能需求，外延需求，价格需求。研究消费者的购买习惯，消费者未被满足的需求。
    \item 一些新锐矿泉水品牌是如何在线上进行品牌营销活动来扩大知名度、影响力调查消费者买矿泉水的主要渠道，了解各渠道所占比例。
    \item z世代目标群体对营销推广活动的偏好，更喜爱哪种类型的营销活动。
    \item 天然矿泉水在年轻受众群体中的接受程度和发展趋势。
\end&#123;itemize&#125;

\subsubsection&#123;研究意义&#125;

通过本次调研，本项目组获得以下几点意义：

\textbf&#123;(1)&#125; 针对消费者对矿泉水产品的关注因素，了解正大所以润产品在竞争中的优势和劣势所在，为企业扩大销量提供基础；

\textbf&#123;(2)&#125; 抓住消费者的真实需求，增强产品特点，为企业提高市场表现力、开发新产品打开思路； 

\textbf&#123;(3)&#125; 根据销售渠道特性，选择不同的销售宣传方式，为企业制定合理的营销计划。

\textbf&#123;(4)&#125; 对年轻消费者客户群体再进行细分，为企业转化潜在消费者、巩固现有客户从而提升企业竞争水平提供指导。

\subsection&#123;理论基础与文献综述&#125;
\subsubsection&#123;理论基础&#125;

1．TDS 值代表水中总固体溶解量，单位是 PPM。相对来说，水越纯净，它的 TDS
数值就越低，反之就越高。一般来说 TDS40 以内，水质饮用都是安全的。影响 TDS 值测试的因素：

水温：TDS 笔不可用于测量高温水体（例如：热开水）。

水的流速：TDS 笔不能用于测量晃动较大的水体。

水质污染：TDS 笔不能用于测量污染浓度较高的水体。

2.KOL：在营销学上，为各⼚家宣传的专家或权威被称为“关键意见领袖“，通常被定义为：拥有更多、更准确的产品信息，且为相关群体所接受或信任，并对该群体的购买行为有较大影响力的人。把可以扮演不同“价值角色”的人叫做“关键人”，这些人中，其意见具有核心影响力的人即为“关键意见领袖”。“关键人”和“关键意见领袖”是销售过程中价值形成和交换的源点，他们是销售工作的着力点。KOL 作为移动互联网重点关注的人群，不同的 KOL 有着独特的人格属性和内容特质，通过对其受众画像的洞察，能够帮助品牌营销挖掘更精准的商业机会。第一是持久介入特征：KOL 对某类产品较之群体中的其他人有着更为长期和深入的介入，因此对产品更了解，有更广的信息来源、更多的知识和更丰富的经验。第二是人际沟通特征：KOL较常人更合群和健谈，他们具有极强的社交能力和人际沟通技巧，且积极参加各类活动，善于交朋结友，喜欢⾼谈阔论，是群体的舆论中心和信息发布中心，对他人有强大的感染力。第三是性格特征：KOL 观念开放，接受新事物快，关心时尚、流行趋势的变化，愿意优先使用新产品，是营销学上新产品的早期使用者。

3.艾克模型: 艾克从消费者的视角提出了品牌资产的模型。将品牌资产分为了品牌忠诚度（Brand	Loyalty）、品牌知名度（Brand Awareness）、品牌联想（Brand
Association）、感知质量（Perceived Quality）和其它品牌专有资产（other proprietary brand  assets）5 个维度。艾克认为，消费者（尤其是周期性购买的消费者）对企业品牌资产的构建起到决定性作用。

4．顾客满意度理论：顾客满意度是对顾客满意程度的衡量指标。常常通过随机调查获取样本，以顾客对特定满意度指标的打分数据为基础，运用加权平均法得出相应结果。顾客满意度管理是 20 世纪 90 年代兴起的营销管理战略，不仅要求了解外部顾客的满意度，而且要求了解内部顾客，即员工的满意度状况，从而揭
示企业在顾客价值创造和传递方面存在的问题，并以实现全面的顾客满意为目标，探究、分析和解决这些问题[3]。

5.营销基础理论

5.1,STP 理论：市场细分（MarketSegmentation）[5]的概念是美国营销学家温德尔·史密斯(Wendell Smith)在 1956 年最早提出的，此后，美国营销学家菲利浦·科特勒进一步发展和完善了温德尔·史密斯的理论并最终形成了成熟的 STP 理论——市场细分（Segmentation）、选择适当的市场目标（Targeting）和定位（Positioning）。它是战略营销的核心内容，指企业在一定的市场细分的基础上，确定自己的目标市场，最后把产品或服务定位在目标市场中的确定位置上。其中，市场细分(Segmentation)指企业根据消费者需求上的差异将产品 或服务的市场进行逐一细分的过程。其中包括了三个阶段，一是对消费者的需求进行市场调研，⼆是对市场调查的结果进行分析，最后是根据分析结果进行市场细分。通过市场细分，企业在目标市场的选择和营销策略的制定上更占优势。同时，还有利于企业发掘更多的市场机会，开拓新市场。另外，在市场细分下，企业可以集中人力、物理投入目标市场，争取局部市场上的优势，提高了企业的经济效益。

5.2,营销组合理论：营销组合理论(4P 理论)于 20 世纪 60 年代，由杰罗姆•麦肯锡在《基础 营销》(Basic Marketing)中提出。包括了:产品(Product)、价格(Price)、 渠道(Place)、促销(Promotion)，该理论核心在于，企业通过对这些要素进⾏有效组合，获得一定的市场反应，从而满足市场需求，使企业获得最大利润[6]。

\subsubsection&#123;文献综述&#125;

姚云萍（2019）[2]提出，众多定位同质化品牌的入局导致品牌可替代性增强，消费者选择余地越来越大；同时这种情况极有可能引发恶性价格战，不仅会导致品牌获利空间减小，影响企业发展，而且会使品牌资产受损，品牌形象坍塌。同时矿泉水市场消费需求的变化。消费者的消费观念，需求和品位都在发生着变化。传统的用户不再满足于大众化的品味和品质。年轻人则更不喜欢老旧的选择。

所以润品牌如果不能紧跟时代潮流为品牌注入新的元素，满组年轻消费者日益增长的需求，那么将会被贴上“落伍”的标签，失去消费者的关注，甚至消费者的印象将会随着时间的流逝而将品牌遗忘，最终使品牌黯然退出市场。[3]同时，在 z时代，消费渠道也更加多元，所以润品牌新媒体运营有待提高。李桂华（2021）[4]认为，在当今互联网迅猛发展的时代，消费渠道选择越来越多元化。除传统线下门店外，线上淘宝、京东等电商平台给了消费者更多的选择渠道，加之抖音等新媒体的助推，年轻一代消的消费观“互联网”化特征十分明显。[5]所以润品牌也应该抓住互联网消费的浪潮，推动线上营销。
</code></pre>
<p>​	<br>​	<br>​	\section{调查策划与实施}<br>​	<br>​	\subsection{调查方案设计}<br>​	<br>​	\subsubsection{调研内容}<br>​	<br>​	本次调研内容以z世代的年轻消费者为出发点，目标是要了解z世代对矿泉水营销推广活动的偏好、天然矿泉水在年轻受众群体中的接受程度和发展趋势。有以下几个部分：第一，分析了当下矿泉水销售行业的宏观背景和各个品牌在市场上的表现；第二，基于市场调研的成果，分析了西安市年轻消费者对于矿泉水购买的一些个人倾向性喜好，并结合了消费者的态度，对消费者群体进行了进一步的划分，使得调研结果更加具有针对性以及准确性；第三，调研西安市年轻消费者对线上购买矿泉水的消费驱动力；第四。从产品本身的客观因素、消费者个人喜好的主观因素两个不同的角度分析目前在线上营销矿泉水的障碍与优势。<br>​	<br>​	最终，立足于我们的调研结果，决策相对更合适的线上营销策略，开展更有效的天然矿泉水新锐品牌“正大所以润”的线上营销活动。<br>​	\begin{figure}[htbp]<br>​		\centering<br>​		\includegraphics[width&#x3D;1.0\textwidth]{3.png} 	% 图片相对位置<br>​		\caption{Model1 specific process}		% 图片标题<br>​		\label{Model1 flowchart}							% 图片标签<br>​	\end{figure}<br>​	\subsubsection{调研工作流程}<br>​	\begin{figure}[htbp]<br>​		\centering<br>​		\includegraphics[width&#x3D;.6\textwidth]{4.png} 	% 图片相对位置<br>​		\caption{Model1 specific process}		% 图片标题<br>​		\label{Model1 flowchart}							% 图片标签<br>​	\end{figure}<br>​	\subsubsection{线上电商平台事前调研}<br>​	<br>​	目前在中国大陆地区的主要线上电子商务平台有淘宝、天猫、京东、拼多多等。这几个app在中国大陆地区市场占有率非常高，并且每一个平台都有一定量的消费用户。我们采用在这些app进行搜索调研的方式，从多个角度，了解天然矿泉水的线上销售情况，同时有助于我们接下来的问卷设计。<br>​	<br>​	在调查中，我们发现，销售量大、点评数高、品牌知名度高的天然矿泉水产品更容易被电商平台在前列显示。各种天然矿泉水的展示图大多都十分简洁、无太多花哨的修饰、背景以白色或浅色为主。我们认为，这有助于消费者更加关注矿泉水本身，且有助于商家给消费者营造一种我们的矿泉水更天然更纯净的氛围。<br>​	<br>​	除此之外，部分被电商平台显示在前列的天然矿泉水产品右下角有“广告”标识，这引起我们思考，对于一些品牌，与电子商务平台达成商业广告合作，有助于自己的产品更加容易被消费者看到，获得更大的了解度、曝光度和关注度。<br>​	<br>​	线上销售天然矿泉水少有单瓶零售的，有量大销售的特点，一般是整箱销售或者按一提来销售的居多。<br>​	各品牌的直营旗舰店是主要的线上销售店铺，这表面，线上平台具有中间商发挥作用较小的特点。<br>​	另外，在营销活动上，我们关注到了，一些店铺或品牌会采取直接在电商平台开直播的方式促进销售，这给我们的调研提供了一个新的思路，直播带货这一近年来非常火爆的方式是否在天然矿泉水销售中对Z世代年轻人产生购买的欲望。<br>​	<br>    一些电子商务平台会对包括天然矿泉水在内的食品类产品开辟自营销售方式，如天猫app有专门的“天猫超市”来销售天然矿泉水。</p>
<pre><code>线上平台销售天然矿泉水在价格上会有一定优惠，“双11”、“618”等全平台的购物节、品牌店铺自己的促销都会有一定的折扣以促进产品销售。一般的形式有送消费券、送赠品、满减优惠等等。

\subsubsection&#123;深度了解产品&#125;

我们事先关注了新锐天然矿泉水品牌”正大所以润“的官方公众号，官方视频号。了解了该新锐天然矿泉水品牌已有的一些营销活动和产品特色。了解了该品牌目前面临的一些现状。

在我们的深度了解产品过程中，我们了解到该品牌天然矿泉水品牌想要有所突破的产品营销目标，主要想从年轻的消费者群体中打开知名度，逐渐形成稳定的消费者群体。

该矿泉水品牌是由目前在市场上的一线食品制造商“正大集团”出品，有大公司信誉背书。水源地产自世界级矿泉水产地，中国东北吉林省长白山，水源优质，矿泉水具有高品质的特点，适宜长期饮用。公司总部位于北京市。

同时，该品牌成立时间不长，是新锐品牌，具有比较广阔的销售前景和销售面扩大的空间。该品牌天然矿泉水在中国大陆地区市场上具有较大的发展潜力。

\subsubsection&#123;问卷设计&#125;
本次调查问卷以本次项目的研究目的——“天然矿泉水新锐品牌正大所以润的线上营销”为出发点和落脚点，结合前期调研准备，基本确定了问卷选项：
\begin&#123;itemize&#125;
    \item 	平时购买矿泉水多吗？
    \item 	购买矿泉水的场所主要是线上还是线下？
    \item 	有长期饮用矿泉水的习惯吗？
    \item 	购买天然矿泉水时注重品牌吗？
    \item 	线上营销活动影响对天然矿泉水的选择程度如何？
    \item	线上购买天然矿泉水时最注重的因素是什么？
\end&#123;itemize&#125;
为了更加全面地了解年轻消费者对天然矿泉水的消费情况，我们根据购买矿泉水的频率，将问卷设计为A卷和B卷，前者供偶尔或从不购买天然矿泉水的消费者填写，后者供经常购买天然矿泉水的消费者填写。本次调查目的是帮助形成新锐矿泉水品牌在线上对年轻消费者的营销活动决策。问卷的内容包括以下几个方面:

 (1)年轻消费者饮用天然矿泉水的消费习惯：品牌偏好、线上线下偏好、营销活动偏好等
 
 (2)年轻消费者选购天然矿泉水的考虑因素：价格、品质、品牌、包装等
 
(3)年轻消费者对品牌的认知程度

 (4)受调研者的基本信息：年龄、性别、收入情况等
</code></pre>
<p>为了减轻受访者的一些顾虑，对填写问卷有抗拒心理，问卷个人信息可能出现的漏填，因此将个人信息板块放在了问卷最后部分。</p>
<pre><code>\subsubsection&#123;预调查&#125;

为了检验问卷可行性以及可靠性，在正式问卷调查之前，我们在网络上进行了一次预调查，一共发放了42份问卷，回收了40份，被调查者均居住在西安市，且为年轻消费者。根据预调查所产生的结果，发现问卷存在以下问题，部分题设并不合理、措辞不够精准委婉、受调查者对于一些题目的理解存在不解等。最后，针对以上问题，对问卷进行了一些完善。
</code></pre>
<p>​	<br>​	\subsubsection{抽样设计}<br>​	<br>​	\textbf{（1）调研对象与范围}<br>​	<br>​	本次调研是具有一定针对性的调研，主要为Z世代年轻消费者对新锐天然矿泉水品牌线上营销活动开展提供决策支持，销售地域为西安市。因此，调研对象以长期居住在西安市的年轻消费群体为总体。为了更加全面地了解Z世代年轻消费者对新锐天然矿泉水品牌线上营销活动开展的喜好程度，以调研有购买天然矿泉水习惯的年轻消费者为主，以没有购买天然矿泉水习惯的年轻消费者为辅。<br>​	<br>​	\textbf{(2)抽样方法}<br>​	<br>​	为了我们的调研结果更加准确，对天然矿泉水消费市场具有进一步的把握，以便制定合理且有效的线上营销方案，本次调研采用线上随机抽样。为了可以保证样本分布更加均匀，充分了解西安市年轻消费者对天然矿泉水的喜好，我们按照行政区和功能区划进行分层抽样。<br>​	<br>​	\textbf{(3)样本量的确定}<br>​	<br>​	在总体样本量较大时，最低样本量与被调查者总数没有必然联系，会受到误差和置信水平的影响，通过样本量计算公式，得出样本量为96。<br>​	\begin{align}<br>​		N\ &#x3D; \ \frac{[Z^2 p(1-p)]}{e^2}<br>​	\end{align}<br>​	<br>​	具体计算流程如下：本次调查的最低样本根据公式（1）(其中N为样本量，Z为当置信度为1.96时的Z统计量的值，e为极限误差，p为抽样比例)确定，保证在95% 的置信水平，极限误差小于10 % ，抽样比例为0.5的前提下，计算出最低样本量为96.04，同时考虑到问卷回收后可能出现的有效问卷率及误差，故实际抽样数量为最低样本量的1.1倍，即106份。<br>​	<br>​	公式1：<br>​	<br>    根据西安市统计局、西安市第七次全国人口普查领导小组办公室公布的西安市第七次全国人口普查主要数据公报（第二号） ——分区域常住人口情况[西安市统计局、西安市第七次全国人口普查领导小组办公室.西安市第七次全国人口普查主要数据公报（第二号），2021<br>    ]公开资料，具体如下表显示，居住在城区（包括六城区、高新区、经开区、曲江新区、浐灞生态区、国际港务区、航天产业基地）的占比约为60 % ，居住在郊区（除城区之外的所有区）的占比约为40 % ，因此我们的问卷发放也符合6：4的比例，达到分层抽样的效果。</p>
<pre><code>\begin&#123;figure&#125;[htbp]
    \centering
    \includegraphics[width=.8\textwidth]&#123;1.png&#125; 	% 图片相对位置
    \caption&#123;Model1 specific process&#125;		% 图片标题 
    \label&#123;Model1 flowchart&#125;							% 图片标签
\end&#123;figure&#125;
\begin&#123;figure&#125;[htbp]
    \centering
    \includegraphics[width=.8\textwidth]&#123;2.png&#125; 	% 图片相对位置
    \caption&#123;Model1 specific process&#125;		% 图片标题 
    \label&#123;Model1 flowchart&#125;							% 图片标签
\end&#123;figure&#125;

\subsection&#123;调查资料整理&#125;

\subsubsection&#123;调查问卷回收&#125;
本次问卷发放通过大赛组委会提供的线上问卷网站“腾讯问卷”进行，按照公式所计算的样本量发放，力求更进一步地掌握西安市年轻消费者群体对天然矿泉水的消费情况。每天检查问卷回收的数量，通过小组成员的审核，确认回收的问卷是否具有有效性。

\subsubsection&#123;问卷数据的校订&#125;

我们对数据进行了以下检查：检查问卷前后是否具有逻辑上的一致性、检查受调查者在填写问卷时所花费的时间。因此，我们剔除了一些无效问卷，以免干扰最终的结果，这些问卷存在前后逻辑不一致、填写问卷花费时间过短的问题。

\subsubsection&#123;数据的编码及录入&#125;

本次问卷采用线上平台统一发放，利用线上平台已有的功能进行数据的收集，通过问卷平台以excel和spss导出，修改部分变量的名称，对问卷重新编码，令数据更加清晰明了，有便于我们后期的统计分析。

\section&#123;基于Linear Regression和Pearson相关性分析探究奶茶购买意愿的影响因素&#125;
\subsection&#123;模型简介&#125;
\subsubsection&#123;Linear Regression模型简介&#125;

线性回归分析是一种寻求变量之间近似的线性函数关系的回归方法，适用于离散型变量之间的线性关系的分析，在本题中我们根据问卷的数据使用了14元的线性回归模型对数据进行回归分析。

其中回归函数为：
\begin&#123;align&#125;
    y\ = \ w_0\ +\ w_1 x_1\ +\ w_2 x_2 \ +\...+\ w_n x_&#123;14&#125;\ +\ b  
\end&#123;align&#125;
其中b为常数随机误差。

现在对$x_1 x_2,...x_14$进行观察（即为收到的一份问卷数据），第i份问卷数据取值为别为$x_1^i,x_2^i...x_&#123;14&#125;^i和y^i$,随机误差为$b^i$，则得到方程：
\begin&#123;align&#125;
    y^i \ =  \ w_o \ +\ w_1 x_1^i\ +\ w_2 x_2^i\ +\ ...+w_&#123;14&#125; x_&#123;14&#125;^i\ +\ b^i
\end&#123;align&#125;
 
 然后应用损失函数对模型一次预测的好坏进行评估，即为真实值和预测值的误差，具体定义为：
 \begin&#123;align&#125;
 	L\ = \ \frac&#123;1&#125;&#123;2&#125; (y-y^i)^2
 \end&#123;align&#125;

\subsubsection&#123;Pearson相关分析模型简介&#125;

假设有两组数据$X:&#123;X_1,X_2,X_3...X_n&#125; ,\ Y:&#123;Y_1,Y_2,Y_3..Y_n&#125;$这些数据在本模型中均为调查问卷得到
则有样本均值为：
\begin&#123;align&#125;
    \bar&#123;X&#125;\ = \ \frac&#123;\sum_&#123;i=1&#125;^&#123;n&#125;X_i&#125;&#123;n&#125; \\
    \bar&#123;Y&#125;\ = \ \frac&#123;\sum_&#123;i=1&#125;^&#123;n&#125;Y_i&#125;&#123;n&#125;
\end&#123;align&#125;
则样本协方差为：
\begin&#123;align&#125;
    Cov(X,Y)\ = \ \frac&#123;\sum_&#123;i=1&#125;^&#123;n&#125; (X_i - \bar&#123;Xz&#125;)(Y_i- \bar&#123;Y&#125;)&#125;&#123;n-1&#125;
\end&#123;align&#125;
则得到样本的Pearson系数为：
\begin&#123;align&#125;
    r_&#123;XY&#125;\ = \ \frac&#123;Cov(X,Y)&#125;&#123;S_X S_Y&#125;\\
    S_X = \ \sqrt&#123;\frac&#123;\sum_&#123;i=1&#125;^&#123;n&#125;(X_i - \bar&#123;X&#125;)^2&#125;&#123;n-1&#125;&#125;\\
    S_Y\ = \ \sqrt&#123;\frac&#123;\sum_&#123;i=1&#125;^&#123;n&#125;(Yi - \bar&#123;Y&#125;)^2&#125;&#123;n-1&#125;&#125;
\end&#123;align&#125;

\subsection&#123;模型变量的解释&#125;
将最终的因变量设置为矿泉水的购买意愿，设置购买意愿为三档，分别为不愿意购买，偶尔购买，经常购买三档，对与问卷的自变量promotion,age,place,habit,usual,salary,
wrap,live-commerce,gift,represent,brand-linkage,price,brand,quality.
\\

\begin&#123;tabular&#125;&#123;cccccc&#125;
    \toprule
    变量名&amp; &amp; &amp; &amp;变量定义\\
    \midrule
    Y &amp; &amp; &amp; &amp; 消费者购买意愿参数\\
    \\
    \midrule
    promotion&amp;&amp;&amp;&amp; 矿泉水饮用意愿参数\\
    \\
    \midrule
    place&amp;&amp;&amp;&amp;  矿泉水购买场所参数\\
    \\
    \midrule
    habit&amp;&amp;&amp;&amp;  矿泉水饮用习惯参数\\
    \\
    \midrule
    price&amp;&amp;&amp;&amp;  价格影响参数\\
    \\
    \midrule
    represent&amp; &amp;&amp;&amp; 营销活动影响参数\\
    \\
    \midrule
    brand-linkage&amp; &amp;&amp;&amp; 品牌联动影响参数\\
    \\
    \midrule
    brand&amp; &amp;&amp;&amp; 自身品牌影响参数\\
    \\
    \midrule
    wrap&amp;&amp;&amp;&amp;  包装影响参数\\
    \\
    \midrule
    quality&amp;&amp;&amp;&amp;  矿泉水自身品质影响参数\\
    \\
    \midrule
    age&amp;&amp;&amp;&amp;  消费者年龄影响参数\\
    \\
    \midrule
    salary&amp;&amp;&amp;&amp;  消费者收入影响参数\\
    \\
    \midrule
    gift&amp;&amp;&amp;&amp;  礼物赠送影响参数\\
    \\
    \bottomrule
\end&#123;tabular&#125;


综上所述，最终消费者购买意愿可表示为：

\begin&#123;align&#125;
    Y\ = \ w_0 +w_1 promotion + w_2 live-commerce + w_3 gift + w_4 place + w_5 habit
    \\ +w_6 salary + w_7 represent + w_8 brand-linkage + w_9 price +w_&#123;10&#125; brand \\
    + w_&#123;11&#125; quality + w_&#123;12&#125; wrap + w_&#123;13&#125; age +w_&#123;14&#125; usual 
\end&#123;align&#125;
</code></pre>
<p>\subsection{结果分析}</p>
<pre><code>下面是我们的问卷数据分析图：
\begin&#123;figure&#125;[htbp]
    \centering 									%图片全局居中
    %并排几个图，就要写几个minipage
    \begin&#123;minipage&#125;[b]&#123;0.3\textwidth&#125; 		%所有minipage宽度之和小于1
        \centering 								%图片局部居中
        \includegraphics[width=0.9\textwidth]&#123;5.png&#125; 
        %此时的图片宽度比例是相对于这个minipage的，不是全局
        \caption&#123;&#125;
        \label&#123;fig:1&#125;
    \end&#123;minipage&#125;
    \begin&#123;minipage&#125;[b]&#123;0.3\textwidth&#125; 
        \centering 									%图片局部居中
        \includegraphics[width=0.9\textwidth]&#123;6.png&#125;
        \caption&#123;&#125;
        \label&#123;fig:2&#125;
    \end&#123;minipage&#125;
    \begin&#123;minipage&#125;[b]&#123;0.3\textwidth&#125; 		%所有minipage宽度之和小于1
    \centering 								%图片局部居中
    \includegraphics[width=0.9\textwidth]&#123;7.png&#125; 
    %此时的图片宽度比例是相对于这个minipage的，不是全局
    \caption&#123;&#125;
    \label&#123;fig:1&#125;
    \end&#123;minipage&#125;
\end&#123;figure&#125;
</code></pre>
<p>\begin{figure}[htbp]<br>    \centering 									%图片全局居中<br>    %并排几个图，就要写几个minipage<br>    \begin{minipage}[b]{0.3\textwidth} 		%所有minipage宽度之和小于1<br>        \centering 								%图片局部居中<br>        \includegraphics[width&#x3D;0.9\textwidth]{8.png}<br>        %此时的图片宽度比例是相对于这个minipage的，不是全局<br>        \caption{}<br>        \label{fig:1}<br>    \end{minipage}<br>    \begin{minipage}[b]{0.3\textwidth}<br>        \centering 									%图片局部居中<br>        \includegraphics[width&#x3D;0.9\textwidth]{9.png}<br>        \caption{}<br>        \label{fig:2}<br>    \end{minipage}<br>    \begin{minipage}[b]{0.3\textwidth} 		%所有minipage宽度之和小于1<br>        \centering 								%图片局部居中<br>        \includegraphics[width&#x3D;0.9\textwidth]{10.png}<br>        %此时的图片宽度比例是相对于这个minipage的，不是全局<br>        \caption{}<br>        \label{fig:1}<br>    \end{minipage}<br>\end{figure}<br>\begin{figure}[htbp]<br>    \centering 									%图片全局居中<br>    %并排几个图，就要写几个minipage<br>    \begin{minipage}[b]{0.3\textwidth} 		%所有minipage宽度之和小于1<br>        \centering 								%图片局部居中<br>        \includegraphics[width&#x3D;0.9\textwidth]{11.png}<br>        %此时的图片宽度比例是相对于这个minipage的，不是全局<br>        \caption{}<br>        \label{fig:1}<br>    \end{minipage}<br>    \begin{minipage}[b]{0.3\textwidth}<br>        \centering 									%图片局部居中<br>        \includegraphics[width&#x3D;0.9\textwidth]{12.png}<br>        \caption{}<br>        \label{fig:2}<br>    \end{minipage}<br>    \begin{minipage}[b]{0.3\textwidth} 		%所有minipage宽度之和小于1<br>        \centering 								%图片局部居中<br>        \includegraphics[width&#x3D;0.9\textwidth]{13.png}<br>        %此时的图片宽度比例是相对于这个minipage的，不是全局<br>        \caption{}<br>        \label{fig:1}<br>    \end{minipage}</p>
<p>\end{figure}</p>
<p>通过图表可以得出：<br>\begin{itemize}<br>    \item 消费者有很大的饮用矿泉水的需求。<br>    \item 由数据显示，消费者一般都是在线下买矿泉水比较多，如何开展线上销售，首先是广告，其次是价格战争。对于开展线上销售，大家普遍是解决当前的喝水需求而进行线下购买，如何打开线上销售，我们需要进行定义“新线上”，也就是说我们可以进行自动售货机打开线上销售的新局面。价格战争，对于一般人而言，只有很少一部分人才会考虑水的口感（调查问卷缺少数据），大部分人主要是喝水购买水。<br>    \item 由数据所示，我们能看到还是有消费者长期饮用矿泉水。<br>    \item 从数据能看出，重要程度为1和3接近数据的30%，程度4为20%，说明线上营销还是会有一定影响购买量。<br>    \item 对于价格是影响购买产品的主要因素，其次就是购买后赠送赠品，主播直播带货和流量明星代言对产品的购买影响力是比较低的。<br>    \item 最注重的因素有两个，价格和水的品质。<br>    \item 是否听说过正大所以润，只有20%，说明产品宣传度不够。<br>    \item 年龄分布大部分人在17-19 之间和20-21之间，只有少数部分是大于22的人填写了问卷，符合我们对于年轻群体的调查分析。<br>    \item 男女比约为1：1，调查结果没有男女差异。<br>    \item 大部分是学生，没有基本收入，能解释对价格的看重程度，可指导线上对年轻人的营销策划。<br>\end{itemize}<br>\subsubsection{Pearson分析结果}</p>
<p>\begin{figure}[htbp]<br>    \centering<br>    \includegraphics[width&#x3D;.3\textwidth]{14.png} 	% 图片相对位置<br>    \caption{Pearson相关系数}		% 图片标题<br>    \label{Model1 flowchart}							% 图片标签<br>\end{figure}<br>具体大小分析图为：<br>\begin{figure}[htbp]<br>    \centering<br>    \includegraphics[width&#x3D;.8\textwidth]{15.png} 	% 图片相对位置<br>    \caption{Pearson相关系数可视化}		% 图片标题<br>    \label{Model1 flowchart}							% 图片标签<br>\end{figure}</p>
<p>从上表可知，利用相关分析去研究willingness分别和promotion, age, place, habit, usual, salary, wrap, live-commerce, gift, represent, brand-linkage, price, brand, quality共14项之间的相关关系，使用Pearson相关系数去表示相关关系的强弱情况。具体分析可知：</p>
<p>willingness和promotion之间的相关系数值为0.466，并且呈现出0.01水平的显著性，因而说明willingness和promotion之间有着显著的正相关关系。willingness和age之间的相关系数值为0.173，接近于0，并且p值为0.085&gt;0.05，因而说明willingness和age之间并没有相关关系。willingness和place之间的相关系数值为0.332，并且呈现出0.01水平的显著性，因而说明willingness和place之间有着显著的正相关关系。willingness和habit之间的相关系数值为0.286，并且呈现出0.01水平的显著性，因而说明willingness和habit之间有着显著的正相关关系。willingness和usual之间的相关系数值为0.154，接近于0，并且p值为0.125&gt;0.05，因而说明willingness和usual之间并没有相关关系。willingness和salary之间的相关系数值为0.156，接近于0，并且p值为0.121&gt;0.05，因而说明willingness和salary之间并没有相关关系。willingness和wrap之间的相关系数值为-0.052，接近于0，并且p值为0.608&gt;0.05，因而说明willingness和wrap之间并没有相关关系。willingness和live-commerce之间的相关系数值为0.424，并且呈现出0.01水平的显著性，因而说明willingness和live-commerce之间有着显著的正相关关系。willingness和gift之间的相关系数值为0.369，并且呈现出0.01水平的显著性，因而说明willingness和gift之间有着显著的正相关关系。willingness和represent之间的相关系数值为0.168，接近于0，并且p值为0.095&gt;0.05，因而说明willingness和represent之间并没有相关关系。willingness和brand-linkage之间的相关系数值为0.331，并且呈现出0.01水平的显著性，因而说明willingness和brand-linkage之间有着显著的正相关关系。willingness和price之间的相关系数值为0.139，接近于0，并且p值为0.168&gt;0.05，因而说明willingness和price之间并没有相关关系。willingness和brand之间的相关系数值为-0.064，接近于0，并且p值为0.526&gt;0.05，因而说明willingness和brand之间并没有相关关系。willingness和quality之间的相关系数值为0.013，接近于0，并且p值为0.899&gt;0.05，因而说明willingness和quality之间并没有相关关系。</p>
<p>\subsubsection{Linear Regression分析结果}<br>回归分析结果为：<br>\begin{figure}[htbp]<br>    \centering<br>    \includegraphics[width&#x3D;.6\textwidth]{16.png} 	% 图片相对位置<br>    \caption{Linear Regression分析结果}		% 图片标题<br>    \label{Model1 flowchart}							% 图片标签<br>\end{figure}</p>
<p>从上表可知，对模型进行F检验时发现模型通过F检验(F&#x3D;5.705，p&#x3D;0.000&lt;0.05)，也即说明模型构建有意义。</p>
<p>从上表可知，将promotion，live-commerce，gift，place，habit，salary，represent，brand-linkage，price，brand，quality，wrap，age，usuall作为自变量，而将willingness作为因变量进行线性回归分析，从上表可以看出，模型R方值为0.484，意味着promotion，live-commerce，gift，place，habit，salary，represent，brand-linkage，price，brand，quality，wrap，age，usuall可以解释willingness的48.4%变化原因。</p>
<p>从上表可知，将promotion，live-commerce，gift，place，habit，salary，represent，brand-linkage，price，brand，quality，wrap，age，usual作为自变量，而将willingness作为因变量进行线性回归分析，从上表可以看出，模型公式为：</p>
<p>\begin{align}<br>    willingness\ &#x3D;\ -0.682 + 0.261promotion + 0.288live-commerce + 0.203<em>gift<br>    \<br>    + 0.750</em>place + 0.476<em>habit + 0.034</em>salary-0.174<em>represent+0.187</em>brand-linkage<br>    \-0.181<em>price-0.054</em>brand-0.050<em>quality-0.175</em>wrap + 0.222<em>age-0.060</em>usual<br>\end{align}</p>
<p>模型R方值为0.484，意味着promotion，live-commerce，gift，place，habit，salary，represent，brand-linkage，price，brand，quality，wrap，age，usuall可以解释willingness的48.4%变化原因。对模型进行F检验时发现模型通过F检验(F&#x3D;5.705，p&#x3D;0.000&lt;0.05)，也即说明promotion，live-commerce，gift，place，habit，salary，represent，brand-linkage，price，brand，quality，wrap，age，usuall中至少一项会对willingness产生影响关系，另外，针对模型的多重共线性进行检验发现，模型中VIF值全部均小于5，意味着不存在着共线性问题；并且D-W值在数字2附近，因而说明模型不存在自相关性，样本数据之间并没有关联关系，模型较好。最终具体分析可知：</p>
<p>\begin{itemize}<br>    \item promotion的回归系数值为0.261(t&#x3D;2.853，p&#x3D;0.005&lt;0.01)，意味着promotion会对willingness产生显著的正向影响关系。<br>    \item live-commerce的回归系数值为0.288(t&#x3D;2.514，p&#x3D;0.014&lt;0.05)，意味着live-commerce会对willingness产生显著的正向影响关系。<br>    \item gift的回归系数值为0.203(t&#x3D;2.073，p&#x3D;0.041&lt;0.05)，意味着gift会对willingness产生显著的正向影响关系。<br>    \item place的回归系数值为0.750(t&#x3D;2.185，p&#x3D;0.032&lt;0.05)，意味着place会对willingness产生显著的正向影响关系。<br>    \item habit的回归系数值为0.476(t&#x3D;1.678，p&#x3D;0.097&gt;0.05)，意味着habit并不会对willingness产生影响关系。<br>    \item salary的回归系数值为0.034(t&#x3D;0.431，p&#x3D;0.667&gt;0.05)，意味着salary并不会对willingness产生影响关系。<br>    \item represent的回归系数值为-0.174(t&#x3D;-1.634，p&#x3D;0.106&gt;0.05)，意味着represent并不会对willingness产生影响关系。<br>    \item brand-linkage的回归系数值为0.187(t&#x3D;1.495，p&#x3D;0.139&gt;0.05)，意味着brand-linkage并不会对willingness产生影响关系。<br>    \item price的回归系数值为-0.181(t&#x3D;-0.681，p&#x3D;0.497&gt;0.05)，意味着price并不会对willingness产生影响关系。<br>    \item brand的回归系数值为-0.054(t&#x3D;-0.203，p&#x3D;0.840&gt;0.05)，意味着brand并不会对willingness产生影响关系。<br>    \item quality的回归系数值为-0.050(t&#x3D;-0.188，p&#x3D;0.852&gt;0.05)，意味着quality并不会对willingness产生影响关系。<br>    \item wrap的回归系数值为-0.175(t&#x3D;-0.697，p&#x3D;0.488&gt;0.05)，意味着wrap并不会对willingness产生影响关系。<br>    \item age的回归系数值为0.222(t&#x3D;1.507，p&#x3D;0.136&gt;0.05)，意味着age并不会对willingness产生影响关系。<br>    \item usual的回归系数值为-0.060(t&#x3D;-0.253，p&#x3D;0.801&gt;0.05)，意味着usual并不会对willingness产生影响关系。<br>\end{itemize}</p>
<p>总结分析可知：promotion, live-commerce, gift, place会对willingness产生显著的正向影响。</p>
<p>\begin{figure}[htbp]<br>    \centering<br>    \includegraphics[width&#x3D;.8\textwidth]{17.png} 	% 图片相对位置<br>    \caption{分析结果差异可视化}		% 图片标题<br>    \label{Model1 flowchart}							% 图片标签<br>\end{figure}<br>\begin{figure}[htbp]<br>    \centering<br>    \includegraphics[width&#x3D;.3\textwidth]{18.png} 	% 图片相对位置<br>    \caption{各参数影响因子}		% 图片标题<br>    \label{Model1 flowchart}							% 图片标签<br>\end{figure}</p>
<p>\subsubsection{决策结果}</p>
<p>由相关性分析</p>
<p>\begin{itemize}<br>    \item willingness和promotion之间的相关系数值为0.466<br>    \item willingness和place之间的相关系数值为0.332<br>    \item willingness和live-commerce之间的相关系数值为0.424<br>    \item willingness和brand-linkage之间的相关系数值为0.331<br>    \item willingness和gift之间的相关系数值为0.369<br>\end{itemize}</p>
<p>由线性回归分析</p>
<p>\begin{itemize}<br>    \item gift的回归系数值为0.203(t&#x3D;2.073，p&#x3D;0.041&lt;0.05)，意味着gift会对willingness产生显著的正向影响关系。<br>    \item place的回归系数值为0.750(t&#x3D;2.185，p&#x3D;0.032&lt;0.05)，意味着place会对willingness产生显著的正向影响关系。<br>\end{itemize}</p>
<p>基于以上分析我们得出以下结论：</p>
<p>\textbf{（1）对于水的销售取决于价格促销，这与年龄和薪水无关。}</p>
<p>\textbf{（2）相关性分析和线性回归都提到了线下这个点，所以消费者更愿意到线下购买。}</p>
<p>\textbf{（3）消费者对于互联网直播带货有非常大的兴趣，所以要打开互联网直播营销市场。}</p>
<p>\textbf{（4）消费者需要对品牌联动也有足够的消费意愿。}</p>
<p>\textbf{（5）相关性分析和线性回归都有赠送赠品，说明gift能提升消费者的购买意愿。}</p>
<pre><code>\section&#123;结合数据分析结果的4P营销组合策略&#125;

\subsection&#123;产品策略（products）&#125;
通过我们数据分析的结果，我们可以得知，产品的水源品质是最重要的因素，占到了（此处插入数据）是受到年轻消费者最重视的因素。因此，我们可以得到一个这样的判断，产品的品质是产品策略需要考虑的第一要素。

我们在网络上查找了新锐天然矿泉水品牌“正大所以润”的一些资料，所以润天然矿泉水臻选北纬36°-46°世界级三大黄金水源地之一长白山、地下深层1600米的优质水源。富含天然矿物质、微量元素，低TDS值，水质轻盈柔软，口感绵软清冽、顺滑甘甜，呈天然弱碱性，适宜长期饮用。

产品的水源地经过了精选，水源纯净优质，口感好。同时，我们也调查了市面上其他品牌生产的矿泉水，相对而言，很多品牌的水源地选择并没有那么严格。例如西安市本地消费者经常饮用的某矿泉水品牌，水源来自长安区某秦岭峪口。秦岭北麓靠近西安市，西安市作为新一线城市和国家中心城市，工业所带来污染和大量人口所产生的环境不利因素比远离核心经济区的长白山自然保护区更多，因此秦岭的水源相对而言是不如长白山水源优质的。所以该产品的水源品质是高于大多数西安市年轻消费者现在所饮用矿泉水产品的平均水平的。

既然我们需要营销的产品在产品本身的水源品质上已经具有比较大的优势，那么我们给出以下的策略，在营销上我们需要突出强调品牌水源优质的优势。从而吸引年轻消费者对本品牌的信任和喜爱。

我们认为在营销活动之中，强调“长白山”这一卖点是非常有利的。长白山作为我国吉林省的旅游胜地，本身知名度高，能给人一种纯净的心理暗示能够最大程度帮助品牌，构建水源优质的品牌形象，吸引更多年轻消费者购买。

目前也有越来越多的年轻人重视健康管理，强调产品本身富含微量元素，会对产品的销售有利。

而在产品的附加价值上面，令我们感到意外的是，年轻的受访者给出的答案对产品的包装外观关注度是比较小的，这和我们的预想有所差异。因此，我们认为，在产品包装外观上并不需要做得太过花哨，要让产品包装外观回归产品本质，作为天然矿泉水产品，在外观上运用现代化的极简风格，更大透明度的材质包装，可能会给消费者带来更多的水源纯净的心理暗示，对产品营销有利。

\subsection&#123;价格策略（price）&#125;

在我们的调研结果中可以显示，各类营销活动中，价格因素是大家考虑更多的。价格因素的占比是（此处插入数据）也就是说，在营销活动中，更实惠的价格将对产品的销售有利。同时，根据我们收集到的数据，Z世代的年轻人年龄并不大，很多受访者还是在校学生，并没有稳定收入，大多数同学家长提供的生活费也是相对有限的。有少部分受访者已经就业，但作为刚毕业不久的年轻人，收入区间大多数都分布在较低的区段，因此我们目标的Z世代年轻消费者群体有相当大一部分是价格敏感型消费者。我们在营销活动上在价格方面需要进行一些更大程度的优惠，这样我们的营销活动才更加有效。z

在成本分析方面，主要产生的费用有工厂取水费用、包装费用、运输费用、广告费用等等。

我们由于需要在价格上进行比较大的优惠这样才能更好的营销，我们认为可以一定程度上削减运输成本，从水源地吉林省到陕西省销售分区域，路程较远，可能产生的运输成本较高，从消费者的角度上来讲，在价格上并不实惠。尤其是当价格敏感的消费者在线上购物时，虽然网购价格比线下零售具有一定程度的价格优惠，但如果需要支付邮费的话，这会增加消费者的费用支出，消费成本上升，消费者取消订单的概率就增加了。我们在价格策略上需要尽可能减少这种情况的发生。我们可以联合电子商务平台，在陕西省本地设立存储仓库，先将大批量的天然矿泉水从吉林长白山运输到陕西省省会西安市，降低单位运输成本，西安市的消费者下单的时候，可以就近运输，在价格上可以实现包邮价，这样的价格策略会使得消费者获得更多的实惠感，有利于形成稳定的年轻消费者客户群体。总而言之，在营销活动中实行包邮价的价格策略，我们认为会对产品的推广和销售有帮助的。

\subsection&#123;渠道策略（place）&#125;

在我们的调研中，我们可以分析到，大多数的年轻消费者在选择消费天然矿泉水时，更多的是通过线下的渠道。回收的问卷中，主要通过线下渠道的超过了（此处插入数据）这些渠道包括了超市、商场、送水师傅等。因此我们在制定线上的营销活动打法时，不单单是只关注线上渠道的营销活动，也需要线下线上相结合。

在超市、便利店等环境中，我们可以与便利店进行商业合作，在产品推出的初期，为了尽快打开产品的知名度，把我们需要推广的天然矿泉水产品放在冰柜里中间层，获得更高的关注度，在消费者心中留下一定印象，下次在网络上选购时，消费者将更倾向于自己曾见到过的品牌产品。

在商场环境中，进行一些试喝、品尝的活动也是有利于营销活动的开展的。

我们尤其需要关注到送水师傅这一渠道，经过我们的进一步调研，我们发现目前送水师傅这一渠道仍然停留在比较原始的状态，用水票来兑换矿泉水。与此同时，送水师傅这一渠道具有量大的特点。Z世代的消费者大多目前还居住在校园宿舍，或是大城市的出租房里，购买专业净水器的是比较少的，很多年轻消费者在饮用天然矿泉水方面还是比较依赖于送水师傅这一渠道，我们认为可以在这一渠道上与送水师傅打“联合战”。消费者在线上电子商务平台或线上社区团购平台下优惠订单，送水师傅立即送水上楼。

在线上平台的渠道本身，直播带货是目前比较新颖也是有效的营销活动方式，根据我们的调研，认为直播带货这一渠道会影响自己选购天然矿泉水产品的程度处于一个比较适中的程度。也就是说，我们可以分析得到，直播带货在年轻人当中的受众也并不是那么广的，但与此同时也有一部分的年轻消费者会通过主播开直播带货下单产品，因此为了全方位的进行营销活动，直播带货这一渠道也是不容忽略的。直播带货除了直接在购物app旗舰店里直接开直播以外，还可以使用b站、抖音、快手等直播渠道。

在直播带货当中，我们引入KOL这一新的概念，KOL即Key Opinion Leader的缩写，中文翻译过来是意见领袖的意思，是指在某个领域发表观点、有一定影响力的人。其实KOL在我们的生活中，不仅仅是某个特定领域的领袖，也是各类网红、博主、主播等等。利用KOL的影响力，进行直播带货，往往能达到事半功倍的效果。

我们在事前的市场调研中也发现，存在一种方式即生产商自己的网络旗舰店可以和购物app达成推广合作，购物app通过广告的形式将产品推送到更考前的位置，这是一种非常简单直接但又有效的营销办法。

\subsection&#123;促销策略（promotion）&#125;

在我们收回的问卷中，还有一点是非常值得关注的，年轻消费者对品牌联动的关注度是要高于我们的预期（此处插入数据），并且与此同时前面也提到了年轻消费者在天然矿泉水的选购过程当中是相对来说不那么看中品牌而是水源品质本身的。这就启示我们，如果天然矿泉水本身的品牌较难构建较大的选购吸引力，我们可以尝试与其他领域的品牌进行联动，通过其他品牌的联动价值为我们的产品引流。因此我们认为在促销策略当中注重品牌联动的打法也是比较重要的，能够吸引到一部分的Z世代年轻消费者。  

Z世代年轻人对网络上的新鲜事物会产生比较大的兴趣，在我们对其他品牌的观察调研中我们也发现，一些与大热电视剧、动漫、网络小说、手游的联动将会带来很高的话题度。这种促销策略是值得去借鉴的。

我们也收集到了数据显示，赠送赠品的产品会产生比较大的吸引力。其实并不是只有年级较长的消费者会看中赠品这一促销形式，在我们的问卷里，许多年轻的消费者也对赠送赠品展现了较大的兴趣（此处插入数据）。因此我们在促销活动上可以充分考虑赠送赠品这一方式。我们在事前的调研也发现，线上销售相比线下的零售具有量大的特点，因此对于购买整箱天然矿泉水的顾客在促销活动时给他们赠送一些赠品（如果这些赠品可以与其他品牌进行联动效果尤佳），我们认为可以纳入在制定营销活动时的考虑范围。

除此之外，天然矿泉水本身也可以作为赠品来营销，我们在调研中了解到，正大集团作为市场领先的食品供应商，旗下有多款已经非常成熟的销售产品，在营销活动时，将新锐品牌“正大所以润”天然矿泉水作为赠品赠出，既能够让消费者感到实惠，又能让消费者了解到“正大所以润”这款产品，并进行初次的品尝，有利于消费者真实感受到产品的水源品质和良好的口感，在下次购买天然矿泉水时选购“正大所以润”，将天然矿泉水在营销活动时作为赠品赠送出，对天然矿泉水产品消费者群体的构建和知名度打开都是非常有利的。

\section&#123;可行性建议&#125;

本次调研立足“更受Z世代目标群体欢迎的天然矿泉水品牌营销活动”，以正大集团旗下出品品牌“正大所以润”为例，并通过网络搜索引擎调研了目前市面上的优秀营销参考案例、其他品牌的整体行业情况，通过问卷倾听了潜在消费者的声音，了解他们在消费天然矿泉水时的一些消费习惯和消费喜好，我们给出了以下一些可行性建议，希望能够对具体营销活动开展的决策起到一定的帮助。

\subsection&#123;立足产品本身优良水源品质&#125;

品质是消费者在消费天然矿泉水时非常注重的一点。人每天都需要饮用大量的饮用水，水是人们生活的必需品，并且水需要进入人类的口中和体内，人们对喝进和吃进去的东西往往是很关注的。水源品质是我们营销的一大卖点，也是能够获得消费者青睐的非常重要的因素。在营销活动中，将本产品优良的水源地——长白山、水富含的微量元素等等通过各种形式给展示出来，我们认为是对营销活动帮助非常大的。
我们也了解到“正大所以润”产品本身也具有较高的品质，重点立足优良水源品质进行营销活动是十分可行且吸引消费者的。

\subsection&#123;在新锐品牌打入市场初期价格上让利顾客&#125;

“正大所以润”作为新锐品牌，在投入市场初期可能会面临知名度不够高等等问题，并且天然矿泉水市场目前已经有非常多其他公司推出的成熟的品牌。要逐渐打入市场，就需要让消费者感受到本产品的竞争力。除了水源优质的核心竞争力外，根据我们调研所知，价格仍然是年轻消费者考虑的重要因素，我们还需要结合价格打法。无论多么新颖的营销活动战术，倘若消费者感受不到消费的实惠的话，营销活动的效果都会大大打折扣。消费者在最终消费时可能会考虑到价格不够实惠而止步，取消订单。
新锐天然矿泉水品牌打入市场要抢占已有品牌的市场，在价格上给顾客更多的让利空间，更快地在年轻消费者群体中形成知名度和好口碑。
年轻消费者具有很强的社交属性，同时“捡实惠”在Z世代的消费观念中也占有很大的地位。例如知名购物app“拼多多”成立时间比老牌购物app“淘宝”等要晚很多，但拼多多靠自己的低价实惠战术和社交传播享优惠战术迅速赢得了消费市场，不仅是年长的消费者群体，在年轻的消费者群体中，使用拼多多app的也占相当大的比例。拼多多的低价营销战略和社交传播战略无疑是非常成功的，这为我们新锐天然矿泉水品牌要在线上开展营销活动提供了相当大的借鉴作用。新锐品牌打入市场初期，在价格上让利顾客更多，如果能将价格战术与社交传播战术相结合，将会发挥1+1&gt;2的爆炸式营销效果。
在让利顾客的具体做法上，可以使用“包邮价”这一营销活动，这符合消费者的网购心理研究，消费者在网购时会对包邮活动的产品产生更多的实惠获得感心理。

\subsection&#123;采用具有信息化时代特征与时俱进的营销活动方式&#125;

近年来，随着通信技术的进一步发展，移动设备的进一步普及，流量资费水平的降低，视频类流媒体掀起了信息传播的一场新的革命。线上商品的营销的从简单的文字、到图文并茂的图片、到现在多感官刺激的视频，更新颖的营销方式产生并流行了。Z世代是网络时代的“原住民”，对视频类的营销活动这一新鲜的方式展现出更大的兴趣，我们在调研中发现有很多的年轻消费者相比传统的流量明星代言更受到网络直播带货的影响，这一点对我们进行营销活动有一定的启示。
因此我们认为，适当地开展网络直播带货这一具有信息化时代特征与时俱进的营销活动方式是可行的，能为产品的营销带来较好的效果。
具体网络直播带货的形式可以多样，既可以直接通过购物app正大品牌官方旗舰网店开直播，也可以在抖音、快手、b站之类的视频网站开直播，相比传统的流量明星站台法，虽然流量明星会有一定的号召力，但瞄准的群体更多的是粉丝群体，对于更广大的消费者群体覆盖面是相对有限的。商务主播带货的口播业务能力强，通过直播直接与消费者实时互动情绪感染力强，覆盖面更广，除了头部主播，达成商务的成本也比流量明星低很多。是可行且有效的营销活动方案。

\subsection&#123;适当采用品牌联动营销打法&#125;

天然矿泉水作为一种生活必需品和简单消耗品，本身在品牌上深挖的空间是相对有限的。在调研结果的数据分析中我们也可以得知，年轻消费者在选购天然矿泉水是，相对价格、水源品质等因素，是不那么关注品牌的。那么如何在品牌方面营销吸引到更多的年轻消费者，我们认为，“借力”是一种双赢且有效的方法。
借其他领域品牌的影响力，跨界联动，品牌联动营销也是目前市面上最近一段时间新兴的营销活动，品牌联动会带来消费者更多的关注。例如我们在调研中发现茶饮品牌“喜茶”长期与各种意想不到的领域的品牌进行联动，头部新能源车企“特斯拉”、网络游戏独角兽企业“上海米哈游”、热播影视连续剧“梦华录”、商务办公软件“wps”……都为保持喜茶的营销热度起到了非常大的作用。作为茶饮行业的喜茶，竞争对手多，产品本质与竞争对手难以形成非同质化的差异，和我们的天然矿泉水具有相似性，我们认为可以进行这种“借力”的品牌打法，为新锐品牌赢得更多的关注度，逐渐走进消费者的了解范围中。
年轻的Z世代消费者对新奇的事物更感兴趣，他们热衷于尝试各种异想天开的跨界混搭，品牌联动的营销打法对年轻消费者的吸引力非常强，能够弥补天然矿泉水品牌本身的品牌吸引力有限的客观缺陷。同时，“正大所以润”母公司正大集团作为大型跨国企业以及食品领域的领头羊企业，在商务合作中有大公司品质保障和商业知名度高的优势，合作方会更青睐和有头有名的大公司进行品牌联动营销，因此我们有理由认为“正大所以润”在营销活动中采取一些品牌联动的方式是可行的、效果好的。是可以尝试的办法。
</code></pre>
<p>​	<br>​	%引用：图\ref{fig},式\eqref{eq},表\ref{tab}<br>​	<br>​	\begin{thebibliography}{99}<br>​		\setlength{\parskip}{0.5pt} %段落之间的竖直距离<br>​		\bibitem{ref1}原祎航,基于国潮的兴起浅谈管理品牌资产的重要意义——以花西子品牌为例[.现代销(学苑版）,2021(11):43-45<br>​		\bibitem{ref2} 姚云萍,中华老宇号品牌活化策略研究[D]湖南大学,2019.<br>​		\bibitem{ref3}电商新生态助力经济复苏后疫情时代零售消费洞察报告 2020 年[C].艾瑞咨询系列研究报告（2020 年第 7 期）[出版者不详],2020:129-173.<br>​		\bibitem{ref4}李桂华,胡纪雯,品牌年轻化：老字号如何迎接新世代[J],⾦融博览,2021(05):62-64.<br>​		\bibitem{ref5}Smith, Wendell. (1956).Product Differentiation and Market Segmentation as Alternative Marketing Strategies [M]. Journal of Marketing, 21(July 1956)3-8.<br>​		\bibitem{ref6}Williuam D. Perreault.Jr, JosephP.Cannon, E. JeromeMccarthy. Basic marketing: a marketing.<br>​		\bibitem{ref7}Hauke J, Kossowski T. Comparison of Values of Pearson’s and Spearman’s Correlation Coefficients on the Same Sets of Data[J]. Quaestiones Geographicae, 2011, 30(2):87-93.<br>​		\bibitem{ref8}Arndt S, Turvey C, Andreasen N C. Correlating and predicting psychiatric symptom ratings: Spearmans r versus Kendalls tau correlation[J]. Journal of Psychiatric Research, 1999, 33(2):97-104.<br>​		\bibitem{ref9}Sun Dao-de. Selection of the Linear Regression Model According to the Parameter Estimation[J]. Wuhan University Journal of Natural Sciences, 2000, 5(4):400-405.<br>​		\bibitem{ref10}Barassi M R. Microeconometrics; Methods and Applications by A. Colin Cameron; Pravin K. Trivedi[J]. 2005.<br>​		\bibitem{ref11}威廉H·格林.经济计量分析[M].北京:中国社会科学出版社,1998.<br>​		\bibitem{ref12}张厚粲, 徐建平. 现代心理与教育统计学.第3版[M]. 北京师范大学出版社, 2009.<br>​		\bibitem{ref13}Hosmane B S. Improved likelihood ratio tests and pearson chi-square tests for independence in two dimensional contingency tables[J]. Communications in Statistics, 1986, 15(6):1875-1888.<br>​		\bibitem{ref14}MatthewGoldstein, EdwardWolf, WilliamDillon. On a test of independence for contingency tables[J]. Communications in Statistics, 1976, 5(2):159-169.<br>​	\end{thebibliography}<br>​	<br>​	\appendix<br>​	\section{附录}<br>​	\subsection{问卷}<br>​	\textbf{1.您经常饮用矿泉水吗？[单选题]}<br>​	<br>​	从不<br>​	<br>​	偶尔<br>​	<br>​	经常<br>​	<br>​	\textbf{2.您一般在什么场所购买天然矿泉水？[单选题]}<br>​	<br>​	线下（超市、商场、送水师傅等）<br>​	<br>​	线上<br>​	<br>    \textbf{3.您有长期饮用矿泉水的习惯吗？[单选题]}</p>
<pre><code>有

没有

\textbf&#123;4.线上营销活动影响会影响您选购天然矿泉水吗？[量表题]&#125;

(5分表示影响较大，1分表示影响较小，分值越低表示影响越低)

    \begin&#123;figure&#125;[htbp]
    \centering
    \includegraphics[width=0.6\textwidth]&#123;19.png&#125; 	% 图片相对位置
    \caption&#123;&#125;		% 图片标题 
    \label&#123;Model1 flowchart&#125;							% 图片标签
\end&#123;figure&#125;

\textbf&#123;5.哪些营销活动对您选购天然矿泉水产品影响较大[矩阵量表题]&#125;

\begin&#123;figure&#125;[htbp]
    \centering
    \includegraphics[width=0.5\textwidth]&#123;20.png&#125; 	% 图片相对位置
    \caption&#123;&#125;		% 图片标题 
    \label&#123;Model1 flowchart&#125;							% 图片标签
\end&#123;figure&#125;

\textbf&#123;6.线上购买天然矿泉水时最注重的因素是什么？[多选题]&#125;

价格

品牌

水源品质

包装美观

产品所带来的其他价值:

\textbf&#123;7.您听说过“正大所以润”吗？[单选题]&#125;

是

否

\textbf&#123;8.您的年龄[单选题]&#125;

17-19

20-21

22-23

\textbf&#123;9.您的性别[单选题]&#125;

男

女

\textbf&#123;10.您的年收入情况[单选题](人民币\ 元\ 年)&#125;

我是学生，暂无稳定收入

低于50000

50000-99999

100000-149999

150000-199999

200000-299999

300000及以上
</code></pre>
<p>​	<br>​	\textbf{备注：}为了更好反映消费者选购天然矿泉水的情况，更加符合问卷填写的逻辑。问卷增加了逻辑设置。分为A、B卷，AB卷的识别通过第一题来判断，选择“从不”的受访者完成A卷，选择“偶尔”、“经常”的受访者完成B卷。<br>​	<br>​	A卷包含1、4、5、7、8、9、10题，B卷包括全部题。</p>
<p>\end{document}</p>
]]></content>
      <categories>
        <category>一些工具的学习</category>
      </categories>
      <tags>
        <tag>Latex</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/08/19/%E4%B8%80%E7%82%B9%E6%84%9F%E5%8F%97/</url>
    <content><![CDATA[<p>有些东西果然有人需要才会写写（乐)</p>
<p>（但是某人大学这两年一直在为了保研”卷“，所以写的东西可能都会涉及到保研这个词&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;上西电上的）。</p>
<p>书院制：大一开学分实验班博弈，大一下学期网安实验班博弈，大一结束升大二分流要博弈，大二结束升大三转专业接着博弈。</p>
<p>其实大部分最后为的都是一个保研名额罢了。</p>
<p>反正已经在西电住了两年了，自认为最大的感受：选择大于努力（所以上述几个阶段才会被称为博弈）</p>
<p>作为西电的第二批书院制的人，21级自认为有了20级的参考和血的教训，然后按照自己的想法选择了自己的专业，（但是最后平均情况跟往年比其实大差不差，只是大类的前多少名在为了rank能够更高博弈罢了）。</p>
<p>但是也可以选择去一个小专业，也不是说小专业差，但是分流结果来看，大部分的小专业相比于卷的专业来说，生活不可谓不滋润（指获得保研资格的难度）。</p>
<p>先说分流吧：</p>
<p>大一分流会按照所有必修成绩的均分以及莫名奇妙的综测分直接相加的分数排名作为分流的依据。分流可以进入三个学院：计科院，智能院，网信院，后面细说</p>
<p>（某人最后去了网信院）</p>
<p>其实具体实际的想分流去什么专业是在大一最后快结束的一个月，然后这一个月里又要期末，又要比赛，又要想分流，又要提前把综测材料找好。总之——“充实”（上西电上的）。</p>
<p>因为最后去了网信院，然后也并没有参加那些学院的宣讲，在这里就讲一下当时分流的心路历程：</p>
<p>一开学认识的所有大二学长，在问他们关于分流的问题时，都会提到一个点：20级的计科惨不忍睹。</p>
<p>但是作为一个还没有被拷打过的新生，哪里知道这个惨不忍睹是个什么情况，所以还是相信自己，就一定要去计科卷（后来想了想，疑问就来了，我当时是完全没有依据的凭空想象，我的第一反应就是计科，后来我把这个想法归之为大学之前的所有想法以及对于西电的评价，因为可能来西电就是怼着西电计科来的）。</p>
<p>后来就逐渐开始思考一些有依据的东西，比如各个学院的课程设置以及充分发挥自己的优势。</p>
<p>课程设置方面，目前根据我的了解：</p>
<p>大二：计科院跟网信院一样当狗，智能院快乐生活</p>
<p>（注：当狗指课程的难度以及课程的内卷程度以及实验的数量和难度）</p>
<p>亲测网信院大二下（42个实验34个实验报告历历在目，甚至在期末考完之后还有两份报告没写，泪目了）</p>
<p>因为实验室里有好多计科的，个人体验：和我一样当狗。。。。。实验多课也多。</p>
<p>然后就到了自己选择专业的时候：</p>
<p>第一：了解到网信的英语不计入保研科目</p>
<p>第二：了解到网信没有电路模电之类的有关于“电”的科目（某人在这方面特别抗拒学习）</p>
<p>第三：网信的数学相关科目会稍微多（数学好可能会有优势）（事实证明没有什么用）。</p>
<p>第四：网信的课表（课好少啊）<br>综上所述：毅然决然去了网信院</p>
<p>分流结果：20级卷的专业21级仍然卷，只是20级计科的离谱在21级稍微缓和了一点，但是仍然一马当先。</p>
<p>草：好像把智能院忘了：呃呃呃，从头到尾就没有考虑过智能院，因为课程设置太离谱了（后面再说）。所以只在计科和网信做了选择。</p>
<p>学的内容：计科和网信学的主要科目在大二貌似没有什么差距，除了那特别水的数学基础。</p>
<p>计科具体学习内容不清楚</p>
<p>网信大二：寄组，os，全是黑书，划重点，</p>
<p>​	黑书，看不懂学不完，根本看不完，根本看不完，根本看不完，字小行密，并且翻译是依托。想看懂还是得王道。（并且只能机组只能讲完一半，压力小一点）	os直接快把整本黑书给结束了，要是能学会直接飞升了。</p>
<p>​	但是：这门课只有两个学分，就很搞，付出大把时间复习2学分，还学不会。</p>
<p>​	数据结构：学的明显比计科浅，信号学的也浅（但是今年考的最难），</p>
<p>​	实验：上面已经说了，说起来都是泪。</p>
<h5 id="计科课程：我觉得除了课多实验多卷王多大佬多女生多，课程设置还是挺好的（除了模电）。"><a href="#计科课程：我觉得除了课多实验多卷王多大佬多女生多，课程设置还是挺好的（除了模电）。" class="headerlink" title="计科课程：我觉得除了课多实验多卷王多大佬多女生多，课程设置还是挺好的（除了模电）。"></a>计科课程：我觉得除了课多实验多卷王多大佬多女生多，课程设置还是挺好的（除了模电）。</h5><h5 id="智能：此处绝非诋毁，机组学的内容很少，考的简单，电路学的内容比计科浅好多，还有一些莫名其妙的课程：脑科学（学生物），以及接近4学分的人智概论（这课就是依托）。然后os是选修，计网直接不学（我也不知道不学-os和计网-对一个计算机人来说真的合理吗）"><a href="#智能：此处绝非诋毁，机组学的内容很少，考的简单，电路学的内容比计科浅好多，还有一些莫名其妙的课程：脑科学（学生物），以及接近4学分的人智概论（这课就是依托）。然后os是选修，计网直接不学（我也不知道不学-os和计网-对一个计算机人来说真的合理吗）" class="headerlink" title="智能：此处绝非诋毁，机组学的内容很少，考的简单，电路学的内容比计科浅好多，还有一些莫名其妙的课程：脑科学（学生物），以及接近4学分的人智概论（这课就是依托）。然后os是选修，计网直接不学（我也不知道不学 os和计网 对一个计算机人来说真的合理吗）"></a>智能：此处绝非诋毁，机组学的内容很少，考的简单，电路学的内容比计科浅好多，还有一些莫名其妙的课程：脑科学（学生物），以及接近4学分的人智概论（这课就是依托）。然后os是选修，计网直接不学（我也不知道不学 os和计网 对一个计算机人来说真的合理吗）</h5><p>但是智能有一个好处：人多且摆，你可以滋润的（相比计科和信安来说，21级的信安个人认为快赶上计科了）获得一个好看的rank去保研。</p>
<p>因为坚定了自己的转业，所以完全没有考虑转专业的事情。</p>
<p>相关的政策大概是：</p>
<p>大二结束教务处会让学院公布前两年的一个分数排名：这个排名应该是算了前两年的所有必修，然后这之前会公布转专业的要求：21级网信院是排名10%以内或者突出特长。 在这之后在规定时间内在西电一站式服务大厅提交转专业申请，符合要求即可参加转专业的面试，这个面试（据说有的院很水，有的院很玄学）。然后几天后会公布转专业成功的名单。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/09/04/%E3%80%8A%E8%BF%99%E5%B0%B1%E6%98%AF%E4%B8%AD%E5%9B%BD%E3%80%8B%EF%BC%9A%E8%B6%85%E5%A4%A7%E4%BA%BA%E5%8F%A3%E8%A7%84%E6%A8%A1%E7%9A%84%E7%8E%B0%E4%BB%A3%E5%8C%96/</url>
    <content><![CDATA[<p>《这就是中国》：超大人口规模的现代化 学习笔记</p>
<p>学习笔记：规模与国家发展的关系</p>
<ol>
<li>规模与国家发展的关系：<ul>
<li>规模是国家成功发展的一个重要因素，但也可能引发内在矛盾。</li>
<li>中国式现代化强调人口规模巨大的现代化，这需要理解中国政治历史逻辑。</li>
<li>西方式现代化通常发生在小规模国家，如古希腊城邦和封建小王国。</li>
</ul>
</li>
<li>小国的特点：<ul>
<li>小国之间的频繁战争有助于技术、制度和文化创新。</li>
<li>我们的火药传入欧洲提高了战争强度，催生了现代科学。</li>
<li>欧洲国家的战争能力提升后，开始扩张殖民，积累财富，启动工业化进程。</li>
</ul>
</li>
<li>小国面临的问题：<ul>
<li>战争频仍导致债务积累，最终受国际金融资本控制。</li>
<li>西方式现代化伴随战争、殖民、剥削、压迫和经济金融危机。</li>
</ul>
</li>
<li>中国的独特之处：<ul>
<li>中国从古代起就是大规模文明，通过民族融合、政治制度和文化创新实现和维护大一统。</li>
<li>中国式现代化解决了规模与现代化的矛盾。</li>
</ul>
</li>
<li>中国政治历史的发展：<ul>
<li>周代通过宗法制度和封建制度维持大一统。</li>
<li>秦制实现了人民平等，但是失于生硬，后汉时期对其加以完善。</li>
<li>儒家思想独尊，解决了思想多元化问题。</li>
<li>中国共产党实现了有机的大一统，代表人民的整体利益。</li>
</ul>
</li>
<li>中国共产党的贡献：<ul>
<li>中国共产党通过组织构建人民和国家的血肉联系，解决了规模和秩序的矛盾。</li>
<li>党的长期性和连续性保障了中国现代化事业的延续性。</li>
<li>中国共产党提出了人民民主和自我革命来解决历史周期律问题。</li>
</ul>
</li>
<li>统一性与多样性的统一：<ul>
<li>中国共产党通过民主集中、统一战线、群众路线等方式解决了统一性和多样性的问题。</li>
<li>在人口规模巨大的国家，保持制度不僵化、权力不腐败、阶层不固化、社会不动荡、人民不分裂、文化不堕落是关键。</li>
</ul>
</li>
<li>结论：<ul>
<li>中国共产党的领导在解决规模与现代化的矛盾方面发挥了重要作用，奠定了中国“人口规模巨大的现代化”的基础。</li>
</ul>
</li>
</ol>
<ul>
<li>中国式现代化的背景：中国拥有巨大的人口规模，这使得实现现代化与西方一些人口规模小的国家实现现代化存在明显差异。中国式现代化挑战在于如何协调和管理庞大的人口资源。</li>
<li>中国的人口规模与历史对比：中国崛起的时代背景与十九世纪欧洲国家、二十世纪美国和日本不同。中国具有十亿级别的人口规模，与过去崛起的国家相比，数量级别不同。</li>
<li>中国式现代化的制度安排：中国采用了一整套制度安排来应对规模庞大的挑战。改革开放始于特区，进行试点，以确保规模大、风险高的改革具有可控性。另一策略是让一部分地区先富起来，带动其他地区发展，以实现整体现代化。</li>
<li>中国与西方现代化模式的不同：中国式现代化与西方式现代化不同之处在于中国模式更注重社会秩序、国家稳定，以及综合考虑国情和民情。西方式现代化更强调赢者通吃，而中国要协调各方面的利益。</li>
<li>中国式现代化的民情与国情：中国注重社会秩序和稳定，这是中国文化下的传统价值观的体现。与西方强调言论自由不同，中国更看重秩序和稳定，以确保社会正常运转。</li>
<li>中国的政治制度：中国政治制度不仅为现有人民负责，还为未来的子孙后代负责，具有超长时间感。这与中国式现代化的核心理念，以人民为中心，从摇篮到坟墓，关注人的整个生命周期的发展有关。</li>
<li>人口高质量发展：中国提出人口高质量发展的概念，强调提供高品质的生活和发展，以拉动产业发展。这不仅涉及人口自身的提升，还包括提供高品质的生活条件。</li>
<li>城乡结构和人口特征：中国的人口结构复杂，涉及城乡结构、年龄结构、收入结构等多个方面。中国政府通过其制度优势，能够有效地调节这些结构，实现全面脱贫攻坚等政策。</li>
<li>信任与中国共产党：中国共产党的领导力量和长期实践让人民深刻信任党的初心和实践。对口援建等做法加强了不同地区之间的合作和共同发展。</li>
</ul>
<ol>
<li>人口规模巨大与中国式现代化：<ul>
<li>中国的人口规模巨大，是中国式现代化的一个重要特点。</li>
<li>中国式现代化与西方式现代化不同，因为中国拥有十几亿人口，这在规模上与西方国家有着巨大差异。</li>
<li>中国式现代化的关键在于制度安排，包括特区试验、分阶段发展等，以适应庞大的国家体量。</li>
</ul>
</li>
<li>秩序与现代化：<ul>
<li>秩序问题在人口规模巨大的国家尤为重要，中国共产党成功地平衡了秩序问题，使中国的现代化进程更加顺利。</li>
<li>秩序包括社会稳定、国家稳定、有预期的发展和中长期规划等因素。</li>
</ul>
</li>
<li>中国式现代化与西方式现代化的区别：<ul>
<li>中国式现代化是超大规模现代化，结合了古老文明与现代文明。</li>
<li>中国的现代化需要考虑更广泛的民情、国情，以及民众的诉求和利益。</li>
<li>中国政府在协调不同地区、不同利益之间具有关键作用，保持社会的稳定和公平。</li>
</ul>
</li>
<li>人口高质量发展与中国式现代化：<ul>
<li>人口高质量发展是中国式现代化的一部分，涵盖了为人民提供高品质生活的目标。</li>
<li>这一发展理念是以人民为中心，包括从出生到晚年的生命周期内提供服务和提高生活质量。</li>
</ul>
</li>
<li>人口红利与高素质人口：<ul>
<li>人口红利不仅与绝对人口规模有关，还与人口的高素质有关，中国需要高素质的人口红利。</li>
<li>通过教育和培训，中国可以提高人口的素质，实现更高质量的人口发展。</li>
</ul>
</li>
<li>阶级固化问题：<ul>
<li>阶级固化在任何社会都是一种常态，但中国具有公平调节机制，如高考制度，可以促进社会公平。</li>
<li>中国的社会结构相对动态，允许个人通过奋斗改变命运。</li>
<li>具有公平意识的中国文化和中国共产党的领导使得社会能够纠偏，解决阶级固化问题。</li>
</ul>
</li>
<li>中国的优势和机会：<ul>
<li>中国为有准备的人提供了大量机会，自助者天助之，努力是最重要的。</li>
<li>中国的机会多样且广泛，只要个人有能力和努力，就能获得支持和认可。</li>
</ul>
</li>
</ol>
<h4 id="思维导图如下"><a href="#思维导图如下" class="headerlink" title="思维导图如下"></a>思维导图如下</h4><img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230904212558714.png" alt="image-20230904212558714" style="zoom: 80%;" />



]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/11/17/%E4%BD%9C%E5%93%81%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p>作品概述：</p>
<p>背景：</p>
<p>提出问题：</p>
<p>能够防止这种问题：</p>
<p>将psi，高成本哈希，系统：，设计了两个版本：</p>
<p>我们的设计方案如下：</p>
<p>图：</p>
<p>（要不要详细讲解这个设计方案）</p>
<p>作品设计与实现：</p>
<p>首先我们的模型框架如下：</p>
<p>讲一下这个框架：</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/09/13/%E4%BA%BA%E7%94%9F%E6%B5%B7%E6%B5%B7%E8%AF%BB%E4%B9%A6%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>信号3</title>
    <url>/2023/06/02/%E4%BF%A1%E5%8F%B73/</url>
    <content><![CDATA[<h1 id="西安电子科技大学"><a href="#西安电子科技大学" class="headerlink" title="西安电子科技大学"></a>西安电子科技大学</h1><h3 id="信-号-与-系-统实验报告"><a href="#信-号-与-系-统实验报告" class="headerlink" title="信 号 与 系 统实验报告"></a>信 号 与 系 统实验报告</h3><h5 id="2023年6月2日"><a href="#2023年6月2日" class="headerlink" title="2023年6月2日"></a>2023年6月2日</h5><h4 id="一、实验题目：信号与系统实验三"><a href="#一、实验题目：信号与系统实验三" class="headerlink" title="一、实验题目：信号与系统实验三"></a>一、实验题目：信号与系统实验三</h4><span id="more"></span>

<h4 id="二、实验摘要"><a href="#二、实验摘要" class="headerlink" title="二、实验摘要"></a>二、实验摘要</h4><h5 id="lt-1-gt-题目一利用matlab的fourier函数和ifourier函数直接将给出的函数带入分别计算傅里叶变换和傅里叶反变换，画出变换之后的函数图像。"><a href="#lt-1-gt-题目一利用matlab的fourier函数和ifourier函数直接将给出的函数带入分别计算傅里叶变换和傅里叶反变换，画出变换之后的函数图像。" class="headerlink" title="&lt;1&gt;题目一利用matlab的fourier函数和ifourier函数直接将给出的函数带入分别计算傅里叶变换和傅里叶反变换，画出变换之后的函数图像。"></a>&lt;1&gt;题目一利用matlab的fourier函数和ifourier函数直接将给出的函数带入分别计算傅里叶变换和傅里叶反变换，画出变换之后的函数图像。</h5><h5 id="lt-2-gt-题目中给出了两个时域函数，对这个函数进行傅里叶变换，画出其幅度谱和相位谱的图像。通过二者图像的对比，探究傅里叶变换的时移性质。"><a href="#lt-2-gt-题目中给出了两个时域函数，对这个函数进行傅里叶变换，画出其幅度谱和相位谱的图像。通过二者图像的对比，探究傅里叶变换的时移性质。" class="headerlink" title="&lt;2&gt;题目中给出了两个时域函数，对这个函数进行傅里叶变换，画出其幅度谱和相位谱的图像。通过二者图像的对比，探究傅里叶变换的时移性质。"></a>&lt;2&gt;题目中给出了两个时域函数，对这个函数进行傅里叶变换，画出其幅度谱和相位谱的图像。通过二者图像的对比，探究傅里叶变换的时移性质。</h5><h5 id="lt-3-gt-此时我们需要求出两个函数以及这两个函数的乘积的傅里叶变换，直接将其带入傅里叶变换函数即可求出，abs函数得到变换后的幅度大小，angle函数可以得到变换后的相位的大小。"><a href="#lt-3-gt-此时我们需要求出两个函数以及这两个函数的乘积的傅里叶变换，直接将其带入傅里叶变换函数即可求出，abs函数得到变换后的幅度大小，angle函数可以得到变换后的相位的大小。" class="headerlink" title="&lt;3&gt;此时我们需要求出两个函数以及这两个函数的乘积的傅里叶变换，直接将其带入傅里叶变换函数即可求出，abs函数得到变换后的幅度大小，angle函数可以得到变换后的相位的大小。"></a>&lt;3&gt;此时我们需要求出两个函数以及这两个函数的乘积的傅里叶变换，直接将其带入傅里叶变换函数即可求出，abs函数得到变换后的幅度大小，angle函数可以得到变换后的相位的大小。</h5><h5 id="lt-4-gt-本题目是最难的一个题目，首先调用logspace函数对w的频率进行划分（由于频率的范围较大，我们需要对频率左边画成对数形式），然后通过矩阵的计算得到每一个w下对应的复数，接着分别调用abs函数和angle函数计算出频谱密度的幅度谱和相位谱，对n取2，3，4，5，画出图像进行比较观察。"><a href="#lt-4-gt-本题目是最难的一个题目，首先调用logspace函数对w的频率进行划分（由于频率的范围较大，我们需要对频率左边画成对数形式），然后通过矩阵的计算得到每一个w下对应的复数，接着分别调用abs函数和angle函数计算出频谱密度的幅度谱和相位谱，对n取2，3，4，5，画出图像进行比较观察。" class="headerlink" title="&lt;4&gt;本题目是最难的一个题目，首先调用logspace函数对w的频率进行划分（由于频率的范围较大，我们需要对频率左边画成对数形式），然后通过矩阵的计算得到每一个w下对应的复数，接着分别调用abs函数和angle函数计算出频谱密度的幅度谱和相位谱，对n取2，3，4，5，画出图像进行比较观察。"></a>&lt;4&gt;本题目是最难的一个题目，首先调用logspace函数对w的频率进行划分（由于频率的范围较大，我们需要对频率左边画成对数形式），然后通过矩阵的计算得到每一个w下对应的复数，接着分别调用abs函数和angle函数计算出频谱密度的幅度谱和相位谱，对n取2，3，4，5，画出图像进行比较观察。</h5><h4 id="三、题目描述"><a href="#三、题目描述" class="headerlink" title="三、题目描述"></a>三、题目描述</h4><h5 id="lt-1-gt-题目一要求对给定原函数，调用matlab中的函数计算其傅里叶变换。给定频谱函数计算其傅里叶逆变换。"><a href="#lt-1-gt-题目一要求对给定原函数，调用matlab中的函数计算其傅里叶变换。给定频谱函数计算其傅里叶逆变换。" class="headerlink" title="&lt;1&gt;题目一要求对给定原函数，调用matlab中的函数计算其傅里叶变换。给定频谱函数计算其傅里叶逆变换。"></a>&lt;1&gt;题目一要求对给定原函数，调用matlab中的函数计算其傅里叶变换。给定频谱函数计算其傅里叶逆变换。</h5><h5 id="lt-2-gt-题目二要求-求出一个函数以及该函数时移一个单位后的函数的傅里叶变换，对变换后的图像进行比较，分析时移规律。"><a href="#lt-2-gt-题目二要求-求出一个函数以及该函数时移一个单位后的函数的傅里叶变换，对变换后的图像进行比较，分析时移规律。" class="headerlink" title="&lt;2&gt;题目二要求 求出一个函数以及该函数时移一个单位后的函数的傅里叶变换，对变换后的图像进行比较，分析时移规律。"></a>&lt;2&gt;题目二要求 求出一个函数以及该函数时移一个单位后的函数的傅里叶变换，对变换后的图像进行比较，分析时移规律。</h5><h5 id="lt-3-gt-题目三要求-求出两个函数以及这两个函数的乘积的傅里叶变换，并将图像进行比较分析。"><a href="#lt-3-gt-题目三要求-求出两个函数以及这两个函数的乘积的傅里叶变换，并将图像进行比较分析。" class="headerlink" title="&lt;3&gt;题目三要求 求出两个函数以及这两个函数的乘积的傅里叶变换，并将图像进行比较分析。"></a>&lt;3&gt;题目三要求 求出两个函数以及这两个函数的乘积的傅里叶变换，并将图像进行比较分析。</h5><h5 id="lt-4-gt-题目四要求-对于已经给定的滤波器的模和截止频率，求出此滤波器的幅度谱和相位谱，同时n取2，3，4，5，对这些图像的特性进行分析。"><a href="#lt-4-gt-题目四要求-对于已经给定的滤波器的模和截止频率，求出此滤波器的幅度谱和相位谱，同时n取2，3，4，5，对这些图像的特性进行分析。" class="headerlink" title="&lt;4&gt;题目四要求 对于已经给定的滤波器的模和截止频率，求出此滤波器的幅度谱和相位谱，同时n取2，3，4，5，对这些图像的特性进行分析。"></a>&lt;4&gt;题目四要求 对于已经给定的滤波器的模和截止频率，求出此滤波器的幅度谱和相位谱，同时n取2，3，4，5，对这些图像的特性进行分析。</h5><h4 id="四、实验内容"><a href="#四、实验内容" class="headerlink" title="四、实验内容"></a>四、实验内容</h4><h5 id="题目一："><a href="#题目一：" class="headerlink" title="题目一："></a>题目一：</h5><h5 id="实验过程："><a href="#实验过程：" class="headerlink" title="实验过程："></a>实验过程：</h5><h5 id="利用matlab的fourier函数和ifourier函数直接将给出的函数带入分别计算傅里叶变换和傅里叶反变换，画出变换之后的函数图像。"><a href="#利用matlab的fourier函数和ifourier函数直接将给出的函数带入分别计算傅里叶变换和傅里叶反变换，画出变换之后的函数图像。" class="headerlink" title="利用matlab的fourier函数和ifourier函数直接将给出的函数带入分别计算傅里叶变换和傅里叶反变换，画出变换之后的函数图像。"></a>利用matlab的fourier函数和ifourier函数直接将给出的函数带入分别计算傅里叶变换和傅里叶反变换，画出变换之后的函数图像。</h5><h5 id="但是这次用的图像函数为fplot函数，目的是以代码开头设置的t和w未知量为自变量直接画出图像。"><a href="#但是这次用的图像函数为fplot函数，目的是以代码开头设置的t和w未知量为自变量直接画出图像。" class="headerlink" title="但是这次用的图像函数为fplot函数，目的是以代码开头设置的t和w未知量为自变量直接画出图像。"></a>但是这次用的图像函数为fplot函数，目的是以代码开头设置的t和w未知量为自变量直接画出图像。</h5><h5 id="实验结果："><a href="#实验结果：" class="headerlink" title="实验结果："></a>实验结果：</h5><img src="C:\Z.Sagapo\myblog\source\_posts\信号3\f12.png" alt="f12" style="zoom:80%;" />

<img src="C:\Z.Sagapo\myblog\source\_posts\信号3\f13.png" alt="f13" style="zoom:80%;" />

<h5 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">syms t w;</span><br><span class="line">f = <span class="built_in">exp</span>(<span class="number">-2</span>*<span class="built_in">abs</span>(t));</span><br><span class="line">y1 = fourier(f);</span><br><span class="line">y = <span class="number">1</span>/(<span class="number">1</span>+w^<span class="number">2</span>);</span><br><span class="line">y2 = ifourier(y);</span><br><span class="line"></span><br><span class="line"><span class="comment">%fplot(y1);</span></span><br><span class="line">grid on;</span><br><span class="line"></span><br><span class="line">fplot(y2);</span><br><span class="line">grid on;</span><br><span class="line">axis([<span class="number">-6</span> <span class="number">6</span> <span class="number">-0.05</span> <span class="number">0.55</span>])</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="题目二："><a href="#题目二：" class="headerlink" title="题目二："></a>题目二：</h5><h5 id="实验过程：-1"><a href="#实验过程：-1" class="headerlink" title="实验过程："></a>实验过程：</h5><h5 id="题目中给出了两个时域函数，对这个函数进行傅里叶变换，画出其幅度谱和相位谱的图像。通过二者图像的对比，探究傅里叶变换的时移性质。其中分别求幅度大小和相位大小是，调用了abs函数和angle函数。并且阶跃函数有heaviside函数直接构造出来。"><a href="#题目中给出了两个时域函数，对这个函数进行傅里叶变换，画出其幅度谱和相位谱的图像。通过二者图像的对比，探究傅里叶变换的时移性质。其中分别求幅度大小和相位大小是，调用了abs函数和angle函数。并且阶跃函数有heaviside函数直接构造出来。" class="headerlink" title="题目中给出了两个时域函数，对这个函数进行傅里叶变换，画出其幅度谱和相位谱的图像。通过二者图像的对比，探究傅里叶变换的时移性质。其中分别求幅度大小和相位大小是，调用了abs函数和angle函数。并且阶跃函数有heaviside函数直接构造出来。"></a>题目中给出了两个时域函数，对这个函数进行傅里叶变换，画出其幅度谱和相位谱的图像。通过二者图像的对比，探究傅里叶变换的时移性质。其中分别求幅度大小和相位大小是，调用了abs函数和angle函数。并且阶跃函数有heaviside函数直接构造出来。</h5><h5 id="实验结果：-1"><a href="#实验结果：-1" class="headerlink" title="实验结果："></a>实验结果：</h5><h5 id="根据理论和图像可以得出，傅里叶变换时移性对函数幅度谱不会产生变化，而相位谱则会发生变化。"><a href="#根据理论和图像可以得出，傅里叶变换时移性对函数幅度谱不会产生变化，而相位谱则会发生变化。" class="headerlink" title="根据理论和图像可以得出，傅里叶变换时移性对函数幅度谱不会产生变化，而相位谱则会发生变化。"></a>根据理论和图像可以得出，傅里叶变换时移性对函数幅度谱不会产生变化，而相位谱则会发生变化。</h5><h5 id="对信号进行时移会导致相位谱在频域上发生线性的变化。这是因为时移实际上是将信号的每个频率成分在时间上移动相同的量。"><a href="#对信号进行时移会导致相位谱在频域上发生线性的变化。这是因为时移实际上是将信号的每个频率成分在时间上移动相同的量。" class="headerlink" title="对信号进行时移会导致相位谱在频域上发生线性的变化。这是因为时移实际上是将信号的每个频率成分在时间上移动相同的量。"></a>对信号进行时移会导致相位谱在频域上发生线性的变化。这是因为时移实际上是将信号的每个频率成分在时间上移动相同的量。</h5><img src="C:\Z.Sagapo\myblog\source\_posts\信号3\f21_1-168930221852510.png" alt="f21_1" style="zoom:80%;" />

<img src="C:\Z.Sagapo\myblog\source\_posts\信号3\f22.png" alt="f22" style="zoom:80%;" />

<h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">syms t w; </span><br><span class="line">y1 = (<span class="number">1</span>/<span class="number">2</span>)*<span class="built_in">exp</span>(<span class="number">-2</span>*t)*heaviside(t);</span><br><span class="line">y2 = (<span class="number">1</span>/<span class="number">2</span>)*<span class="built_in">exp</span>(<span class="number">-2</span>*(t<span class="number">-1</span>))*heaviside(t<span class="number">-1</span>);</span><br><span class="line">outy1 = fourier(y1);</span><br><span class="line">outy2 = fourier(y2);</span><br><span class="line"></span><br><span class="line">fplot(outy1);</span><br><span class="line">fplot(outy2);</span><br><span class="line"></span><br><span class="line">fudu1 = <span class="built_in">abs</span>(outy1);</span><br><span class="line">fudu2 = <span class="built_in">abs</span>(outy2);</span><br><span class="line"></span><br><span class="line">xiang1 = <span class="built_in">angle</span>(outy1);</span><br><span class="line">xiang2 = <span class="built_in">angle</span>(outy2);</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">fplot(fudu1);</span><br><span class="line">grid on;</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;幅度谱&#x27;</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">fplot(xiang1);</span><br><span class="line">grid on;</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;相位谱&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="题目三："><a href="#题目三：" class="headerlink" title="题目三："></a>题目三：</h5><h5 id="实验过程：-2"><a href="#实验过程：-2" class="headerlink" title="实验过程："></a>实验过程：</h5><h5 id="求出两个函数以及这两个函数的乘积的傅里叶变换，直接将其带入傅里叶变换函数即可求出，abs函数得到变换后的幅度大小，angle函数可以得到变换后的相位的大小。"><a href="#求出两个函数以及这两个函数的乘积的傅里叶变换，直接将其带入傅里叶变换函数即可求出，abs函数得到变换后的幅度大小，angle函数可以得到变换后的相位的大小。" class="headerlink" title="求出两个函数以及这两个函数的乘积的傅里叶变换，直接将其带入傅里叶变换函数即可求出，abs函数得到变换后的幅度大小，angle函数可以得到变换后的相位的大小。"></a>求出两个函数以及这两个函数的乘积的傅里叶变换，直接将其带入傅里叶变换函数即可求出，abs函数得到变换后的幅度大小，angle函数可以得到变换后的相位的大小。</h5><h5 id="实验结果：设函数f-t-的傅里叶变换为F-ω-，幅度谱为-F-ω-，相位谱为ϕ-ω-。同样，函数g-t-的傅里叶变换为G-ω-，幅度谱为-G-ω-，相位谱为φ-ω-。"><a href="#实验结果：设函数f-t-的傅里叶变换为F-ω-，幅度谱为-F-ω-，相位谱为ϕ-ω-。同样，函数g-t-的傅里叶变换为G-ω-，幅度谱为-G-ω-，相位谱为φ-ω-。" class="headerlink" title="实验结果：设函数f(t)的傅里叶变换为F(ω)，幅度谱为|F(ω)|，相位谱为ϕ(ω)。同样，函数g(t)的傅里叶变换为G(ω)，幅度谱为|G(ω)|，相位谱为φ(ω)。"></a>实验结果：设函数f(t)的傅里叶变换为F(ω)，幅度谱为|F(ω)|，相位谱为ϕ(ω)。同样，函数g(t)的傅里叶变换为G(ω)，幅度谱为|G(ω)|，相位谱为φ(ω)。</h5><h5 id="那么，两个函数的乘积h-t-x3D-f-t-g-t-的傅里叶变换的幅度谱为："><a href="#那么，两个函数的乘积h-t-x3D-f-t-g-t-的傅里叶变换的幅度谱为：" class="headerlink" title="那么，两个函数的乘积h(t) &#x3D; f(t) * g(t)的傅里叶变换的幅度谱为："></a>那么，两个函数的乘积h(t) &#x3D; f(t) * g(t)的傅里叶变换的幅度谱为：</h5><p>$$<br>|H(ω)| &#x3D; |F(ω)| * |G(ω)|<br>$$</p>
<h5 id="即乘积的幅度谱等于两个函数的幅度谱的点乘。"><a href="#即乘积的幅度谱等于两个函数的幅度谱的点乘。" class="headerlink" title="即乘积的幅度谱等于两个函数的幅度谱的点乘。"></a>即乘积的幅度谱等于两个函数的幅度谱的点乘。</h5><h5 id="而相位谱的情况稍微复杂一些。两个函数的乘积的相位谱可以表示为："><a href="#而相位谱的情况稍微复杂一些。两个函数的乘积的相位谱可以表示为：" class="headerlink" title="而相位谱的情况稍微复杂一些。两个函数的乘积的相位谱可以表示为："></a>而相位谱的情况稍微复杂一些。两个函数的乘积的相位谱可以表示为：</h5><p>$$<br>ϕ_h(ω) &#x3D; ϕ_f(ω) + ϕ_g(ω)<br>$$</p>
<h5 id="即乘积的相位谱等于两个函数的相位谱的点相加。"><a href="#即乘积的相位谱等于两个函数的相位谱的点相加。" class="headerlink" title="即乘积的相位谱等于两个函数的相位谱的点相加。"></a>即乘积的相位谱等于两个函数的相位谱的点相加。</h5><h5 id="这意味着乘积的幅度谱是原始函数幅度谱的乘积，而相位谱是原始函数相位谱的简单相加。"><a href="#这意味着乘积的幅度谱是原始函数幅度谱的乘积，而相位谱是原始函数相位谱的简单相加。" class="headerlink" title="这意味着乘积的幅度谱是原始函数幅度谱的乘积，而相位谱是原始函数相位谱的简单相加。"></a>这意味着乘积的幅度谱是原始函数幅度谱的乘积，而相位谱是原始函数相位谱的简单相加。</h5><h5 id="需要注意的是，以上的关系是在频域上的。在时域上进行函数的乘积会导致频域上的卷积操作，从而改变函数的幅度谱和相位谱。"><a href="#需要注意的是，以上的关系是在频域上的。在时域上进行函数的乘积会导致频域上的卷积操作，从而改变函数的幅度谱和相位谱。" class="headerlink" title="需要注意的是，以上的关系是在频域上的。在时域上进行函数的乘积会导致频域上的卷积操作，从而改变函数的幅度谱和相位谱。"></a>需要注意的是，以上的关系是在频域上的。在时域上进行函数的乘积会导致频域上的卷积操作，从而改变函数的幅度谱和相位谱。</h5><img src="C:\Z.Sagapo\myblog\source\_posts\信号3\f31.png" alt="f31" style="zoom:80%;" />

<h5 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">syms t w;</span><br><span class="line">w_c = <span class="number">100</span>;</span><br><span class="line">y1 = heaviside(t+<span class="number">2</span>) - heaviside(t<span class="number">-2</span>);</span><br><span class="line">y2 = (<span class="number">1</span>/<span class="number">2</span>)*<span class="built_in">exp</span>(<span class="number">-2</span>*(t<span class="number">-1</span>))*heaviside(t<span class="number">-1</span>);</span><br><span class="line">y3 = y1.*y2;</span><br><span class="line"></span><br><span class="line">y_1 = fourier(y1);</span><br><span class="line">y_2 = fourier(y2);</span><br><span class="line">y_3 = fourier(y3);</span><br><span class="line"></span><br><span class="line">tempy1 = <span class="built_in">abs</span>(y_1);</span><br><span class="line"></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">ezplot(tempy1,[-w_c, w_c, <span class="number">0</span>, <span class="number">4</span>]);</span><br><span class="line">grid on;</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">w = <span class="number">-110</span>:<span class="number">0.01</span>:<span class="number">110</span>;</span><br><span class="line"><span class="built_in">plot</span>(w,<span class="built_in">sign</span>(subs(y_2,w)));</span><br><span class="line">fplot(y_2);</span><br><span class="line">grid on;</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">w = <span class="number">-110</span>:<span class="number">110</span>;</span><br><span class="line">fplot(w,subs(<span class="built_in">abs</span>(y_3)));</span><br><span class="line">grid on;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="题目四："><a href="#题目四：" class="headerlink" title="题目四："></a>题目四：</h5><h5 id="实验过程：-3"><a href="#实验过程：-3" class="headerlink" title="实验过程："></a>实验过程：</h5><h5 id="本题目是最难的一个题目，首先调用logspace函数对w的频率进行划分（由于频率的范围较大，我们需要对频率左边画成对数形式），然后通过矩阵的计算得到每一个w下对应的复数，接着分别调用abs函数和angle函数计算出频谱密度的幅度谱和相位谱，对n取2，3，4，5，画出图像进行比较观察。"><a href="#本题目是最难的一个题目，首先调用logspace函数对w的频率进行划分（由于频率的范围较大，我们需要对频率左边画成对数形式），然后通过矩阵的计算得到每一个w下对应的复数，接着分别调用abs函数和angle函数计算出频谱密度的幅度谱和相位谱，对n取2，3，4，5，画出图像进行比较观察。" class="headerlink" title="本题目是最难的一个题目，首先调用logspace函数对w的频率进行划分（由于频率的范围较大，我们需要对频率左边画成对数形式），然后通过矩阵的计算得到每一个w下对应的复数，接着分别调用abs函数和angle函数计算出频谱密度的幅度谱和相位谱，对n取2，3，4，5，画出图像进行比较观察。"></a>本题目是最难的一个题目，首先调用logspace函数对w的频率进行划分（由于频率的范围较大，我们需要对频率左边画成对数形式），然后通过矩阵的计算得到每一个w下对应的复数，接着分别调用abs函数和angle函数计算出频谱密度的幅度谱和相位谱，对n取2，3，4，5，画出图像进行比较观察。</h5><h5 id="通过结果我们发现："><a href="#通过结果我们发现：" class="headerlink" title="通过结果我们发现："></a>通过结果我们发现：</h5><h5 id="由于阶数-n-的不同，低通巴特沃斯滤波器的幅度谱和相位谱图像会有以下特点："><a href="#由于阶数-n-的不同，低通巴特沃斯滤波器的幅度谱和相位谱图像会有以下特点：" class="headerlink" title="由于阶数 n 的不同，低通巴特沃斯滤波器的幅度谱和相位谱图像会有以下特点："></a>由于阶数 n 的不同，低通巴特沃斯滤波器的幅度谱和相位谱图像会有以下特点：</h5><ol>
<li><h5 id="幅度谱："><a href="#幅度谱：" class="headerlink" title="幅度谱："></a>幅度谱：</h5><ul>
<li><h5 id="阶数-n-的增加会导致滤波器的陷波特性更加明显，即在截止频率附近会出现更大的衰减。"><a href="#阶数-n-的增加会导致滤波器的陷波特性更加明显，即在截止频率附近会出现更大的衰减。" class="headerlink" title="阶数 n 的增加会导致滤波器的陷波特性更加明显，即在截止频率附近会出现更大的衰减。"></a>阶数 n 的增加会导致滤波器的陷波特性更加明显，即在截止频率附近会出现更大的衰减。</h5></li>
<li><h5 id="阶数-n-的增加会使滤波器的幅度谱更陡峭，即从通过频率到截止频率之间的幅度变化更加剧烈。"><a href="#阶数-n-的增加会使滤波器的幅度谱更陡峭，即从通过频率到截止频率之间的幅度变化更加剧烈。" class="headerlink" title="阶数 n 的增加会使滤波器的幅度谱更陡峭，即从通过频率到截止频率之间的幅度变化更加剧烈。"></a>阶数 n 的增加会使滤波器的幅度谱更陡峭，即从通过频率到截止频率之间的幅度变化更加剧烈。</h5></li>
</ul>
</li>
<li><h5 id="相位谱："><a href="#相位谱：" class="headerlink" title="相位谱："></a>相位谱：</h5><ul>
<li><h5 id="阶数-n-的增加不会对滤波器的相位谱产生明显的影响。"><a href="#阶数-n-的增加不会对滤波器的相位谱产生明显的影响。" class="headerlink" title="阶数 n 的增加不会对滤波器的相位谱产生明显的影响。"></a>阶数 n 的增加不会对滤波器的相位谱产生明显的影响。</h5></li>
<li><h5 id="低通巴特沃斯滤波器的相位谱是线性的，没有随频率变化而产生明显的扭曲或畸变。"><a href="#低通巴特沃斯滤波器的相位谱是线性的，没有随频率变化而产生明显的扭曲或畸变。" class="headerlink" title="低通巴特沃斯滤波器的相位谱是线性的，没有随频率变化而产生明显的扭曲或畸变。"></a>低通巴特沃斯滤波器的相位谱是线性的，没有随频率变化而产生明显的扭曲或畸变。</h5></li>
</ul>
</li>
</ol>
<h5 id="综上所述，随着阶数-n-的增加，低通巴特沃斯滤波器的幅度谱图像会更加陡峭，截止频率附近的衰减更明显，而相位谱图像保持线性且不变。因此，阶数-n-对于滤波器的频率响应形状和幅度特性具有显著影响，而对相位特性影响较小。"><a href="#综上所述，随着阶数-n-的增加，低通巴特沃斯滤波器的幅度谱图像会更加陡峭，截止频率附近的衰减更明显，而相位谱图像保持线性且不变。因此，阶数-n-对于滤波器的频率响应形状和幅度特性具有显著影响，而对相位特性影响较小。" class="headerlink" title="综上所述，随着阶数 n 的增加，低通巴特沃斯滤波器的幅度谱图像会更加陡峭，截止频率附近的衰减更明显，而相位谱图像保持线性且不变。因此，阶数 n 对于滤波器的频率响应形状和幅度特性具有显著影响，而对相位特性影响较小。"></a>综上所述，随着阶数 n 的增加，低通巴特沃斯滤波器的幅度谱图像会更加陡峭，截止频率附近的衰减更明显，而相位谱图像保持线性且不变。因此，阶数 n 对于滤波器的频率响应形状和幅度特性具有显著影响，而对相位特性影响较小。</h5><img src="C:\Z.Sagapo\myblog\source\_posts\信号3\f52_2.png" alt="f52_2" style="zoom: 80%;" />

<img src="C:\Z.Sagapo\myblog\source\_posts\信号3\f53.png" alt="f53" style="zoom: 80%;" />

<img src="C:\Z.Sagapo\myblog\source\_posts\信号3\f54.png" alt="f54" style="zoom: 80%;" />

<img src="C:\Z.Sagapo\myblog\source\_posts\信号3\f55.png" alt="f55" style="zoom: 80%;" />



<img src="C:\Z.Sagapo\myblog\source\_posts\信号3\f52.png" alt="f52"  />

<h5 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">wc = <span class="number">600</span>*<span class="built_in">pi</span>;  </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">w = <span class="built_in">logspace</span>(<span class="built_in">log10</span>(<span class="number">1</span>), <span class="built_in">log10</span>(<span class="number">10000</span>), <span class="number">10000</span>);  <span class="comment">% 频率范围</span></span><br><span class="line">n = <span class="number">5</span>;</span><br><span class="line">H = <span class="number">1</span> ./ (<span class="number">1</span> - <span class="number">1</span><span class="built_in">i</span> * (w ./ wc).^n);  <span class="comment">% 幅频函数</span></span><br><span class="line">H_mag = <span class="built_in">abs</span>(H);  <span class="comment">% 幅度谱</span></span><br><span class="line">semilogx(w, H_mag)</span><br><span class="line">xlabel(<span class="string">&#x27;频率 (w)&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;|H(jw)|&#x27;</span>)</span><br><span class="line">title(<span class="string">&#x27;幅度谱&#x27;</span>)</span><br><span class="line">H_phase = <span class="built_in">angle</span>(H);  <span class="comment">% 相位谱</span></span><br><span class="line">grid on;</span><br><span class="line">axis([<span class="number">-0.1</span> <span class="number">10005</span> <span class="number">0</span> <span class="number">1.1</span>]);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;n=5&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="C:\Z.Sagapo\myblog\source\_posts\信号3\f63.png" alt="f63" style="zoom:80%;" />

<img src="C:\Z.Sagapo\myblog\source\_posts\信号3\f64.png" alt="f64" style="zoom:80%;" />

<img src="C:\Z.Sagapo\myblog\source\_posts\信号3\f65.png" alt="f65" style="zoom:80%;" />

<p><img src="C:\Z.Sagapo\myblog\source_posts\信号3\f61.png" alt="f61"></p>
<h5 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">wc = <span class="number">600</span>*<span class="built_in">pi</span>;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">w = <span class="built_in">logspace</span>(<span class="built_in">log10</span>(<span class="number">1</span>), <span class="built_in">log10</span>(<span class="number">10000</span>), <span class="number">10000</span>);  </span><br><span class="line">n = <span class="number">2</span>;    </span><br><span class="line">H = <span class="number">1</span> ./ (<span class="number">1</span> - <span class="number">1</span><span class="built_in">i</span> * (w ./ wc).^n);  </span><br><span class="line"></span><br><span class="line">H_phase = <span class="built_in">angle</span>(H);  </span><br><span class="line"></span><br><span class="line">semilogx(w, H_phase)</span><br><span class="line">xlabel(<span class="string">&#x27;频率 (w)&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;相位 (弧度)&#x27;</span>)</span><br><span class="line">title(<span class="string">&#x27;相位谱&#x27;</span>)</span><br><span class="line">grid on;</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line">n = <span class="number">3</span>;    </span><br><span class="line">H = <span class="number">1</span> ./ (<span class="number">1</span> - <span class="number">1</span><span class="built_in">i</span> * (w ./ wc).^n); </span><br><span class="line"></span><br><span class="line">H_phase = <span class="built_in">angle</span>(H); </span><br><span class="line"></span><br><span class="line">semilogx(w, H_phase)</span><br><span class="line">xlabel(<span class="string">&#x27;频率 (w)&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;相位 (弧度)&#x27;</span>)</span><br><span class="line">title(<span class="string">&#x27;相位谱&#x27;</span>)</span><br><span class="line">grid on;</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line">n = <span class="number">4</span>;     </span><br><span class="line">H = <span class="number">1</span> ./ (<span class="number">1</span> - <span class="number">1</span><span class="built_in">i</span> * (w ./ wc).^n);  </span><br><span class="line"></span><br><span class="line">H_phase = <span class="built_in">angle</span>(H);  </span><br><span class="line"></span><br><span class="line">semilogx(w, H_phase)</span><br><span class="line">xlabel(<span class="string">&#x27;频率 (w)&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;相位 (弧度)&#x27;</span>)</span><br><span class="line">title(<span class="string">&#x27;相位谱&#x27;</span>)</span><br><span class="line">grid on;</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line">n = <span class="number">5</span>; </span><br><span class="line">H = <span class="number">1</span> ./ (<span class="number">1</span> - <span class="number">1</span><span class="built_in">i</span> * (w ./ wc).^n);</span><br><span class="line"></span><br><span class="line">H_phase = <span class="built_in">angle</span>(H);  </span><br><span class="line"></span><br><span class="line">semilogx(w, H_phase)</span><br><span class="line">xlabel(<span class="string">&#x27;频率 (w)&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;相位 (弧度)&#x27;</span>)</span><br><span class="line">title(<span class="string">&#x27;相位谱&#x27;</span>)</span><br><span class="line">grid on;</span><br><span class="line"><span class="built_in">hold</span> on;</span><br></pre></td></tr></table></figure>



<h4 id="五、实验总结"><a href="#五、实验总结" class="headerlink" title="五、实验总结"></a>五、实验总结</h4><p><strong>在第二题一开始直接用fplot()绘制傅里叶变换后的幅度谱和相位谱，得不到结果，而应该绘制abs()模值部分和angle()辅角部分，因此分别定义abs(f1)和angle(f1)来绘制F1的图像，最终得到了结果</strong>。</p>
<p><strong>乘积的幅度谱是原始函数幅度谱的点乘，而相位谱是原始函数相位谱的简单相加, 这是基于频域分析的结果，而在时域上对函数进行乘积会导致频域上的卷积操作，从而改变函数的幅度谱和相位谱。</strong></p>
<h5 id="最后对于巴特沃斯滤波器的学习总结阶数-n-对于低通巴特沃斯滤波器的幅度谱图像具有显著影响，阶数的增加会使幅度谱更陡峭并导致更大的衰减。然而，阶数对于相位谱的影响较小，相位谱保持线性且不变。这些特点可以用于设计和分析低通巴特沃斯滤波器的频率响应。"><a href="#最后对于巴特沃斯滤波器的学习总结阶数-n-对于低通巴特沃斯滤波器的幅度谱图像具有显著影响，阶数的增加会使幅度谱更陡峭并导致更大的衰减。然而，阶数对于相位谱的影响较小，相位谱保持线性且不变。这些特点可以用于设计和分析低通巴特沃斯滤波器的频率响应。" class="headerlink" title="最后对于巴特沃斯滤波器的学习总结阶数 n 对于低通巴特沃斯滤波器的幅度谱图像具有显著影响，阶数的增加会使幅度谱更陡峭并导致更大的衰减。然而，阶数对于相位谱的影响较小，相位谱保持线性且不变。这些特点可以用于设计和分析低通巴特沃斯滤波器的频率响应。"></a>最后对于巴特沃斯滤波器的学习总结<strong>阶数 n 对于低通巴特沃斯滤波器的幅度谱图像具有显著影响，阶数的增加会使幅度谱更陡峭并导致更大的衰减。然而，阶数对于相位谱的影响较小，相位谱保持线性且不变。这些特点可以用于设计和分析低通巴特沃斯滤波器的频率响应。</strong></h5><h4 id="六、参考文献"><a href="#六、参考文献" class="headerlink" title="六、参考文献"></a><strong>六、参考文献</strong></h4><p>&lt;1&gt;<a href="https://blog.csdn.net/qq_43786066/article/details/108687806">https://blog.csdn.net/qq_43786066/article/details/108687806</a></p>
<p>&lt;2&gt;<a href="https://ww2.mathworks.cn/help/matlab/complex-numbers.html">https://ww2.mathworks.cn/help/matlab/complex-numbers.html</a></p>
<p>&lt;3&gt;<a href="https://blog.csdn.net/weixin_42870380/article/details/113122417?ops_request_misc=&request_id=&biz_id=102&utm_term=%E7%BB%98%E5%88%B6%E5%B7%B4%E7%89%B9%E6%B2%83%E6%96%AF%E6%BB%A4%E6%B3%A2%E5%99%A8%E7%9A%84%E5%B9%85%E9%A2%91%E6%9B%B2%E7%BA%BF&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~sobaiduweb~default-0-113122417.268">https://blog.csdn.net/weixin_42870380/article/details/113122417?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=%E7%BB%98%E5%88%B6%E5%B7%B4%E7%89%B9%E6%B2%83%E6%96%AF%E6%BB%A4%E6%B3%A2%E5%99%A8%E7%9A%84%E5%B9%85%E9%A2%91%E6%9B%B2%E7%BA%BF&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~sobaiduweb~default-0-113122417.268</a></p>
<p>&lt;4&gt;<a href="https://blog.csdn.net/kissgoodbye2012/article/details/122018004">https://blog.csdn.net/kissgoodbye2012/article/details/122018004</a></p>
]]></content>
      <categories>
        <category>信号</category>
      </categories>
      <tags>
        <tag>大学大作业</tag>
      </tags>
  </entry>
  <entry>
    <title>信号4</title>
    <url>/2023/06/09/%E4%BF%A1%E5%8F%B74/</url>
    <content><![CDATA[<h1 id="西安电子科技大学"><a href="#西安电子科技大学" class="headerlink" title="西安电子科技大学"></a>西安电子科技大学</h1><h3 id="信-号-与-系-统实验报告"><a href="#信-号-与-系-统实验报告" class="headerlink" title="信 号 与 系 统实验报告"></a>信 号 与 系 统实验报告</h3><h5 id="2023年6月9日"><a href="#2023年6月9日" class="headerlink" title="2023年6月9日"></a>2023年6月9日</h5><h4 id="一、实验题目：信号与系统实验四"><a href="#一、实验题目：信号与系统实验四" class="headerlink" title="一、实验题目：信号与系统实验四"></a>一、实验题目：信号与系统实验四</h4><span id="more"></span>

<h4 id="二、实验摘要"><a href="#二、实验摘要" class="headerlink" title="二、实验摘要"></a>二、实验摘要</h4><p><img src="/%E4%BF%A1%E5%8F%B74%5Cimage-20230714105254263.png" alt="image-20230714105254263"></p>
<h4 id="实验内容简述："><a href="#实验内容简述：" class="headerlink" title="实验内容简述："></a>实验内容简述：</h4><p><strong>题目一：</strong></p>
<ol>
<li><strong>使用符号工具箱 (<code>syms</code>) 声明变量 <code>t</code> 作为符号变量。</strong></li>
<li><strong>定义函数 <code>f</code>，它是变量 <code>t</code> 的线性表达式 <code>t+2</code>。</strong></li>
<li><strong>使用 <code>laplace</code> 函数对函数 <code>f</code> 进行拉普拉斯变换，结果存储在变量 <code>F</code> 中。</strong></li>
<li><strong>清除符号变量 <code>t</code>。</strong></li>
<li><strong>重新声明符号变量 <code>t</code>。</strong></li>
<li><strong>重新定义函数 <code>f</code>，它是变量 <code>t</code> 的线性表达式 <code>t+2</code>。</strong></li>
<li><strong>定义向量 <code>a</code>，其元素为 <code>[1,0,1]</code>。</strong></li>
<li><strong>定义向量 <code>b</code>，其元素为 <code>[3,5,4,6]</code>。</strong></li>
<li><strong>使用 <code>roots</code> 函数分别计算向量 <code>a</code> 和 <code>b</code> 的根，并将结果分别存储在变量 <code>outa</code> 和 <code>outb</code> 中。</strong></li>
<li><strong>使用 <code>plot</code> 函数绘制 <code>outa</code> 的实部和虚部作为圆点（<code>o</code>）以及 <code>outb</code> 的实部和虚部作为叉号（<code>x</code>）。</strong></li>
<li><strong>使用 <code>grid on</code> 打开网格显示。</strong></li>
<li><strong>使用 <code>axis</code> 函数设置图形的坐标轴范围为 <code>[-2 0.5 -2 2]</code>。</strong></li>
</ol>
<h5 id="题目二："><a href="#题目二：" class="headerlink" title="题目二："></a>题目二：</h5><ol>
<li><h5 id="定义了系统的传输函数分子和分母多项式。"><a href="#定义了系统的传输函数分子和分母多项式。" class="headerlink" title="定义了系统的传输函数分子和分母多项式。"></a>定义了系统的传输函数分子和分母多项式。</h5></li>
<li><h5 id="计算并绘制了系统的单位冲激响应。"><a href="#计算并绘制了系统的单位冲激响应。" class="headerlink" title="计算并绘制了系统的单位冲激响应。"></a>计算并绘制了系统的单位冲激响应。</h5></li>
<li><h5 id="计算并绘制了系统对单位阶跃信号的响应。"><a href="#计算并绘制了系统对单位阶跃信号的响应。" class="headerlink" title="计算并绘制了系统对单位阶跃信号的响应。"></a>计算并绘制了系统对单位阶跃信号的响应。</h5></li>
<li><h5 id="使用拉普拉斯变换计算了信号的频域表达式。"><a href="#使用拉普拉斯变换计算了信号的频域表达式。" class="headerlink" title="使用拉普拉斯变换计算了信号的频域表达式。"></a>使用拉普拉斯变换计算了信号的频域表达式。</h5></li>
<li><h5 id="定义了系统的传递函数，并计算了系统输出的频域表达式。"><a href="#定义了系统的传递函数，并计算了系统输出的频域表达式。" class="headerlink" title="定义了系统的传递函数，并计算了系统输出的频域表达式。"></a>定义了系统的传递函数，并计算了系统输出的频域表达式。</h5></li>
<li><h5 id="使用逆拉普拉斯变换计算了系统输出的时域表达式，并绘制了其图形。"><a href="#使用逆拉普拉斯变换计算了系统输出的时域表达式，并绘制了其图形。" class="headerlink" title="使用逆拉普拉斯变换计算了系统输出的时域表达式，并绘制了其图形。"></a>使用逆拉普拉斯变换计算了系统输出的时域表达式，并绘制了其图形。</h5></li>
</ol>
<h4 id="三、题目描述"><a href="#三、题目描述" class="headerlink" title="三、题目描述"></a><strong>三、题目描述</strong></h4><h5 id="题目一："><a href="#题目一：" class="headerlink" title="题目一："></a>题目一：</h5><h5 id="首先实现给函数的拉普拉斯变换"><a href="#首先实现给函数的拉普拉斯变换" class="headerlink" title="首先实现给函数的拉普拉斯变换"></a>首先实现给函数的拉普拉斯变换</h5><h5 id="然后对给定的因果函数的系统函数进行分析，画出其零点和极点的分布图，从而判断系统的稳定性。"><a href="#然后对给定的因果函数的系统函数进行分析，画出其零点和极点的分布图，从而判断系统的稳定性。" class="headerlink" title="然后对给定的因果函数的系统函数进行分析，画出其零点和极点的分布图，从而判断系统的稳定性。"></a>然后对给定的因果函数的系统函数进行分析，画出其零点和极点的分布图，从而判断系统的稳定性。</h5><h5 id="题目二：-1"><a href="#题目二：-1" class="headerlink" title="题目二："></a>题目二：</h5><h5 id="首先利用ilaplace函数求出给定的系统函数的傅里叶逆变换，利用impulse函数画出其冲激响应的图像，然后调用step函数画出其阶跃响应的图像，最后对于给定的系统激励，计算出其零状态响应，并对图像进行官观察分析。"><a href="#首先利用ilaplace函数求出给定的系统函数的傅里叶逆变换，利用impulse函数画出其冲激响应的图像，然后调用step函数画出其阶跃响应的图像，最后对于给定的系统激励，计算出其零状态响应，并对图像进行官观察分析。" class="headerlink" title="首先利用ilaplace函数求出给定的系统函数的傅里叶逆变换，利用impulse函数画出其冲激响应的图像，然后调用step函数画出其阶跃响应的图像，最后对于给定的系统激励，计算出其零状态响应，并对图像进行官观察分析。"></a>首先利用ilaplace函数求出给定的系统函数的傅里叶逆变换，利用impulse函数画出其冲激响应的图像，然后调用step函数画出其阶跃响应的图像，最后对于给定的系统激励，计算出其零状态响应，并对图像进行官观察分析。</h5><h4 id="四、实验内容"><a href="#四、实验内容" class="headerlink" title="四、实验内容"></a>四、实验内容</h4><h5 id="题目一：-1"><a href="#题目一：-1" class="headerlink" title="题目一："></a>题目一：</h5><h5 id="实验过程："><a href="#实验过程：" class="headerlink" title="实验过程："></a>实验过程：</h5><ol>
<li><strong>使用符号工具箱 (<code>syms</code>) 声明变量 <code>t</code> 作为符号变量。</strong></li>
<li><strong>定义函数 <code>f</code>，它是变量 <code>t</code> 的线性表达式 <code>t+2</code>。</strong></li>
<li><strong>使用 <code>laplace</code> 函数对函数 <code>f</code> 进行拉普拉斯变换，结果存储在变量 <code>F</code> 中。</strong></li>
<li><strong>清除符号变量 <code>t</code>。</strong></li>
<li><strong>重新声明符号变量 <code>t</code>。</strong></li>
<li><strong>重新定义函数 <code>f</code>，它是变量 <code>t</code> 的线性表达式 <code>t+2</code>。</strong></li>
<li><strong>定义向量 <code>a</code>，其元素为 <code>[1,0,1]</code>。</strong></li>
<li><strong>定义向量 <code>b</code>，其元素为 <code>[3,5,4,6]</code>。</strong></li>
<li><strong>使用 <code>roots</code> 函数分别计算向量 <code>a</code> 和 <code>b</code> 的根，并将结果分别存储在变量 <code>outa</code> 和 <code>outb</code> 中。</strong></li>
<li><strong>使用 <code>plot</code> 函数绘制 <code>outa</code> 的实部和虚部作为圆点（<code>o</code>）以及 <code>outb</code> 的实部和虚部作为叉号（<code>x</code>）。</strong></li>
<li><strong>使用 <code>grid on</code> 打开网格显示。</strong></li>
<li><strong>使用 <code>axis</code> 函数设置图形的坐标轴范围为 <code>[-2 0.5 -2 2]</code>。</strong></li>
</ol>
<h5 id="最终根据结果分析："><a href="#最终根据结果分析：" class="headerlink" title="最终根据结果分析："></a>最终根据结果分析：</h5><h5 id="由图可得，H1的极点出现在右半开平面，所以H1不稳定；H2的极点都在左半开平面，所以H2是稳定的系统"><a href="#由图可得，H1的极点出现在右半开平面，所以H1不稳定；H2的极点都在左半开平面，所以H2是稳定的系统" class="headerlink" title="由图可得，H1的极点出现在右半开平面，所以H1不稳定；H2的极点都在左半开平面，所以H2是稳定的系统"></a>由图可得，H1的极点出现在右半开平面，所以H1不稳定；H2的极点都在左半开平面，所以H2是稳定的系统</h5><h5 id="实验结果图："><a href="#实验结果图：" class="headerlink" title="实验结果图："></a>实验结果图：</h5><img src="C:\Z.Sagapo\myblog\source\_posts\信号4\f12.png" alt="f12" style="zoom: 80%;" />

<p><img src="C:\Z.Sagapo\myblog\source_posts\信号4\f12_3.png" alt="f12_3"></p>
<img src="C:\Z.Sagapo\myblog\source\_posts\信号4\f13.png" alt="f13"  />

<p><img src="/%E4%BF%A1%E5%8F%B74%5Cf13_3.png" alt="f13_3"></p>
<p>实验代码：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">syms t;</span><br><span class="line">f = t+<span class="number">2</span>;</span><br><span class="line">F = laplace(f);</span><br><span class="line"></span><br><span class="line">b=[<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>];</span><br><span class="line">zplane(b,a);</span><br><span class="line">outa=roots(a);</span><br><span class="line">outb=roots(b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%plot(real(outb),imag(outb),&#x27;o&#x27;,real(outa),imag(outa),&#x27;x&#x27;,&#x27;markersize&#x27;,12);</span></span><br><span class="line"></span><br><span class="line">grid on;</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;零点&#x27;</span>,<span class="string">&#x27;极点&#x27;</span>);</span><br><span class="line">axis([<span class="number">-3</span> <span class="number">1</span> <span class="number">-3</span> <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">b = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>];</span><br><span class="line">zplane(a,b);</span><br><span class="line">outa = roots(a);</span><br><span class="line">outb = roots(b);</span><br><span class="line"></span><br><span class="line"><span class="comment">%plot(real(outa),imag(outa),&#x27;o&#x27;,real(outb),imag(outb),&#x27;x&#x27;,&#x27;MarkerSize&#x27;,12);</span></span><br><span class="line">grid on;</span><br><span class="line">axis([<span class="number">-2</span> <span class="number">0.5</span> <span class="number">-2</span> <span class="number">2</span>]);</span><br></pre></td></tr></table></figure>



<h5 id="题目二：-2"><a href="#题目二：-2" class="headerlink" title="题目二："></a>题目二：</h5><h5 id="实验过程：-1"><a href="#实验过程：-1" class="headerlink" title="实验过程："></a>实验过程：</h5><ol>
<li><strong>创建系统：</strong><ul>
<li><strong>定义了分子多项式 <code>a = [1, 0]</code> 和分母多项式 <code>b = [1, 3, 2]</code>。</strong></li>
<li><strong>使用 <code>tf</code> 函数创建系统传递函数 <code>sys</code>，由分子和分母多项式定义。</strong></li>
</ul>
</li>
<li><strong>单位冲激响应：</strong><ul>
<li><strong>创建时间向量 <code>t</code>，范围从 0 到 10，步长为 0.01。</strong></li>
<li><strong>使用 <code>impulse</code> 函数计算系统 <code>sys</code> 的单位冲激响应 <code>h</code>，在时间向量 <code>t</code> 上。</strong></li>
</ul>
</li>
<li><strong>单位冲激响应绘图：</strong><ul>
<li><strong>打开网格显示。</strong></li>
<li><strong>设置 x 轴标签为 ‘t’，y 轴标签为 ‘h(t)’。</strong></li>
<li><strong>使用 <code>plot</code> 函数绘制时间向量 <code>t</code> 和单位冲激响应 <code>h</code>（该行代码被注释掉了）。</strong></li>
</ul>
</li>
<li><strong>单位阶跃响应：</strong><ul>
<li><strong>使用 <code>step</code> 函数计算系统 <code>sys</code> 的单位阶跃响应。</strong></li>
</ul>
</li>
<li><strong>单位阶跃响应绘图：</strong><ul>
<li><strong>打开网格显示。</strong></li>
<li><strong>设置图形的 x 轴范围为 0 到 11，y 轴范围为 -0.02 到 0.29。</strong></li>
</ul>
</li>
<li><strong>输入信号与系统响应：</strong><ul>
<li><strong>创建信号 <code>f</code>，为 <code>cos(20*t)</code> 乘以一个逻辑函数 <code>t &gt; 0</code>。</strong></li>
<li><strong>使用 <code>lsim</code> 函数计算系统 <code>sys</code> 对信号 <code>f</code> 的响应，并在时间向量 <code>t</code> 上得到结果。</strong></li>
</ul>
</li>
<li><strong>输入信号与系统响应绘图：</strong><ul>
<li><strong>打开网格显示。</strong></li>
</ul>
</li>
<li><strong>频域分析：</strong><ul>
<li><strong>声明符号变量 <code>t</code> 和 <code>s</code>。</strong></li>
<li><strong>定义函数 <code>f</code>，为 <code>cos(20*t)</code> 乘以单位阶跃函数 <code>heaviside(t)</code>。</strong></li>
<li><strong>使用 <code>laplace</code> 函数计算函数 <code>f</code> 的拉普拉斯变换，并将结果存储在变量 <code>Fs</code> 中。</strong></li>
<li><strong>定义系统的传递函数 <code>Hs</code>。</strong></li>
<li><strong>计算系统输出的拉普拉斯变换 <code>Ys</code>，为函数 <code>Fs</code> 与传递函数 <code>Hs</code> 相乘。</strong></li>
</ul>
</li>
<li><strong>逆拉普拉斯变换绘图：</strong><ul>
<li><strong>使用 <code>ilaplace</code> 函数计算 <code>Ys</code> 的逆拉普拉斯变换，并将结果存储在变量 <code>yzs</code> 中。</strong></li>
<li><strong>使用 <code>fplot</code> 函数绘制函数 <code>yzs</code> 的图形。</strong></li>
</ul>
</li>
<li><strong>逆拉普拉斯变换绘图范围：</strong></li>
</ol>
<ul>
<li><strong>打开网格显示。</strong></li>
<li><strong>设置图形的 x 轴范围为 -5 到 5，y 轴范围为 -5.1 到 0.1。</strong></li>
</ul>
<h5 id="实验结果图：-1"><a href="#实验结果图：-1" class="headerlink" title="实验结果图："></a>实验结果图：</h5><img src="C:\Z.Sagapo\myblog\source\_posts\信号4\f21.png" alt="f21" style="zoom: 80%;" />

<img src="C:\Z.Sagapo\myblog\source\_posts\信号4\f22.png" alt="f22" style="zoom:80%;" />

<h5 id="实验代码："><a href="#实验代码：" class="headerlink" title="实验代码："></a>实验代码：</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">0</span>];</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">sys = tf(a,b);</span><br><span class="line">t = <span class="number">0</span>:<span class="number">0.01</span>:<span class="number">10</span>;</span><br><span class="line">h = impulse(sys,t); </span><br><span class="line"><span class="comment">%plot(t,h);</span></span><br><span class="line"></span><br><span class="line">grid on;</span><br><span class="line">xlabel(<span class="string">&#x27;t&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;h(t)&#x27;</span>);</span><br><span class="line"></span><br><span class="line">step(a,b);</span><br><span class="line">grid on;</span><br><span class="line">axis([<span class="number">0</span> <span class="number">11</span> <span class="number">-0.02</span> <span class="number">0.29</span>]);</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">cos</span>(<span class="number">20</span>*t).*(t&gt;<span class="number">0</span>);</span><br><span class="line">lsim(sys,f,t);</span><br><span class="line">grid on;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\信号4\f24.png" alt="f24"></p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\信号4\f23.png" alt="f23"></p>
<h5 id="实验代码：-1"><a href="#实验代码：-1" class="headerlink" title="实验代码："></a>实验代码：</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">syms t s;</span><br><span class="line">f = <span class="built_in">cos</span>(<span class="number">20</span>*t)*heaviside(t);</span><br><span class="line">Fs = laplace(f);</span><br><span class="line">Hs = s/(s^<span class="number">2</span>+<span class="number">3</span>*s+<span class="number">2</span>);</span><br><span class="line">Ys = Fs*Hs;</span><br><span class="line"></span><br><span class="line">yzs = ilaplace(Ys);</span><br><span class="line">fplot(yzs);</span><br><span class="line">grid on;</span><br><span class="line">axis([<span class="number">-5</span> <span class="number">5</span> <span class="number">-5.1</span> <span class="number">0.1</span>]);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="五、实验总结"><a href="#五、实验总结" class="headerlink" title="五、实验总结"></a>五、实验总结</h4><h5 id="题目一：-2"><a href="#题目一：-2" class="headerlink" title="题目一："></a>题目一：</h5><h5 id="展示了如何使用-MATLAB-或类似的数值计算软件进行符号计算和绘图操作。其中，进行了符号函数的拉普拉斯变换、多项式根的计算，以及根的实部和虚部的散点图绘制。通过这些操作，可以实现对函数和多项式的分析、变换和可视化展示。"><a href="#展示了如何使用-MATLAB-或类似的数值计算软件进行符号计算和绘图操作。其中，进行了符号函数的拉普拉斯变换、多项式根的计算，以及根的实部和虚部的散点图绘制。通过这些操作，可以实现对函数和多项式的分析、变换和可视化展示。" class="headerlink" title="展示了如何使用 MATLAB 或类似的数值计算软件进行符号计算和绘图操作。其中，进行了符号函数的拉普拉斯变换、多项式根的计算，以及根的实部和虚部的散点图绘制。通过这些操作，可以实现对函数和多项式的分析、变换和可视化展示。"></a>展示了如何使用 MATLAB 或类似的数值计算软件进行符号计算和绘图操作。其中，进行了符号函数的拉普拉斯变换、多项式根的计算，以及根的实部和虚部的散点图绘制。通过这些操作，可以实现对函数和多项式的分析、变换和可视化展示。</h5><h5 id="题目二：-3"><a href="#题目二：-3" class="headerlink" title="题目二："></a>题目二：</h5><h5 id="主要进行了信号处理和系统响应的实验。通过计算和绘图，展示了系统的单位冲激响应、单位阶跃响应以及对输入信号的响应。同时，进行了频域分析，包括信号的拉普拉斯变换、系统传递函数的定义以及系统输出的拉普拉斯变换。最后，通过逆拉普拉斯变换将频域结果转换为时域结果，并绘制了函数图形。"><a href="#主要进行了信号处理和系统响应的实验。通过计算和绘图，展示了系统的单位冲激响应、单位阶跃响应以及对输入信号的响应。同时，进行了频域分析，包括信号的拉普拉斯变换、系统传递函数的定义以及系统输出的拉普拉斯变换。最后，通过逆拉普拉斯变换将频域结果转换为时域结果，并绘制了函数图形。" class="headerlink" title="主要进行了信号处理和系统响应的实验。通过计算和绘图，展示了系统的单位冲激响应、单位阶跃响应以及对输入信号的响应。同时，进行了频域分析，包括信号的拉普拉斯变换、系统传递函数的定义以及系统输出的拉普拉斯变换。最后，通过逆拉普拉斯变换将频域结果转换为时域结果，并绘制了函数图形。"></a>主要进行了信号处理和系统响应的实验。通过计算和绘图，展示了系统的单位冲激响应、单位阶跃响应以及对输入信号的响应。同时，进行了频域分析，包括信号的拉普拉斯变换、系统传递函数的定义以及系统输出的拉普拉斯变换。最后，通过逆拉普拉斯变换将频域结果转换为时域结果，并绘制了函数图形。</h5><h4 id="六、参考文献"><a href="#六、参考文献" class="headerlink" title="六、参考文献"></a>六、参考文献</h4><h5 id="lt-1-gt-https-blog-csdn-net-jk-101-article-details-106280095"><a href="#lt-1-gt-https-blog-csdn-net-jk-101-article-details-106280095" class="headerlink" title="&lt;1&gt;https://blog.csdn.net/jk_101/article/details/106280095"></a>&lt;1&gt;<a href="https://blog.csdn.net/jk_101/article/details/106280095">https://blog.csdn.net/jk_101/article/details/106280095</a></h5><h5 id="lt-2-gt-https-blog-csdn-net-HKX531317-article-details-124367419"><a href="#lt-2-gt-https-blog-csdn-net-HKX531317-article-details-124367419" class="headerlink" title="&lt;2&gt;https://blog.csdn.net/HKX531317/article/details/124367419"></a>&lt;2&gt;<a href="https://blog.csdn.net/HKX531317/article/details/124367419">https://blog.csdn.net/HKX531317/article/details/124367419</a></h5><h5 id="lt-3-gt-https-blog-csdn-net-m0-46155417-article-details-129364222"><a href="#lt-3-gt-https-blog-csdn-net-m0-46155417-article-details-129364222" class="headerlink" title="&lt;3&gt;https://blog.csdn.net/m0_46155417/article/details/129364222"></a>&lt;3&gt;<a href="https://blog.csdn.net/m0_46155417/article/details/129364222">https://blog.csdn.net/m0_46155417/article/details/129364222</a></h5>]]></content>
      <categories>
        <category>信号</category>
      </categories>
      <tags>
        <tag>大学大作业</tag>
      </tags>
  </entry>
  <entry>
    <title>信号2</title>
    <url>/2023/05/27/%E4%BF%A1%E5%8F%B7%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="西安电子科技大学"><a href="#西安电子科技大学" class="headerlink" title="西安电子科技大学"></a>西安电子科技大学</h1><h3 id="信-号-与-系-统实验报告"><a href="#信-号-与-系-统实验报告" class="headerlink" title="信 号 与 系 统实验报告"></a>信 号 与 系 统实验报告</h3><h5 id="2023年5月26日"><a href="#2023年5月26日" class="headerlink" title="2023年5月26日"></a>2023年5月26日</h5><h4 id="一、实验题目：信号与系统实验二"><a href="#一、实验题目：信号与系统实验二" class="headerlink" title="一、实验题目：信号与系统实验二"></a>一、实验题目：信号与系统实验二</h4><span id="more"></span>

<h4 id="二、实验摘要"><a href="#二、实验摘要" class="headerlink" title="二、实验摘要"></a>二、实验摘要</h4><h4 id="实验内容简述："><a href="#实验内容简述：" class="headerlink" title="实验内容简述："></a>实验内容简述：</h4><h5 id="题目一："><a href="#题目一：" class="headerlink" title="题目一："></a>题目一：</h5><h5 id="lt-1-gt-首先查阅资料得到对原函数进行周期延拓的函数为对函数的定义域对周期进行取模运算，即可得到以模数为周期的周期延拓图像。"><a href="#lt-1-gt-首先查阅资料得到对原函数进行周期延拓的函数为对函数的定义域对周期进行取模运算，即可得到以模数为周期的周期延拓图像。" class="headerlink" title="&lt;1&gt;首先查阅资料得到对原函数进行周期延拓的函数为对函数的定义域对周期进行取模运算，即可得到以模数为周期的周期延拓图像。"></a>&lt;1&gt;首先查阅资料得到对原函数进行周期延拓的函数为对函数的定义域对周期进行取模运算，即可得到以模数为周期的周期延拓图像。</h5><h5 id="lt-2-gt-然后根据锯齿波的原函数表达式计算得到原函数的傅里叶级数的傅里叶系数，得到傅里叶系数的图像。"><a href="#lt-2-gt-然后根据锯齿波的原函数表达式计算得到原函数的傅里叶级数的傅里叶系数，得到傅里叶系数的图像。" class="headerlink" title="&lt;2&gt;然后根据锯齿波的原函数表达式计算得到原函数的傅里叶级数的傅里叶系数，得到傅里叶系数的图像。"></a>&lt;2&gt;然后根据锯齿波的原函数表达式计算得到原函数的傅里叶级数的傅里叶系数，得到傅里叶系数的图像。</h5><h5 id="lt-3-gt-根据得到的傅里叶系数，将前9次谐波叠加得到了原函数随时间变化的拟合图像。根据拟合图像与原图像的对比，发现吉布斯现象发生在原点附近。"><a href="#lt-3-gt-根据得到的傅里叶系数，将前9次谐波叠加得到了原函数随时间变化的拟合图像。根据拟合图像与原图像的对比，发现吉布斯现象发生在原点附近。" class="headerlink" title="&lt;3&gt;根据得到的傅里叶系数，将前9次谐波叠加得到了原函数随时间变化的拟合图像。根据拟合图像与原图像的对比，发现吉布斯现象发生在原点附近。"></a>&lt;3&gt;根据得到的傅里叶系数，将前9次谐波叠加得到了原函数随时间变化的拟合图像。根据拟合图像与原图像的对比，发现吉布斯现象发生在原点附近。</h5><h5 id="题目二："><a href="#题目二：" class="headerlink" title="题目二："></a>题目二：</h5><h5 id="首先根据原函数的傅里叶系数不断叠加拟合出原函数的图像，根据图像猜测原函数的表达式，然后再根据猜测的表达式求出函数的傅里叶系数，在求出傅里叶系数的过程中，需要通过积分运算，在matlab中，将积分运算转化为各个小段的离散面积的叠加最终得到猜测函数的傅里叶系数，与原函数的傅里叶系数比较，成功验证猜测的正确性。"><a href="#首先根据原函数的傅里叶系数不断叠加拟合出原函数的图像，根据图像猜测原函数的表达式，然后再根据猜测的表达式求出函数的傅里叶系数，在求出傅里叶系数的过程中，需要通过积分运算，在matlab中，将积分运算转化为各个小段的离散面积的叠加最终得到猜测函数的傅里叶系数，与原函数的傅里叶系数比较，成功验证猜测的正确性。" class="headerlink" title="首先根据原函数的傅里叶系数不断叠加拟合出原函数的图像，根据图像猜测原函数的表达式，然后再根据猜测的表达式求出函数的傅里叶系数，在求出傅里叶系数的过程中，需要通过积分运算，在matlab中，将积分运算转化为各个小段的离散面积的叠加最终得到猜测函数的傅里叶系数，与原函数的傅里叶系数比较，成功验证猜测的正确性。"></a>首先根据原函数的傅里叶系数不断叠加拟合出原函数的图像，根据图像猜测原函数的表达式，然后再根据猜测的表达式求出函数的傅里叶系数，在求出傅里叶系数的过程中，需要通过积分运算，在matlab中，将积分运算转化为各个小段的离散面积的叠加最终得到猜测函数的傅里叶系数，与原函数的傅里叶系数比较，成功验证猜测的正确性。</h5><h5 id="题目三："><a href="#题目三：" class="headerlink" title="题目三："></a>题目三：</h5><h5 id="给定的表达式代表着只计算前N个谐波的和，将此作为拟合函数与原函数图像进行比较，根据N的值计算得到了傅里叶级数的图像，根据图像可以就看出函数图像最大值的大小变化，这个变化反映了傅里叶级数的吉布斯现象的大小。发现在N-x3D-50，100时，吉布斯现象均较为明显，最大值较大，当将N设为100000即N趋近于无穷时，可以看出图像的吉布斯现象基本没有发生。"><a href="#给定的表达式代表着只计算前N个谐波的和，将此作为拟合函数与原函数图像进行比较，根据N的值计算得到了傅里叶级数的图像，根据图像可以就看出函数图像最大值的大小变化，这个变化反映了傅里叶级数的吉布斯现象的大小。发现在N-x3D-50，100时，吉布斯现象均较为明显，最大值较大，当将N设为100000即N趋近于无穷时，可以看出图像的吉布斯现象基本没有发生。" class="headerlink" title="给定的表达式代表着只计算前N个谐波的和，将此作为拟合函数与原函数图像进行比较，根据N的值计算得到了傅里叶级数的图像，根据图像可以就看出函数图像最大值的大小变化，这个变化反映了傅里叶级数的吉布斯现象的大小。发现在N &#x3D; 50，100时，吉布斯现象均较为明显，最大值较大，当将N设为100000即N趋近于无穷时，可以看出图像的吉布斯现象基本没有发生。"></a>给定的表达式代表着只计算前N个谐波的和，将此作为拟合函数与原函数图像进行比较，根据N的值计算得到了傅里叶级数的图像，根据图像可以就看出函数图像最大值的大小变化，这个变化反映了傅里叶级数的吉布斯现象的大小。发现在N &#x3D; 50，100时，吉布斯现象均较为明显，最大值较大，当将N设为100000即N趋近于无穷时，可以看出图像的吉布斯现象基本没有发生。</h5><h5 id="题目四："><a href="#题目四：" class="headerlink" title="题目四："></a>题目四：</h5><h5 id="根据题目四，我们将这些小于N的傅里叶级数相加取平均值，然后可以得到了对应N的函数波形，将此波形与题目三中对应N大小相同的波形进行比较，发现题目四中的波形的吉布斯现象减弱，拟合效果更好。"><a href="#根据题目四，我们将这些小于N的傅里叶级数相加取平均值，然后可以得到了对应N的函数波形，将此波形与题目三中对应N大小相同的波形进行比较，发现题目四中的波形的吉布斯现象减弱，拟合效果更好。" class="headerlink" title="根据题目四，我们将这些小于N的傅里叶级数相加取平均值，然后可以得到了对应N的函数波形，将此波形与题目三中对应N大小相同的波形进行比较，发现题目四中的波形的吉布斯现象减弱，拟合效果更好。"></a>根据题目四，我们将这些小于N的傅里叶级数相加取平均值，然后可以得到了对应N的函数波形，将此波形与题目三中对应N大小相同的波形进行比较，发现题目四中的波形的吉布斯现象减弱，拟合效果更好。</h5><h4 id="三、题目描述"><a href="#三、题目描述" class="headerlink" title="三、题目描述"></a>三、题目描述</h4><h5 id="题目一：-1"><a href="#题目一：-1" class="headerlink" title="题目一："></a>题目一：</h5><h5 id="题目1：写出由程序"><a href="#题目1：写出由程序" class="headerlink" title="题目1：写出由程序"></a>题目1：写出由程序</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t=<span class="number">-2</span>*<span class="built_in">pi</span>:<span class="number">0.001</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line"></span><br><span class="line">y=sawtooth(<span class="number">0.5</span>*t,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">plot</span>(t,y)</span><br></pre></td></tr></table></figure>

<p><strong>形成的信号经周期延拓得到的周期信号的时域表达式；手动计算函数的傅里叶系数，再代入方程，用MATLAB编程计算其指数形式的傅里叶系数(计算至11次谐波)，画出前11次谐波叠加的波形，了解并指出吉布斯现象。</strong></p>
<p>  <strong>1.对f(t)进行周期延拓得到ft(t)</strong></p>
<p><strong>2.计算傅里叶复系数Fn，猜想可以利用for循环</strong></p>
<p><strong>3.画出前9次谐波叠加模型，构造9次叠加的函数然后plot即可</strong></p>
<p><strong>题目二：</strong></p>
<h5 id="利用傅里叶级数的计算公式将给出的傅里叶系数代入迭代循环从而得到原函数的逼近图像，由逼近的图像可以猜测出原函数的表达式形式，然后再根据猜测的表达式求出此表达式的傅里叶系数，将此系数和题目给定的系数比较观察，判断出猜测是正确的。"><a href="#利用傅里叶级数的计算公式将给出的傅里叶系数代入迭代循环从而得到原函数的逼近图像，由逼近的图像可以猜测出原函数的表达式形式，然后再根据猜测的表达式求出此表达式的傅里叶系数，将此系数和题目给定的系数比较观察，判断出猜测是正确的。" class="headerlink" title="利用傅里叶级数的计算公式将给出的傅里叶系数代入迭代循环从而得到原函数的逼近图像，由逼近的图像可以猜测出原函数的表达式形式，然后再根据猜测的表达式求出此表达式的傅里叶系数，将此系数和题目给定的系数比较观察，判断出猜测是正确的。"></a>利用傅里叶级数的计算公式将给出的傅里叶系数代入迭代循环从而得到原函数的逼近图像，由逼近的图像可以猜测出原函数的表达式形式，然后再根据猜测的表达式求出此表达式的傅里叶系数，将此系数和题目给定的系数比较观察，判断出猜测是正确的。</h5><h5 id="题目三：-1"><a href="#题目三：-1" class="headerlink" title="题目三："></a>题目三：</h5><h5 id="由题目二中的表达式，题目给出N，我们对前N个谐波相加作为最终的原函数逼近的图像，得到前N次谐波相加的逼近函数的最大值，将此最大值与原函数的最大值比较并判断最大值的位置，从而得到吉布斯现象发生的一些规律。"><a href="#由题目二中的表达式，题目给出N，我们对前N个谐波相加作为最终的原函数逼近的图像，得到前N次谐波相加的逼近函数的最大值，将此最大值与原函数的最大值比较并判断最大值的位置，从而得到吉布斯现象发生的一些规律。" class="headerlink" title="由题目二中的表达式，题目给出N，我们对前N个谐波相加作为最终的原函数逼近的图像，得到前N次谐波相加的逼近函数的最大值，将此最大值与原函数的最大值比较并判断最大值的位置，从而得到吉布斯现象发生的一些规律。"></a>由题目二中的表达式，题目给出N，我们对前N个谐波相加作为最终的原函数逼近的图像，得到前N次谐波相加的逼近函数的最大值，将此最大值与原函数的最大值比较并判断最大值的位置，从而得到吉布斯现象发生的一些规律。</h5><h5 id="题目四：-1"><a href="#题目四：-1" class="headerlink" title="题目四："></a>题目四：</h5><h5 id="题目根据题目三中的公式给定N，将-lt-x3D-N次谐波相加的函数做一个平均，以此表达式逼近原函数，画出图像，将此图像与题目三中相同的N图像比较，观察吉布斯现象的明显与否。"><a href="#题目根据题目三中的公式给定N，将-lt-x3D-N次谐波相加的函数做一个平均，以此表达式逼近原函数，画出图像，将此图像与题目三中相同的N图像比较，观察吉布斯现象的明显与否。" class="headerlink" title="题目根据题目三中的公式给定N，将&lt;&#x3D;N次谐波相加的函数做一个平均，以此表达式逼近原函数，画出图像，将此图像与题目三中相同的N图像比较，观察吉布斯现象的明显与否。"></a>题目根据题目三中的公式给定N，将&lt;&#x3D;N次谐波相加的函数做一个平均，以此表达式逼近原函数，画出图像，将此图像与题目三中相同的N图像比较，观察吉布斯现象的明显与否。</h5><h4 id="四、实验内容"><a href="#四、实验内容" class="headerlink" title="四、实验内容"></a>四、实验内容</h4><h5 id="题目一：-2"><a href="#题目一：-2" class="headerlink" title="题目一："></a>题目一：</h5><h5 id="lt-1-gt-对原函数的定义域使用mod函数进行取模运算，根据取模运算循环的原理，就可以得到一个以模数为周期的循环函数，即将原函数进行了周期延拓。"><a href="#lt-1-gt-对原函数的定义域使用mod函数进行取模运算，根据取模运算循环的原理，就可以得到一个以模数为周期的循环函数，即将原函数进行了周期延拓。" class="headerlink" title="&lt;1&gt;对原函数的定义域使用mod函数进行取模运算，根据取模运算循环的原理，就可以得到一个以模数为周期的循环函数，即将原函数进行了周期延拓。"></a>&lt;1&gt;对原函数的定义域使用mod函数进行取模运算，根据取模运算循环的原理，就可以得到一个以模数为周期的循环函数，即将原函数进行了周期延拓。</h5><h5 id="得到了周期延拓后的表达式如下图所示："><a href="#得到了周期延拓后的表达式如下图所示：" class="headerlink" title="得到了周期延拓后的表达式如下图所示："></a>得到了周期延拓后的表达式如下图所示：</h5><img src="C:\Z.Sagapo\myblog\source\_posts\信号二\2.png" alt="2" style="zoom: 67%;" />

<h5 id="代码为："><a href="#代码为：" class="headerlink" title="代码为："></a>代码为：</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t=<span class="number">-2</span>*<span class="built_in">pi</span>:<span class="number">0.01</span>:<span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">f=sawtooth(<span class="number">0.5</span>*t,<span class="number">1</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(t,f);</span><br><span class="line">grid on;</span><br><span class="line">axis([<span class="number">-8</span> <span class="number">8</span> <span class="number">-1.2</span> <span class="number">1.2</span>]);</span><br><span class="line"></span><br><span class="line">t2=<span class="number">-12</span>*<span class="built_in">pi</span>:<span class="number">0.01</span>:<span class="number">12</span>*<span class="built_in">pi</span>;</span><br><span class="line">y2=sawtooth(<span class="number">0.5</span>*<span class="built_in">mod</span>(t2,<span class="number">4</span>*<span class="built_in">pi</span>),<span class="number">1</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">plot</span>(t2,y2);</span><br><span class="line">grid on;</span><br><span class="line">axis([<span class="number">-44</span> <span class="number">44</span> <span class="number">-1.2</span> <span class="number">1.2</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="lt-2-gt-根据傅里叶系数的计算公式，将f-T函数带入公式中，计算得到了函数的傅里叶系数为："><a href="#lt-2-gt-根据傅里叶系数的计算公式，将f-T函数带入公式中，计算得到了函数的傅里叶系数为：" class="headerlink" title="&lt;2&gt;根据傅里叶系数的计算公式，将f_T函数带入公式中，计算得到了函数的傅里叶系数为："></a>&lt;2&gt;根据傅里叶系数的计算公式，将f_T函数带入公式中，计算得到了函数的傅里叶系数为：</h5><p>$$<br>Fn &#x3D; j* \ 1&#x2F;n<em>pi \ </em> \ cos(n*pi)<br>$$</p>
<h5 id="根据此公式得到了傅里叶系数为复函数，所以需要用一个模的图像和一个幅角图像来表示："><a href="#根据此公式得到了傅里叶系数为复函数，所以需要用一个模的图像和一个幅角图像来表示：" class="headerlink" title="根据此公式得到了傅里叶系数为复函数，所以需要用一个模的图像和一个幅角图像来表示："></a>根据此公式得到了傅里叶系数为复函数，所以需要用一个模的图像和一个幅角图像来表示：</h5><img src="C:\Z.Sagapo\myblog\source\_posts\信号二\3.png" alt="3" style="zoom: 67%;" />

<h5 id="上图为模值，下图为幅角，代码为："><a href="#上图为模值，下图为幅角，代码为：" class="headerlink" title="上图为模值，下图为幅角，代码为："></a>上图为模值，下图为幅角，代码为：</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t = <span class="number">-11</span>:<span class="number">1</span>:<span class="number">11</span>;</span><br><span class="line">tempfi = <span class="built_in">zeros</span>(<span class="built_in">size</span>(t));</span><br><span class="line">tempf = <span class="built_in">zeros</span>(<span class="built_in">size</span>(t));</span><br><span class="line"><span class="keyword">for</span> n = <span class="number">1</span>:<span class="number">23</span></span><br><span class="line">    tempn = n<span class="number">-12</span>;</span><br><span class="line">    tempf(n) = <span class="built_in">abs</span>((<span class="number">1</span>/(tempn*<span class="built_in">pi</span>)));</span><br><span class="line">    tempfi(n) = <span class="built_in">cos</span>(n*<span class="built_in">pi</span>)*<span class="built_in">pi</span> + <span class="built_in">pi</span>/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> tempfi(n) &gt; <span class="built_in">pi</span>/<span class="number">2</span></span><br><span class="line">        tempfi(n) = tempfi(n) - <span class="built_in">pi</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">stem(t,tempf);</span><br><span class="line">grid on;</span><br><span class="line">axis([<span class="number">-12</span> <span class="number">12</span> <span class="number">-0.05</span> <span class="number">0.4</span>]);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">stem(t,tempfi);</span><br><span class="line">axis([<span class="number">-12</span> <span class="number">12</span> <span class="number">-2</span> <span class="number">2</span>]);</span><br><span class="line">grid on;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="lt-3-gt-根据得到的傅里叶系数，将前9次谐波叠加得到了原函数随时间变化的拟合图像。根据拟合图像与原图像的对比，发现吉布斯现象发生在原点附近。-1"><a href="#lt-3-gt-根据得到的傅里叶系数，将前9次谐波叠加得到了原函数随时间变化的拟合图像。根据拟合图像与原图像的对比，发现吉布斯现象发生在原点附近。-1" class="headerlink" title="&lt;3&gt;根据得到的傅里叶系数，将前9次谐波叠加得到了原函数随时间变化的拟合图像。根据拟合图像与原图像的对比，发现吉布斯现象发生在原点附近。"></a>&lt;3&gt;根据得到的傅里叶系数，将前9次谐波叠加得到了原函数随时间变化的拟合图像。根据拟合图像与原图像的对比，发现吉布斯现象发生在原点附近。</h5><img src="C:\Z.Sagapo\myblog\source\_posts\信号二\15.png" alt="15" style="zoom: 67%;" />

<h5 id="代码为：-1"><a href="#代码为：-1" class="headerlink" title="代码为："></a>代码为：</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">t = <span class="number">-11</span>:<span class="number">1</span>:<span class="number">11</span>;</span><br><span class="line">tempfi = <span class="built_in">zeros</span>(<span class="built_in">size</span>(t));</span><br><span class="line">tempf = <span class="built_in">zeros</span>(<span class="built_in">size</span>(t));</span><br><span class="line"><span class="keyword">for</span> n = <span class="number">1</span>:<span class="number">23</span></span><br><span class="line">    tempn = n<span class="number">-12</span>;</span><br><span class="line">    tempf(n) = <span class="built_in">abs</span>((<span class="number">1</span>/(tempn*<span class="built_in">pi</span>)));</span><br><span class="line">    tempfi(n) = <span class="built_in">cos</span>(n*<span class="built_in">pi</span>)*<span class="built_in">pi</span> + <span class="built_in">pi</span>/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> tempfi(n) &gt; <span class="built_in">pi</span>/<span class="number">2</span></span><br><span class="line">        tempfi(n) = tempfi(n) - <span class="built_in">pi</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">stem(t,tempf);</span><br><span class="line">grid on;</span><br><span class="line">axis([<span class="number">-12</span> <span class="number">12</span> <span class="number">-0.05</span> <span class="number">0.4</span>]);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">stem(t,tempfi);</span><br><span class="line">axis([<span class="number">-12</span> <span class="number">12</span> <span class="number">-2</span> <span class="number">2</span>]);</span><br><span class="line">grid on;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="题目二：-1"><a href="#题目二：-1" class="headerlink" title="题目二："></a>题目二：</h5><h5 id="首先根据原函数的傅里叶系数不断叠加拟合出原函数的图像，根据图像猜测原函数的表达式，然后再根据猜测的表达式求出函数的傅里叶系数，在求出傅里叶系数的过程中，需要通过积分运算，在matlab中，将积分运算转化为各个小段的离散面积的叠加最终得到猜测函数的傅里叶系数，与原函数的傅里叶系数比较，成功验证猜测的正确性。-1"><a href="#首先根据原函数的傅里叶系数不断叠加拟合出原函数的图像，根据图像猜测原函数的表达式，然后再根据猜测的表达式求出函数的傅里叶系数，在求出傅里叶系数的过程中，需要通过积分运算，在matlab中，将积分运算转化为各个小段的离散面积的叠加最终得到猜测函数的傅里叶系数，与原函数的傅里叶系数比较，成功验证猜测的正确性。-1" class="headerlink" title="首先根据原函数的傅里叶系数不断叠加拟合出原函数的图像，根据图像猜测原函数的表达式，然后再根据猜测的表达式求出函数的傅里叶系数，在求出傅里叶系数的过程中，需要通过积分运算，在matlab中，将积分运算转化为各个小段的离散面积的叠加最终得到猜测函数的傅里叶系数，与原函数的傅里叶系数比较，成功验证猜测的正确性。"></a>首先根据原函数的傅里叶系数不断叠加拟合出原函数的图像，根据图像猜测原函数的表达式，然后再根据猜测的表达式求出函数的傅里叶系数，在求出傅里叶系数的过程中，需要通过积分运算，在matlab中，将积分运算转化为各个小段的离散面积的叠加最终得到猜测函数的傅里叶系数，与原函数的傅里叶系数比较，成功验证猜测的正确性。</h5><h5 id="lt-1-gt-在这个过程中，第一个算法的主要部分是一个二重循环过程，外部循环为对时间t进行循环，目的是得到函数随时间变化的数值，内部循环为对谐波次数N进行循环从而得到逼近程度较高的图像"><a href="#lt-1-gt-在这个过程中，第一个算法的主要部分是一个二重循环过程，外部循环为对时间t进行循环，目的是得到函数随时间变化的数值，内部循环为对谐波次数N进行循环从而得到逼近程度较高的图像" class="headerlink" title="&lt;1&gt;在这个过程中，第一个算法的主要部分是一个二重循环过程，外部循环为对时间t进行循环，目的是得到函数随时间变化的数值，内部循环为对谐波次数N进行循环从而得到逼近程度较高的图像"></a>&lt;1&gt;在这个过程中，第一个算法的主要部分是一个二重循环过程，外部循环为对时间t进行循环，目的是得到函数随时间变化的数值，内部循环为对谐波次数N进行循环从而得到逼近程度较高的图像</h5><h5 id="带入谐波次数为N-x3D-100000，得到逼近的图像为："><a href="#带入谐波次数为N-x3D-100000，得到逼近的图像为：" class="headerlink" title="带入谐波次数为N &#x3D; 100000，得到逼近的图像为："></a>带入谐波次数为N &#x3D; 100000，得到逼近的图像为：</h5><img src="C:\Z.Sagapo\myblog\source\_posts\信号二\4.png" alt="4" style="zoom: 67%;" />

<h5 id="从图像可以看出基本上没有发生吉布斯现象，这是由于取的谐波次数N-x3D-100000极大的原因，从此图像可以得到猜测的函数公式为："><a href="#从图像可以看出基本上没有发生吉布斯现象，这是由于取的谐波次数N-x3D-100000极大的原因，从此图像可以得到猜测的函数公式为：" class="headerlink" title="从图像可以看出基本上没有发生吉布斯现象，这是由于取的谐波次数N&#x3D;100000极大的原因，从此图像可以得到猜测的函数公式为："></a>从图像可以看出基本上没有发生吉布斯现象，这是由于取的谐波次数N&#x3D;100000极大的原因，从此图像可以得到猜测的函数公式为：</h5><p>$$<br>f(t) &#x3D; -1&#x2F;2<em>t + pi&#x2F;2 (0&lt;t&lt;2</em>pi)<br>\<br>\ T &#x3D; 2*pi；<br>$$</p>
<h5 id="具体代码为："><a href="#具体代码为：" class="headerlink" title="具体代码为："></a>具体代码为：</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">N =<span class="number">100000</span>;</span><br><span class="line">T = <span class="number">10</span>;</span><br><span class="line">t = -T:<span class="number">0.01</span>:T;</span><br><span class="line">out = -T*<span class="number">100</span>:T*<span class="number">100</span>;</span><br><span class="line">ti = <span class="number">1</span>:<span class="number">2</span>*N+<span class="number">1</span>;</span><br><span class="line">aout = <span class="built_in">zeros</span>(<span class="built_in">size</span>(t));</span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = -T:<span class="number">0.01</span>:T</span><br><span class="line">    temp = <span class="number">0</span>;</span><br><span class="line">    num = num+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> n = <span class="number">1</span>:N</span><br><span class="line">        aout(num) =  temp + (<span class="number">1</span>/n)*<span class="built_in">sin</span>(n*<span class="built_in">i</span>);</span><br><span class="line">        temp = aout(num);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">plot</span>(t,aout);</span><br><span class="line">grid on;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="lt-2-gt-在此计算过程中，最主要的实现是如何进行积分的运算，我将积分运算转化为离散的小段的相加运算，得到猜测函数的傅里叶系数"><a href="#lt-2-gt-在此计算过程中，最主要的实现是如何进行积分的运算，我将积分运算转化为离散的小段的相加运算，得到猜测函数的傅里叶系数" class="headerlink" title="&lt;2&gt;在此计算过程中，最主要的实现是如何进行积分的运算，我将积分运算转化为离散的小段的相加运算，得到猜测函数的傅里叶系数"></a>&lt;2&gt;在此计算过程中，最主要的实现是如何进行积分的运算，我将积分运算转化为离散的小段的相加运算，得到猜测函数的傅里叶系数</h5><h5 id="循环计算过程如下："><a href="#循环计算过程如下：" class="headerlink" title="循环计算过程如下："></a>循环计算过程如下：</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> n = <span class="number">0</span>:N/<span class="number">2</span></span><br><span class="line">    f_cos = @(t) f(t) .* <span class="built_in">cos</span>(n*omega*t);</span><br><span class="line">    f_sin = @(t) f(t) .* <span class="built_in">sin</span>(n*omega*t);</span><br><span class="line">    </span><br><span class="line">    bn(n+<span class="number">1</span>) = (<span class="number">2</span>/T) * integral(f_sin, <span class="number">0</span>, T);</span><br><span class="line">    an(n+<span class="number">1</span>) = (<span class="number">2</span>/T) * integral(f_cos, <span class="number">0</span>, T);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h5 id="最终得到了猜测函数的傅里叶系数，将其与原函数的傅里叶系数比较得到了："><a href="#最终得到了猜测函数的傅里叶系数，将其与原函数的傅里叶系数比较得到了：" class="headerlink" title="最终得到了猜测函数的傅里叶系数，将其与原函数的傅里叶系数比较得到了："></a>最终得到了猜测函数的傅里叶系数，将其与原函数的傅里叶系数比较得到了：</h5><img src="C:\Z.Sagapo\myblog\source\_posts\信号二\17.png" alt="17" style="zoom: 80%;" />

<h5 id="由此可以发现，得到的两个函数的傅里叶系数基本相同，就可以推断出我们的猜测是正确的。"><a href="#由此可以发现，得到的两个函数的傅里叶系数基本相同，就可以推断出我们的猜测是正确的。" class="headerlink" title="由此可以发现，得到的两个函数的傅里叶系数基本相同，就可以推断出我们的猜测是正确的。"></a>由此可以发现，得到的两个函数的傅里叶系数基本相同，就可以推断出我们的猜测是正确的。</h5><h5 id="代码为：-2"><a href="#代码为：-2" class="headerlink" title="代码为："></a>代码为：</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">f = @(t) <span class="number">-1</span>*(<span class="number">1</span>/<span class="number">2</span>)*t + <span class="built_in">pi</span>/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">T = <span class="number">2</span>*<span class="built_in">pi</span>;</span><br><span class="line">N = <span class="number">100</span>; </span><br><span class="line"></span><br><span class="line">an = <span class="built_in">zeros</span>(<span class="number">1</span>, N/<span class="number">2</span>+<span class="number">1</span>); </span><br><span class="line">bn = <span class="built_in">zeros</span>(<span class="number">1</span>, N/<span class="number">2</span>+<span class="number">1</span>); </span><br><span class="line">omega = <span class="number">2</span>*<span class="built_in">pi</span>/T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n = <span class="number">0</span>:N/<span class="number">2</span></span><br><span class="line">    f_cos = @(t) f(t) .* <span class="built_in">cos</span>(n*omega*t);</span><br><span class="line">    f_sin = @(t) f(t) .* <span class="built_in">sin</span>(n*omega*t);</span><br><span class="line">    </span><br><span class="line">    bn(n+<span class="number">1</span>) = (<span class="number">2</span>/T) * integral(f_sin, <span class="number">0</span>, T);</span><br><span class="line">    an(n+<span class="number">1</span>) = (<span class="number">2</span>/T) * integral(f_cos, <span class="number">0</span>, T);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fn = <span class="built_in">zeros</span>(<span class="number">1</span>,N/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> n = <span class="number">1</span>:N/<span class="number">2</span>+<span class="number">1</span></span><br><span class="line">    fn(n) = <span class="number">1</span>/n;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = <span class="number">1</span>:N/<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">stem(t,fn);</span><br><span class="line">axis([<span class="number">-1</span> <span class="number">55</span> <span class="number">-0.2</span> <span class="number">1.2</span>]);</span><br><span class="line">grid on;</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;原傅里叶系数&#x27;</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">stem(t<span class="number">-1</span>,bn);</span><br><span class="line">axis([<span class="number">-1</span> <span class="number">55</span> <span class="number">-0.2</span> <span class="number">1.2</span>]);</span><br><span class="line">grid on;</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;猜测函数傅里叶系数&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="题目三：-2"><a href="#题目三：-2" class="headerlink" title="题目三："></a>题目三：</h5><h5 id="给定的表达式代表着只计算前N个谐波的和，将此作为拟合函数与原函数图像进行比较，根据N的值计算得到了傅里叶级数的图像，根据图像可以就看出函数图像最大值的大小变化，这个变化反映了傅里叶级数的吉布斯现象的大小。发现在N-x3D-50，100时，吉布斯现象均较为明显，最大值较大，当将N设为100000即N趋近于无穷时，可以看出图像的吉布斯现象基本没有发生。-1"><a href="#给定的表达式代表着只计算前N个谐波的和，将此作为拟合函数与原函数图像进行比较，根据N的值计算得到了傅里叶级数的图像，根据图像可以就看出函数图像最大值的大小变化，这个变化反映了傅里叶级数的吉布斯现象的大小。发现在N-x3D-50，100时，吉布斯现象均较为明显，最大值较大，当将N设为100000即N趋近于无穷时，可以看出图像的吉布斯现象基本没有发生。-1" class="headerlink" title="给定的表达式代表着只计算前N个谐波的和，将此作为拟合函数与原函数图像进行比较，根据N的值计算得到了傅里叶级数的图像，根据图像可以就看出函数图像最大值的大小变化，这个变化反映了傅里叶级数的吉布斯现象的大小。发现在N &#x3D; 50，100时，吉布斯现象均较为明显，最大值较大，当将N设为100000即N趋近于无穷时，可以看出图像的吉布斯现象基本没有发生。"></a>给定的表达式代表着只计算前N个谐波的和，将此作为拟合函数与原函数图像进行比较，根据N的值计算得到了傅里叶级数的图像，根据图像可以就看出函数图像最大值的大小变化，这个变化反映了傅里叶级数的吉布斯现象的大小。发现在N &#x3D; 50，100时，吉布斯现象均较为明显，最大值较大，当将N设为100000即N趋近于无穷时，可以看出图像的吉布斯现象基本没有发生。</h5><h5 id="吉布斯现象（又叫吉布斯效应）：将具有不连续点的周期函数（如矩形脉冲-进行傅立叶级数展开后，选取有限项进行合成。当选取的项数越多，在所合成的波形中出现的峰起越靠近原信号的不连续点。当选取的项数很大时，该峰起值趋于一个常数，大约等于总跳变值的9-。"><a href="#吉布斯现象（又叫吉布斯效应）：将具有不连续点的周期函数（如矩形脉冲-进行傅立叶级数展开后，选取有限项进行合成。当选取的项数越多，在所合成的波形中出现的峰起越靠近原信号的不连续点。当选取的项数很大时，该峰起值趋于一个常数，大约等于总跳变值的9-。" class="headerlink" title="吉布斯现象（又叫吉布斯效应）：将具有不连续点的周期函数（如矩形脉冲)进行傅立叶级数展开后，选取有限项进行合成。当选取的项数越多，在所合成的波形中出现的峰起越靠近原信号的不连续点。当选取的项数很大时，该峰起值趋于一个常数，大约等于总跳变值的9%。"></a>吉布斯现象（又叫吉布斯效应）：将具有不连续点的<a href="https://baike.baidu.com/item/%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/8152668?fromModule=lemma_inlink">周期函数</a>（如<a href="https://baike.baidu.com/item/%E7%9F%A9%E5%BD%A2%E8%84%89%E5%86%B2/10697028?fromModule=lemma_inlink">矩形脉冲</a>)进行<a href="https://baike.baidu.com/item/%E5%82%85%E7%AB%8B%E5%8F%B6%E7%BA%A7%E6%95%B0/7649046?fromModule=lemma_inlink">傅立叶级数</a>展开后，选取有限项进行合成。当选取的<a href="https://baike.baidu.com/item/%E9%A1%B9%E6%95%B0/1721202?fromModule=lemma_inlink">项数</a>越多，在所合成的波形中出现的峰起越靠近原信号的不连续点。当选取的项数很大时，该峰起值趋于一个常数，大约等于总跳变值的9%。</h5><h5 id="首先根据题目二的算法进行循环得到前N次谐波叠加的图像为："><a href="#首先根据题目二的算法进行循环得到前N次谐波叠加的图像为：" class="headerlink" title="首先根据题目二的算法进行循环得到前N次谐波叠加的图像为："></a>首先根据题目二的算法进行循环得到前N次谐波叠加的图像为：</h5><h5 id="N-x3D-5："><a href="#N-x3D-5：" class="headerlink" title="N &#x3D; 5："></a>N &#x3D; 5：</h5><img src="C:\Z.Sagapo\myblog\source\_posts\信号二\5.png" alt="5" style="zoom:67%;" />

<h5 id="N-x3D-50："><a href="#N-x3D-50：" class="headerlink" title="N &#x3D; 50："></a>N &#x3D; 50：</h5><img src="C:\Z.Sagapo\myblog\source\_posts\信号二\6.png" alt="6" style="zoom:67%;" />

<h5 id="N-x3D-100"><a href="#N-x3D-100" class="headerlink" title="N &#x3D; 100:"></a>N &#x3D; 100:</h5><img src="C:\Z.Sagapo\myblog\source\_posts\信号二\7.png" alt="7" style="zoom:67%;" />

<h5 id="N-x3D-100000"><a href="#N-x3D-100000" class="headerlink" title="N &#x3D; 100000:"></a>N &#x3D; 100000:</h5><img src="C:\Z.Sagapo\myblog\source\_posts\信号二\4-168930229952411.png" alt="4" style="zoom:67%;" />

<h5 id="得到每个图像的最大值为："><a href="#得到每个图像的最大值为：" class="headerlink" title="得到每个图像的最大值为："></a>得到每个图像的最大值为：</h5><p>$$<br>1.64，1.75，1.83，1.71<br>$$</p>
<h5 id="计算比值分别为："><a href="#计算比值分别为：" class="headerlink" title="计算比值分别为："></a>计算比值分别为：</h5><p>$$<br>4%, \ 11%, \ 16%, \ 8.9%<br>$$</p>
<h5 id="根据上述值可以发现，当N趋于无穷是，N次谐波的最大值变化与原函数最大值的比值趋于9"><a href="#根据上述值可以发现，当N趋于无穷是，N次谐波的最大值变化与原函数最大值的比值趋于9" class="headerlink" title="根据上述值可以发现，当N趋于无穷是，N次谐波的最大值变化与原函数最大值的比值趋于9%"></a>根据上述值可以发现，当N趋于无穷是，N次谐波的最大值变化与原函数最大值的比值趋于9%</h5><h5 id="下面是比值图像："><a href="#下面是比值图像：" class="headerlink" title="下面是比值图像："></a>下面是比值图像：</h5><img src="C:\Z.Sagapo\myblog\source\_posts\信号二\18.png" alt="18" style="zoom:67%;" />

<h5 id="代码为：-3"><a href="#代码为：-3" class="headerlink" title="代码为："></a>代码为：</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">N = <span class="number">10000</span>;</span><br><span class="line">T = <span class="number">10</span>;</span><br><span class="line">t = -T:<span class="number">0.01</span>:T;</span><br><span class="line">out = -T*<span class="number">100</span>:T*<span class="number">100</span>;</span><br><span class="line">ti = <span class="number">1</span>:<span class="number">2</span>*N+<span class="number">1</span>;</span><br><span class="line">aout = <span class="built_in">zeros</span>(<span class="built_in">size</span>(t));</span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = -T:<span class="number">0.01</span>:T</span><br><span class="line">    temp = <span class="number">0</span>;</span><br><span class="line">    num = num+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> n = <span class="number">1</span>:N</span><br><span class="line">        aout(num) =  temp + (<span class="number">1</span>/n)*<span class="built_in">sin</span>(n*<span class="built_in">i</span>);</span><br><span class="line">        temp = aout(num);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">plot</span>(t,aout);</span><br><span class="line">grid on;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">n = [<span class="number">1.58</span>,<span class="number">1.79</span>,<span class="number">1.83</span>,<span class="number">1.56</span>];</span><br><span class="line">out = <span class="built_in">zeros</span>(<span class="built_in">size</span>(n));</span><br><span class="line">n = n/(<span class="built_in">pi</span>/<span class="number">2</span>);</span><br><span class="line">t = <span class="number">1</span>:<span class="number">4</span>;</span><br><span class="line">stem(t,n);</span><br><span class="line">grid on;</span><br><span class="line">axis([<span class="number">0</span> <span class="number">5</span> <span class="number">-0.1</span> <span class="number">1.2</span>]);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;比值图像&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h5 id="题目四：-2"><a href="#题目四：-2" class="headerlink" title="题目四："></a>题目四：</h5><h5 id="根据题目四，我们将这些小于N的傅里叶级数相加取平均值，然后可以得到了对应N的函数波形，将此波形与题目三中对应N大小相同的波形进行比较，发现题目四中的波形的吉布斯现象减弱，拟合效果更好。-1"><a href="#根据题目四，我们将这些小于N的傅里叶级数相加取平均值，然后可以得到了对应N的函数波形，将此波形与题目三中对应N大小相同的波形进行比较，发现题目四中的波形的吉布斯现象减弱，拟合效果更好。-1" class="headerlink" title="根据题目四，我们将这些小于N的傅里叶级数相加取平均值，然后可以得到了对应N的函数波形，将此波形与题目三中对应N大小相同的波形进行比较，发现题目四中的波形的吉布斯现象减弱，拟合效果更好。"></a>根据题目四，我们将这些小于N的傅里叶级数相加取平均值，然后可以得到了对应N的函数波形，将此波形与题目三中对应N大小相同的波形进行比较，发现题目四中的波形的吉布斯现象减弱，拟合效果更好。</h5><h5 id="图像为："><a href="#图像为：" class="headerlink" title="图像为："></a>图像为：</h5><h5 id="N-x3D-5：-1"><a href="#N-x3D-5：-1" class="headerlink" title="N &#x3D; 5："></a>N &#x3D; 5：</h5><img src="C:\Z.Sagapo\myblog\source\_posts\信号二\12.png" alt="12" style="zoom:67%;" />

<h5 id="N-x3D-50：-1"><a href="#N-x3D-50：-1" class="headerlink" title="N &#x3D; 50："></a>N &#x3D; 50：</h5><img src="C:\Z.Sagapo\myblog\source\_posts\信号二\11.png" alt="11" style="zoom:67%;" />

<h5 id="N-x3D-100："><a href="#N-x3D-100：" class="headerlink" title="N &#x3D; 100："></a>N &#x3D; 100：</h5><img src="C:\Z.Sagapo\myblog\source\_posts\信号二\13.png" alt="13" style="zoom:67%;" />

<h5 id="N-x3D-100000："><a href="#N-x3D-100000：" class="headerlink" title="N &#x3D; 100000："></a>N &#x3D; 100000：</h5><img src="C:\Z.Sagapo\myblog\source\_posts\信号二\14.png" alt="14" style="zoom: 67%;" />

<h5 id="代码为：-4"><a href="#代码为：-4" class="headerlink" title="代码为："></a>代码为：</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">Ni = [<span class="number">5</span>,<span class="number">50</span>,<span class="number">100</span>];</span><br><span class="line">T = <span class="number">10</span>;</span><br><span class="line">t = -T:<span class="number">0.01</span>:T;</span><br><span class="line">out = <span class="built_in">zeros</span>(<span class="built_in">size</span>(t));</span><br><span class="line">aout = <span class="built_in">zeros</span>(<span class="built_in">size</span>(t));</span><br><span class="line">N = <span class="number">1000</span>;</span><br><span class="line">num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = -T:<span class="number">0.01</span>:T</span><br><span class="line">    temp1=<span class="number">0</span>;</span><br><span class="line">    num = num+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span>:N</span><br><span class="line">        <span class="keyword">for</span> n = <span class="number">1</span>:<span class="built_in">j</span></span><br><span class="line">            out(num) = temp1 + (<span class="number">1</span>/n)*<span class="built_in">sin</span>(n*<span class="built_in">i</span>);</span><br><span class="line">            temp1 = out(num);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    out(num) = out(num)/N;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = -T:<span class="number">0.01</span>:T</span><br><span class="line">    temp = <span class="number">0</span>;</span><br><span class="line">    num = num+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> n = <span class="number">1</span>:N</span><br><span class="line">        aout(num) =  temp + (<span class="number">1</span>/n)*<span class="built_in">sin</span>(n*<span class="built_in">i</span>);</span><br><span class="line">        temp = aout(num);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">plot</span>(t,aout);</span><br><span class="line">grid on;</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line"><span class="built_in">plot</span>(t,out);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;原绘制函数&#x27;</span>,<span class="string">&#x27;现有绘制函数&#x27;</span>);</span><br><span class="line">axis([<span class="number">-11</span> <span class="number">11</span> <span class="number">-2</span> <span class="number">2</span>]);</span><br></pre></td></tr></table></figure>



<h4 id="五、实验总结"><a href="#五、实验总结" class="headerlink" title="五、实验总结"></a>五、实验总结</h4><h5 id="本次的实验的逻辑内容并不是很困难，大部分的时间用在了如何做出对应图像的函数上面，在本次实验中，我认为最困难的一点是对傅里叶系数的求解，因为这个求解过程需要把积分的过程变成离散的小段叠加的过程，两者之间的转换是相对来说比较困难的。这次实验最大的收获就是自己对于原函数的模拟逼近过程，以及对吉布斯现象的观察。"><a href="#本次的实验的逻辑内容并不是很困难，大部分的时间用在了如何做出对应图像的函数上面，在本次实验中，我认为最困难的一点是对傅里叶系数的求解，因为这个求解过程需要把积分的过程变成离散的小段叠加的过程，两者之间的转换是相对来说比较困难的。这次实验最大的收获就是自己对于原函数的模拟逼近过程，以及对吉布斯现象的观察。" class="headerlink" title="本次的实验的逻辑内容并不是很困难，大部分的时间用在了如何做出对应图像的函数上面，在本次实验中，我认为最困难的一点是对傅里叶系数的求解，因为这个求解过程需要把积分的过程变成离散的小段叠加的过程，两者之间的转换是相对来说比较困难的。这次实验最大的收获就是自己对于原函数的模拟逼近过程，以及对吉布斯现象的观察。"></a>本次的实验的逻辑内容并不是很困难，大部分的时间用在了如何做出对应图像的函数上面，在本次实验中，我认为最困难的一点是对傅里叶系数的求解，因为这个求解过程需要把积分的过程变成离散的小段叠加的过程，两者之间的转换是相对来说比较困难的。这次实验最大的收获就是自己对于原函数的模拟逼近过程，以及对吉布斯现象的观察。</h5><h4 id="六、参考文献"><a href="#六、参考文献" class="headerlink" title="六、参考文献"></a>六、参考文献</h4><h5 id="lt-1-gt-https-baike-baidu-com-item-E5-90-89-E5-B8-83-E6-96-AF-E7-8E-B0-E8-B1-A1"><a href="#lt-1-gt-https-baike-baidu-com-item-E5-90-89-E5-B8-83-E6-96-AF-E7-8E-B0-E8-B1-A1" class="headerlink" title="&lt;1&gt;https://baike.baidu.com/item/%E5%90%89%E5%B8%83%E6%96%AF%E7%8E%B0%E8%B1%A1"></a>&lt;1&gt;<a href="https://baike.baidu.com/item/%E5%90%89%E5%B8%83%E6%96%AF%E7%8E%B0%E8%B1%A1">https://baike.baidu.com/item/%E5%90%89%E5%B8%83%E6%96%AF%E7%8E%B0%E8%B1%A1</a></h5><h5 id="lt-2-gt-https-blog-csdn-net-lhiSt-article-details-103287689"><a href="#lt-2-gt-https-blog-csdn-net-lhiSt-article-details-103287689" class="headerlink" title="&lt;2&gt;https://blog.csdn.net/lhiSt/article/details/103287689"></a>&lt;2&gt;<a href="https://blog.csdn.net/lhiSt/article/details/103287689">https://blog.csdn.net/lhiSt/article/details/103287689</a></h5><h5 id="lt-3-gt-https-blog-csdn-net-hellocsz-article-details-88932356"><a href="#lt-3-gt-https-blog-csdn-net-hellocsz-article-details-88932356" class="headerlink" title="&lt;3&gt;https://blog.csdn.net/hellocsz/article/details/88932356"></a>&lt;3&gt;<a href="https://blog.csdn.net/hellocsz/article/details/88932356">https://blog.csdn.net/hellocsz/article/details/88932356</a></h5><h5 id="lt-4-gt-https-blog-csdn-net-Redmoon955331-article-details-125048310"><a href="#lt-4-gt-https-blog-csdn-net-Redmoon955331-article-details-125048310" class="headerlink" title="&lt;4&gt;https://blog.csdn.net/Redmoon955331/article/details/125048310"></a>&lt;4&gt;<a href="https://blog.csdn.net/Redmoon955331/article/details/125048310">https://blog.csdn.net/Redmoon955331/article/details/125048310</a></h5><h5 id="lt-5-gt-matlab官方帮助文档"><a href="#lt-5-gt-matlab官方帮助文档" class="headerlink" title="&lt;5&gt;matlab官方帮助文档"></a>&lt;5&gt;matlab官方帮助文档</h5>]]></content>
      <categories>
        <category>信号</category>
      </categories>
      <tags>
        <tag>大学大作业</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/08/03/%E5%9B%BE%E8%AE%BA%E4%B9%8B%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
    <content><![CDATA[<h3 id="图论之最小生成树"><a href="#图论之最小生成树" class="headerlink" title="图论之最小生成树"></a>图论之最小生成树</h3><p>欲修筑连接 n 个城市的铁路，已知 i ii 城与 j jj 城之间的铁路造价为 c i j c_{ij}c ij</p>
<p>  设计一个线路图，使总造价最低。上述问题的数学模型是在连通赋权图上求权最小的生成树。赋权图的具有最小权的生成树叫做最小生成树。 下面介绍构造最小生成树的两种常用算法。</p>
<h4 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h4><p>1、把图 G GG 中的所有边全部去掉，得到所有单独的顶点 V VV 构成图 T &#x3D; ( V , T&#x3D;(V,T&#x3D;(V, { } ) ))，其中 V VV 是顶点集合；<br>2、从 G GG 中取出当前权值最小的边，如果该边加入 T TT 的边的集合后 T TT 不形成回路，则加入 T TT ；否则舍弃；<br>3、重复第2步，直到 T TT 中有 n − 1 n-1n−1 条边 （ n nn 是顶点数）；<br>4、若第2步中遇到两条权值相同的最小权值边，任选一条即可，所以最小生成树可能不唯一，但权值之和相同。</p>
<h5 id="Kruskal简单理解就是每次都选一条权值最小的边。适合边少点多的图。"><a href="#Kruskal简单理解就是每次都选一条权值最小的边。适合边少点多的图。" class="headerlink" title="Kruskal简单理解就是每次都选一条权值最小的边。适合边少点多的图。"></a>Kruskal简单理解就是每次都选一条权值最小的边。适合<strong>边少点多</strong>的图。</h5><img src="https://img-blog.csdnimg.cn/576414228f374c3dad1ef2b32faee40f.png#pic_center" alt="img" style="zoom:150%;" />

<p>用Kruskal算法求解上图的Matlab代码为：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc;clear; </span><br><span class="line"><span class="comment">% 输入邻接矩阵</span></span><br><span class="line">a(<span class="number">1</span>,<span class="number">2</span>)=<span class="number">50</span>; a(<span class="number">1</span>,<span class="number">3</span>)=<span class="number">60</span>; a(<span class="number">2</span>,<span class="number">4</span>)=<span class="number">65</span>; a(<span class="number">2</span>,<span class="number">5</span>)=<span class="number">40</span>; </span><br><span class="line">a(<span class="number">3</span>,<span class="number">4</span>)=<span class="number">52</span>;a(<span class="number">3</span>,<span class="number">7</span>)=<span class="number">45</span>; a(<span class="number">4</span>,<span class="number">5</span>)=<span class="number">50</span>; a(<span class="number">4</span>,<span class="number">6</span>)=<span class="number">30</span>; </span><br><span class="line">a(<span class="number">4</span>,<span class="number">7</span>)=<span class="number">42</span>; a(<span class="number">5</span>,<span class="number">6</span>)=<span class="number">70</span>;  </span><br><span class="line">[<span class="built_in">i</span>,<span class="built_in">j</span>,b]=<span class="built_in">find</span>(a);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>构建弧表表示矩阵<code>data</code>，及所有边的索引矩阵<code>index</code>：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">data=[i&#x27;;j&#x27;;b&#x27;]</span><br><span class="line">index=data(<span class="number">1</span>:<span class="number">2</span>,:)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">loop=<span class="built_in">max</span>(<span class="built_in">size</span>(a))<span class="number">-1</span>;</span><br><span class="line">result=[];</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">length</span>(result)&lt;loop </span><br><span class="line">   temp=<span class="built_in">min</span>(data(<span class="number">3</span>,:));  <span class="comment">% 30</span></span><br><span class="line">   flag=<span class="built_in">find</span>(data(<span class="number">3</span>,:)==temp);  <span class="comment">% 7--&gt;在第七个位置上</span></span><br><span class="line">   flag=flag(<span class="number">1</span>);</span><br><span class="line">   v1=data(<span class="number">1</span>,flag);  <span class="comment">% 第7个位置上对应的第一行数据为4</span></span><br><span class="line">   v2=data(<span class="number">2</span>,flag);  <span class="comment">% 第7个位置上对应的第二行数据为6</span></span><br><span class="line">   <span class="keyword">if</span> index(<span class="number">1</span>,flag)~=index(<span class="number">2</span>,flag) </span><br><span class="line">      result=[result,data(:,flag)]; <span class="comment">% 4 6 30</span></span><br><span class="line">   <span class="keyword">end</span> </span><br><span class="line">   index(<span class="built_in">find</span>(index==v2))=v1; <span class="comment">% 把index里面的6全部改成4</span></span><br><span class="line">   data(:,flag)=[]; <span class="comment">% 删除第七个位置的三个值 4 6 30</span></span><br><span class="line">   index(:,flag)=[]; <span class="comment">% 删除第七个位置的索引</span></span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line">result </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>求得的结果为：</p>
<img src="https://img-blog.csdnimg.cn/ba5d24e787594f02b2356af15a8e1eec.png#pic_center" alt="img" style="zoom:150%;" />



<h4 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h4><p>1、设置一个图 U UU ，将原图 G GG 中任意一顶点取出加入 U UU 中；<br>2、在所有 u ∈ U u∈Uu∈U， v ∈ ( V − U ) v∈(V-U)v∈(V−U) 的边 ( u , v ) (u,v)(u,v) 中找到一条权值最小的边，并入图 U UU 中；<br>3、重复步骤2，直到 U UU 中包含了所有顶点；<br>4、若第2步中遇到两条权值相同的最小权值边，任选一条即可，所以最小生成树可能不唯一，但权值之和相同。</p>
<h5 id="使用Prim算法求解的Matlab代码如下："><a href="#使用Prim算法求解的Matlab代码如下：" class="headerlink" title="使用Prim算法求解的Matlab代码如下："></a>使用Prim算法求解的Matlab代码如下：</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">zeros</span>(<span class="number">7</span>);</span><br><span class="line">a(<span class="number">1</span>,<span class="number">2</span>)=<span class="number">50</span>; </span><br><span class="line">a(<span class="number">1</span>,<span class="number">3</span>)=<span class="number">60</span>; </span><br><span class="line">a(<span class="number">2</span>,<span class="number">4</span>)=<span class="number">65</span>; </span><br><span class="line">a(<span class="number">2</span>,<span class="number">5</span>)=<span class="number">40</span>; </span><br><span class="line">a(<span class="number">3</span>,<span class="number">4</span>)=<span class="number">52</span>;</span><br><span class="line">a(<span class="number">3</span>,<span class="number">7</span>)=<span class="number">45</span>; </span><br><span class="line">a(<span class="number">4</span>,<span class="number">5</span>)=<span class="number">50</span>; </span><br><span class="line">a(<span class="number">4</span>,<span class="number">6</span>)=<span class="number">30</span>;</span><br><span class="line">a(<span class="number">4</span>,<span class="number">7</span>)=<span class="number">42</span>; </span><br><span class="line">a(<span class="number">5</span>,<span class="number">6</span>)=<span class="number">70</span>;  </span><br><span class="line">a=a+a&#x27;;</span><br><span class="line">a(<span class="built_in">find</span>(a==<span class="number">0</span>))=<span class="built_in">inf</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>初始化之后的矩阵 a a<em>a</em> 为：</p>
<img src="https://img-blog.csdnimg.cn/25dc2cf7264c4a84a6e1f27e24feeecf.png" alt="img"  />

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">result=[]  <span class="comment">% 存储最小生成树</span></span><br><span class="line">p=<span class="number">1</span>;  <span class="comment">% 选取顶点1</span></span><br><span class="line">tb=<span class="number">2</span>:<span class="built_in">length</span>(a)  <span class="comment">% 剩余顶点</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">length</span>(result)~=<span class="built_in">length</span>(a)<span class="number">-1</span>  <span class="comment">% 当边的个数=n-1时，退出循环</span></span><br><span class="line">   temp=a(p,tb);  <span class="comment">% tb中存储着其他未处理的顶点,temp存储着未处理的边的权重</span></span><br><span class="line">   temp=temp(:); </span><br><span class="line">   d=<span class="built_in">min</span>(temp); </span><br><span class="line">   [jb,kb]=<span class="built_in">find</span>(a(p,tb)==d);  <span class="comment">% 找到最小权的横纵坐标</span></span><br><span class="line">   <span class="built_in">j</span>=p(jb(<span class="number">1</span>));  <span class="comment">% j存储找到的边的起始位置，可能有多最小权，但我们只取一个</span></span><br><span class="line">   k=tb(kb(<span class="number">1</span>));  <span class="comment">% k存储找到的边的末位置，可能有多最小权，但我们只取一个</span></span><br><span class="line">   result=[result,[<span class="built_in">j</span>;k;d]];  <span class="comment">% 存储找到的此条边的信息</span></span><br><span class="line">   p=[p,k];  <span class="comment">% 包含新加入的顶点</span></span><br><span class="line">   tb(<span class="built_in">find</span>(tb==k))=[];  <span class="comment">% 在tb中删除与刚加入的边相连接的点 </span></span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line">result</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/08/03/%E5%9B%BE%E8%AE%BA%E4%B9%8B%E7%BD%91%E7%BB%9C%E6%9C%80%E5%A4%A7%E6%B5%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="图论之网络最大流问题"><a href="#图论之网络最大流问题" class="headerlink" title="图论之网络最大流问题"></a>图论之网络最大流问题</h3><p>设有向网络N（V，A），在发点Vs 有一批货，要通过网络上的弧运输到收点Vt 去，受运输条件限制，每条弧aij在单位时间内通过的车辆数不能超过cij 辆，分析：如何组织运输才能使从Vs到Vt 在单位时间内通过的车辆达到最多？<br>上面描述的这类问题，称为最大流问题。<br>例：如图10.3.1中，有一批物资需要用汽车尽快从发点①运到收点⑦，弧（i，j）上所标的数字表示该条道路在单位时间内最多能通过的车辆数（单位：百辆），问如何调运，才能使单位时间里有最多的车辆从①调到⑦。</p>
<img src="https://img-blog.csdnimg.cn/94d1ca6f24354c8eb6ee7ec7f75cc98e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZjeGdmZGp5,size_16,color_FFFFFF,t_70" alt="img" style="zoom:67%;" />



<h5 id="求解方法，弧标号法"><a href="#求解方法，弧标号法" class="headerlink" title="求解方法，弧标号法"></a>求解方法，弧标号法</h5><p>首先需要将最大流问题重新改画成为如下形式</p>
<img src="https://img-blog.csdnimg.cn/2c7e9d70aa8b49eba90bce9b852775b9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZjeGdmZGp5,size_16,color_FFFFFF,t_70" alt="img" style="zoom: 80%;" />

<p>如① 5 ②0 表示从①到②的最大通过量是5（百辆），从②到①的最大通过量是0；<br>第1次修改：<br>①从发点s到收点t找一条路，使得这条路上的所有弧前面的约束量。从图中可以看出，显然，①—③—⑥—⑦就是满足这样的条件的一条路。<br>②在路①—③—⑥—⑦中,c13&#x3D;6 , c36&#x3D;7, c67&#x3D;7 ,所以取<br>p&#x3D;c13&#x3D;6;</p>
<img src="https://img-blog.csdnimg.cn/141193e46ba047e590d0362ecb2e96a2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZjeGdmZGp5,size_16,color_FFFFFF,t_70" alt="img" style="zoom:67%;" />

<p>同理，进行第2次修改：<br>选定①—②—⑤—⑦、</p>
<img src="https://img-blog.csdnimg.cn/1c09ec8fba1145f4a7e2116d7754c230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZjeGdmZGp5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:80%;" />

<p>①—④—⑥—⑦<br>①—④—⑥—⑤—⑦<br>①—④—⑥—③—⑤—⑦<br>一直修改到从发点①到收点⑦，再也不存在连通的起点容量都大于零的弧了</p>
<img src="https://img-blog.csdnimg.cn/21b146194dd84c6cbfea1ea5b078b594.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZjeGdmZGp5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:80%;" />

<p>依这样的调度方式，可以从发点s调运14（百辆）汽车到收点t。</p>
<img src="https://img-blog.csdnimg.cn/1173b53ba5e04b1d846eef80c7bef104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZjeGdmZGp5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom:67%;" />

<h5 id="最大流算法讨论"><a href="#最大流算法讨论" class="headerlink" title="最大流算法讨论"></a>最大流算法讨论</h5><h5 id="①一个图成为最大流图的条件是从发点到收点的每一条路上总存在某个起点容量为零的弧，我们称这样的路为饱和路；如果从s到t有一条路，它上面每条路的起点容量都大于零，则称为非饱和路。"><a href="#①一个图成为最大流图的条件是从发点到收点的每一条路上总存在某个起点容量为零的弧，我们称这样的路为饱和路；如果从s到t有一条路，它上面每条路的起点容量都大于零，则称为非饱和路。" class="headerlink" title="①一个图成为最大流图的条件是从发点到收点的每一条路上总存在某个起点容量为零的弧，我们称这样的路为饱和路；如果从s到t有一条路，它上面每条路的起点容量都大于零，则称为非饱和路。"></a>①一个图成为最大流图的条件是从发点到收点的每一条路上总存在某个起点容量为零的弧，我们称这样的路为饱和路；如果从s到t有一条路，它上面每条路的起点容量都大于零，则称为非饱和路。</h5><h5 id="由此可以得到一个结论：一个图是最大流图的充分必要条件是不存在从s到t的非饱和路。"><a href="#由此可以得到一个结论：一个图是最大流图的充分必要条件是不存在从s到t的非饱和路。" class="headerlink" title="由此可以得到一个结论：一个图是最大流图的充分必要条件是不存在从s到t的非饱和路。"></a>由此可以得到一个结论：一个图是最大流图的充分必要条件是不存在从s到t的非饱和路。</h5><h5 id="②将网络中的点分成两组，一组包括发点s-，称为发集-V1，一组包括收点t，称为收集-V2-，连接-s-到-t-的所有弧称为截集，截集中各弧在-V1-旁的容量和称为截集的容量。"><a href="#②将网络中的点分成两组，一组包括发点s-，称为发集-V1，一组包括收点t，称为收集-V2-，连接-s-到-t-的所有弧称为截集，截集中各弧在-V1-旁的容量和称为截集的容量。" class="headerlink" title="②将网络中的点分成两组，一组包括发点s ，称为发集 V1，一组包括收点t，称为收集 V2 ，连接 s 到 t 的所有弧称为截集，截集中各弧在 V1 旁的容量和称为截集的容量。"></a>②将网络中的点分成两组，一组包括发点s ，称为发集 V1，一组包括收点t，称为收集 V2 ，连接 s 到 t 的所有弧称为截集，截集中各弧在 V1 旁的容量和称为截集的容量。</h5><p>MATLAB图论工具箱求解最大流的函数：graphmaxflow( )<br>适用条件：权值都为正，且任意两个顶点之间不能有两条弧。顶点3和4之间有两条弧，删弧（4,3），加入虚拟的顶点9。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc,clear</span><br><span class="line">a=<span class="built_in">zeros</span>(<span class="number">9</span>);<span class="comment">%创立矩阵</span></span><br><span class="line"><span class="comment">%填写数据</span></span><br><span class="line">a(<span class="number">1</span>,<span class="number">2</span>)=<span class="number">6</span>; a(<span class="number">1</span>,<span class="number">3</span>)=<span class="number">4</span>; a(<span class="number">1</span>,<span class="number">4</span>)=<span class="number">5</span>;</span><br><span class="line">a(<span class="number">2</span>,<span class="number">3</span>)=<span class="number">3</span>; a(<span class="number">2</span>,<span class="number">5</span>)=<span class="number">9</span>; a(<span class="number">2</span>,<span class="number">6</span>)=<span class="number">9</span>;</span><br><span class="line">a(<span class="number">3</span>,<span class="number">4</span>)=<span class="number">4</span>; a(<span class="number">3</span>,<span class="number">5</span>)=<span class="number">6</span>; a(<span class="number">3</span>,<span class="number">6</span>)=<span class="number">7</span>; a(<span class="number">3</span>,<span class="number">7</span>)=<span class="number">3</span>;</span><br><span class="line">a(<span class="number">4</span>,<span class="number">7</span>)=<span class="number">5</span>; a(<span class="number">4</span>,<span class="number">9</span>)=<span class="number">2</span>;</span><br><span class="line">a(<span class="number">5</span>,<span class="number">8</span>)=<span class="number">12</span>;</span><br><span class="line">a(<span class="number">6</span>,<span class="number">5</span>)=<span class="number">8</span>; a(<span class="number">6</span>,<span class="number">8</span>)=<span class="number">10</span>;</span><br><span class="line">a(<span class="number">7</span>,<span class="number">6</span>)=<span class="number">4</span>; a(<span class="number">7</span>,<span class="number">8</span>)=<span class="number">15</span>;</span><br><span class="line">a(<span class="number">9</span>,<span class="number">3</span>)=<span class="number">2</span>;</span><br><span class="line">b=sparse(a);<span class="comment">%通过挤出任何零元素将满矩阵转换为稀疏格式。</span></span><br><span class="line">[x,y,z]=graphmaxflow(b,<span class="number">1</span>,<span class="number">8</span>)</span><br><span class="line">h = view(biograph(a,[ ],<span class="string">&#x27;ShowWeights&#x27;</span>,<span class="string">&#x27;on&#x27;</span>))<span class="comment">%原始容量</span></span><br><span class="line">view(biograph(y,[],<span class="string">&#x27;ShowWeights&#x27;</span>,<span class="string">&#x27;on&#x27;</span>))  <span class="comment">%计算最大流后</span></span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"></span><br><span class="line"><span class="comment">%%%</span></span><br><span class="line">[MaxFlow, FlowMatrix, Cut] = graphmaxflow(G, SNode, TNode)</span><br><span class="line">最大流      流矩阵                 G为n*n稀疏矩阵        节点</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/08/03/%E5%9B%BE%E8%AE%BA%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h4 id="图论最短路径问题："><a href="#图论最短路径问题：" class="headerlink" title="图论最短路径问题："></a>图论最短路径问题：</h4><p>一 基本概念<br>1.1 Intro<br>图论中的图是由若干给定的点以及连接两点的线所构成的图形，这种图形通常用来描述某些事物之间的某种特定关系，用点代表事物，用连接两点的线表示相应两个事物间具有这种关系。<br>一个图可以用数学语言描述为G ( V ( G ) , E ( G ) ) G(V(G),E(G))G(V(G),E(G)).V ( v e r t e x ) V(vertex)V(vertex)指的是图的顶点集，E ( e d g e ) E(edge)E(edge)指的是图的边集；<br>根据边是否有方向，可将图分为无向图 （图一）和有向图 （图二）；<br>另外，有一些图的边上可能会有权值，这样的图我们称为有权图，如图三.</p>
<img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230803153142125.png" alt="image-20230803153142125" style="zoom:50%;" />

<p>matlab作图：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%函数graph(s,t):可以在s和t中的对应节点之间创建边，并生成一个图</span></span><br><span class="line">G1 = graph(s1, t1);</span><br><span class="line"><span class="built_in">plot</span>(G1)</span><br><span class="line"></span><br><span class="line"><span class="comment">%函数graph(s, t, w):可以在s和t中的对应节点之间以w的权重创建边，并生成一个图</span></span><br><span class="line">G2 = graph(s2, t2);</span><br><span class="line"><span class="built_in">plot</span>(G2, <span class="string">&#x27;linewidth&#x27;</span>, <span class="number">2</span>)	<span class="comment">%设置线的宽度</span></span><br><span class="line"><span class="comment">%	下面的命令是在画图后不显示坐标</span></span><br><span class="line">set(gca, <span class="string">&#x27;XTick&#x27;</span>, [], <span class="string">&#x27;YTick&#x27;</span>, []);</span><br><span class="line"><span class="comment">%	上面都是无向图，如果要做出有向图，把graph改为digraph即可</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="图的权重邻接矩阵"><a href="#图的权重邻接矩阵" class="headerlink" title="图的权重邻接矩阵"></a>图的权重邻接矩阵</h5><p>对于无向图：</p>
<img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230803153254254.png" alt="image-20230803153254254" style="zoom:67%;" />

<p>其对应的权重邻接矩阵为</p>
<img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230803153318677.png" alt="image-20230803153318677"  />

<p>即对应的权重边，可以表示为：</p>
<img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230803153344186.png" alt="image-20230803153344186" style="zoom:50%;" />

<p>由此，我们可以得到无向图的一些结论：</p>
<p>无向图的邻接矩阵是一个对称矩阵<br>其邻接矩阵的主对角线全为0<br>D i j D_{ij}D ij</p>
<p> 表示从第i ii点到第j jj点的距离（权重）是多少</p>
<h4 id="二-迪杰斯特拉（Dijkstra）算法"><a href="#二-迪杰斯特拉（Dijkstra）算法" class="headerlink" title="二 迪杰斯特拉（Dijkstra）算法"></a>二 迪杰斯特拉（Dijkstra）算法</h4><p>可以把这个看成是建树的问题，通过比较两个点之间的距离的大小，分为父节点和子节点，后面根据权重边总和最小值从最后的子节点一直向上找父节点即可找到最短路径。</p>
<p>图中有0-8共九个地点，地点之间如果用直线连接则表明两地可以直接到达，直线旁的数值表示两地的距离<br>问题：起点为0，终点为4，怎么走路程最短？</p>
<img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230803153456732.png" alt="image-20230803153456732" style="zoom:67%;" />

<img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230803153517104.png" alt="image-20230803153517104" style="zoom:67%;" />



<p>程序如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc,clear</span><br><span class="line">a=<span class="built_in">zeros</span>(<span class="number">6</span>); <span class="comment">%邻接矩阵初始化</span></span><br><span class="line">a(<span class="number">1</span>,<span class="number">2</span>)=<span class="number">50</span>;a(<span class="number">1</span>,<span class="number">4</span>)=<span class="number">40</span>;a(<span class="number">1</span>,<span class="number">5</span>)=<span class="number">25</span>;a(<span class="number">1</span>,<span class="number">6</span>)=<span class="number">10</span>;</span><br><span class="line">a(<span class="number">2</span>,<span class="number">3</span>)=<span class="number">15</span>;a(<span class="number">2</span>,<span class="number">4</span>)=<span class="number">20</span>;a(<span class="number">2</span>,<span class="number">6</span>)=<span class="number">25</span>;</span><br><span class="line">a(<span class="number">3</span>,<span class="number">4</span>)=<span class="number">10</span>;a(<span class="number">3</span>,<span class="number">5</span>)=<span class="number">20</span>;</span><br><span class="line">a(<span class="number">4</span>,<span class="number">5</span>)=<span class="number">10</span>;a(<span class="number">4</span>,<span class="number">6</span>)=<span class="number">25</span>;</span><br><span class="line">a(<span class="number">5</span>,<span class="number">6</span>)=<span class="number">55</span>;</span><br><span class="line">a=a+a&#x27;;  <span class="comment">% 两点之间的距离是一样的→对称矩阵</span></span><br><span class="line">a(a==<span class="number">0</span>)=<span class="built_in">inf</span>;</span><br><span class="line">pb(<span class="number">1</span>:<span class="built_in">length</span>(a))=<span class="number">0</span>;pb(<span class="number">1</span>)=<span class="number">1</span>;index1=<span class="number">1</span>;index2=<span class="built_in">ones</span>(<span class="number">1</span>,<span class="built_in">length</span>(a));</span><br><span class="line">d(<span class="number">1</span>:<span class="built_in">length</span>(a))=<span class="built_in">inf</span>;d(<span class="number">1</span>)=<span class="number">0</span>;</span><br><span class="line">temp=<span class="number">1</span>; <span class="comment">%最新的P标号的顶点</span></span><br><span class="line"><span class="keyword">while</span> sum(pb)&lt;<span class="built_in">length</span>(a)</span><br><span class="line">   tb=<span class="built_in">find</span>(pb==<span class="number">0</span>);</span><br><span class="line">   d(tb)=<span class="built_in">min</span>(d(tb),d(temp)+a(temp,tb));</span><br><span class="line">   tmpb=<span class="built_in">find</span>(d(tb)==<span class="built_in">min</span>(d(tb)));</span><br><span class="line">   temp=tb(tmpb(<span class="number">1</span>)); <span class="comment">%可能有多个点同时达到最小值，只取其中的一个</span></span><br><span class="line">   pb(temp)=<span class="number">1</span>;</span><br><span class="line">   index1=[index1,temp];</span><br><span class="line">   temp2=<span class="built_in">find</span>(d(index1)==d(temp)-a(temp,index1));</span><br><span class="line">   index2(temp)=index1(temp2(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">d, index1, index2</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>除了上面提到的迪杰斯特拉求两点之间最短路径外，我们还可以使用MATLAB自带的<code>graphshortestpath函数</code>。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">W = [<span class="number">10</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">2</span>];</span><br><span class="line"><span class="comment">% sparse生成稀疏矩阵，除了标注的元素外，其余都是0</span></span><br><span class="line">DG = sparse([<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>],...  <span class="comment">% sparse第一个矩阵，三个.代表没写完，下一行接着</span></span><br><span class="line">            [<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],W)  <span class="comment">% sparse第二个矩阵</span></span><br><span class="line"><span class="comment">% sparse里第一个和第二个矩阵相同位置的元素值就是非零元素的值，W是每条边的权值</span></span><br><span class="line"><span class="comment">% dist是最短路径的值，path是最短路径的节点顺序，pred是每一个节点的最短路径的终点前一个节点</span></span><br><span class="line">[dist,path,pred] = graphshortestpath(DG,<span class="number">1</span>,<span class="number">3</span>)  <span class="comment">% 节点1到3的最短路径</span></span><br><span class="line">point_name = [<span class="string">&quot;city1&quot;</span>,<span class="string">&quot;city2&quot;</span>,<span class="string">&quot;city3&quot;</span>,<span class="string">&quot;city4&quot;</span>,<span class="string">&quot;city5&quot;</span>];</span><br><span class="line">p = biograph(DG,point_name,<span class="string">&#x27;ShowWeights&#x27;</span>,<span class="string">&#x27;on&#x27;</span>)</span><br><span class="line">h = view(p)  <span class="comment">% biograph生成图对象，view显示该图</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/09/26/%E5%AF%86%E7%A0%81%E8%B5%9B%E8%AE%BA%E6%96%87/</url>
    <content><![CDATA[<p>哈希到椭圆曲线算法：<a href="https://minersns.com/16043-1-1.html">https://minersns.com/16043-1-1.html</a></p>
<p>密码强度检测算法：<a href="https://juejin.cn/post/7087742640787030024">https://juejin.cn/post/7087742640787030024</a></p>
<p>1、从哈希值映射到椭圆曲线的一个点，这个映射函数，整个论文是没有给的。</p>
<p>2、椭圆曲线的算法选择（SM2）</p>
<p>3、哈希算法的选择 sm3 openssl</p>
<p>4、找到数据库，或者自己生成（解决）</p>
<p>5、<a href="https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve%EF%BC%88%E5%93%88%E5%B8%8C%E5%80%BC%EF%BC%89">https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve（哈希值）</a></p>
<p>数据库存储在 服务器里</p>
<p>底层代码：C++， API封装，</p>
<p>前端：网页，shell，</p>
<p>（用户登录）</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/24/%E5%B7%A5%E6%A6%823/</url>
    <content><![CDATA[<p>ppt:</p>
<h4 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h4><p>1、项目概述</p>
<p>2、团队介绍</p>
<p>3、需求分析</p>
<p>4、方案分析</p>
<p>5、方案实现</p>
<p>第二部分：</p>
<h4 id="成本分析部分"><a href="#成本分析部分" class="headerlink" title="成本分析部分"></a>成本分析部分</h4><p>1、人力资源成本</p>
<ul>
<li>项目经理：</li>
<li>软件工程师：</li>
<li>测试人员：</li>
<li>技术支持：</li>
</ul>
<p>2、软件开发成本</p>
<ul>
<li>开发工具和软件许可证费用：估计 5,000 美元。</li>
<li>开发硬件设备：估计 10,000 美元。</li>
</ul>
<p>3、测试成本</p>
<p>4、培训成本</p>
<p>5、项目管理成本</p>
<p>第三步部分：</p>
<h4 id="系统上线与宣发"><a href="#系统上线与宣发" class="headerlink" title="系统上线与宣发"></a>系统上线与宣发</h4><p>1、风险管理和储备预算</p>
<p>2、报告和沟通成本</p>
<p>3、变更控制成本</p>
<p>4、质量保证成本</p>
<p>5、硬件和软件维护成本</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/11/01/%E5%BB%BA%E6%A0%91%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>建树过程，</p>
<p>1、接受所有数据点的data，spacial and text information，得到数据点的个数</p>
<p>2、根据数据点branch个数计算出得到满n叉树时的总叶子branch个数，总叶子node个数，总branch个数，总node个数</p>
<p>3、对数据块加密之后，将所有数据块的索引存放到叶子branch中，其余的branch中存放虚数据块</p>
<p>4、建树，</p>
<p>查询过程：</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/08/03/%E6%8E%A2%E7%B4%A2%E6%80%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="探索性数据分析"><a href="#探索性数据分析" class="headerlink" title="探索性数据分析"></a>探索性数据分析</h3><p>题目提供的训练数据集包含11个特征，分别是：</p>
<p>Survived:0代表死亡，1代表存活<br>Pclass:乘客所持票类，有三种值(1,2,3)<br>Name:乘客姓名<br>Sex:乘客性别<br>Age:乘客年龄(有缺失)<br>SibSp:乘客兄弟姐妹&#x2F;配偶的个数(整数值)<br>Parch:乘客父母&#x2F;孩子的个数(整数值)<br>Ticket:票号(字符串)<br>Fare:乘客所持票的价格(浮点数，0-500不等)<br>Cabin:乘客所在船舱(有缺失)<br>Embark:乘客登船港口:S、C、Q(有缺失)</p>
<p>训练集 891 名乘客中只有大约 350 人幸存，占比 38.4%. 两个类别的规模相差不悬殊, 可以进行正常分类. 下一步,我们需要继续深挖以获取更有用的信息，了解哪些人的生存几率更大, 哪些因素会影响生存几率。我们试图通过分析数据集的不同特征确定生存机率，这些特征包括 Sex, Port Of Embarcation, Age 等.<br><img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230803151009819.png" alt="image-20230803151009819"></p>
<ol start="3">
<li><h5 id="数据特征的处理"><a href="#数据特征的处理" class="headerlink" title="数据特征的处理"></a>数据特征的处理</h5></li>
</ol>
<p>  此数据中包含三种类型的数据类型:</p>
<p>范畴特征：Sex,Embarked.<br>一种变量是有两个或者两个以上的分组，如性别变量。这类变量无法进行排序，称为定类变量。<br>序数特征: PClass<br>序数特征与范畴特征类似，不同的是它有排序的意义。例如，身高的高、中、矮，称为序数特征。这类特征可以进行相对排序。<br>连续特征：Age<br>特征的值可视为连续性随机变量</p>
<h5 id="3-1-第一个因变量-分析范畴特征：Sex"><a href="#3-1-第一个因变量-分析范畴特征：Sex" class="headerlink" title="3.1 第一个因变量- 分析范畴特征：Sex"></a>3.1 第一个因变量- 分析范畴特征：Sex</h5><img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230803151101509.png" alt="image-20230803151101509" style="zoom:50%;" />

<p><img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230803151237529.png" alt="image-20230803151237529"></p>
<p>船上的男性人数远远多于女性人数。然而，女性获救人数几乎是男性获救人数的两倍。女性在船上的存活率约为75%，而男性约为18-19%。</p>
<h5 id="3-2-定序特征分析：Pclass"><a href="#3-2-定序特征分析：Pclass" class="headerlink" title="3.2 定序特征分析：Pclass"></a>3.2 定序特征分析：Pclass</h5><p><img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230803151359243.png" alt="image-20230803151359243"></p>
<p>我们可以清楚地看到，Pclass 1的Passenegers在救援时被给予了非常高的优先级。尽管乘坐Pclass 3的乘客数量要高得多，但幸存的人数占比却非常低，大约在25%左右。</p>
<p>Pclass 1 的存活率大约63%，而Pclass2的存活了大约48%，Pclass 3的存活率大约在25%左右，这个因素的差异可视为影响存活率的一个重要因素</p>
<p><img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230803151550471.png" alt="image-20230803151550471"></p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">plt.style.use(<span class="string">&#x27;fivethirtyeight&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data=pd.read_csv(<span class="string">&#x27;model/DieTanic_train.csv&#x27;</span>)</span><br><span class="line">data.head()</span><br><span class="line">data.columns</span><br><span class="line"></span><br><span class="line">data.isnull().<span class="built_in">sum</span>() <span class="comment">#checking for total null values</span></span><br><span class="line"></span><br><span class="line">f,ax=plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">18</span>,<span class="number">8</span>))</span><br><span class="line">data[<span class="string">&#x27;Survived&#x27;</span>].value_counts().plot.pie(explode=[<span class="number">0</span>,<span class="number">0.1</span>],autopct=<span class="string">&#x27;%1.1f%%&#x27;</span>,ax=ax[<span class="number">0</span>],shadow=<span class="literal">True</span>)</span><br><span class="line">ax[<span class="number">0</span>].set_title(<span class="string">&#x27;Survived&#x27;</span>)</span><br><span class="line">ax[<span class="number">0</span>].set_ylabel(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">sns.countplot(x = <span class="string">&#x27;Survived&#x27;</span>,data=data,ax=ax[<span class="number">1</span>])</span><br><span class="line">ax[<span class="number">1</span>].set_title(<span class="string">&#x27;Survived&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data.groupby([<span class="string">&#x27;Sex&#x27;</span>,<span class="string">&#x27;Survived&#x27;</span>])[<span class="string">&#x27;Survived&#x27;</span>].count()</span><br><span class="line"></span><br><span class="line">f,ax=plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">18</span>,<span class="number">8</span>))</span><br><span class="line">data[[<span class="string">&#x27;Sex&#x27;</span>,<span class="string">&#x27;Survived&#x27;</span>]].groupby([<span class="string">&#x27;Sex&#x27;</span>]).mean().plot.bar(ax=ax[<span class="number">0</span>])</span><br><span class="line">ax[<span class="number">0</span>].set_title(<span class="string">&#x27;Survived vs Sex&#x27;</span>)</span><br><span class="line">sns.countplot(x = <span class="string">&#x27;Sex&#x27;</span>,hue=<span class="string">&#x27;Survived&#x27;</span>,data=data,ax=ax[<span class="number">1</span>])</span><br><span class="line">ax[<span class="number">1</span>].set_title(<span class="string">&#x27;Sex:Survived vs Dead&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pd.crosstab(data.Pclass,data.Survived,margins=<span class="literal">True</span>).style.background_gradient(cmap=<span class="string">&#x27;summer_r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f,ax=plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">18</span>,<span class="number">8</span>))</span><br><span class="line">data[<span class="string">&#x27;Pclass&#x27;</span>].value_counts().plot.bar(color=[<span class="string">&#x27;#CD7F32&#x27;</span>,<span class="string">&#x27;#FFDF00&#x27;</span>,<span class="string">&#x27;#D3D3D3&#x27;</span>],ax=ax[<span class="number">0</span>])</span><br><span class="line">ax[<span class="number">0</span>].set_title(<span class="string">&#x27;Number Of Passengers By Pclass&#x27;</span>)</span><br><span class="line">ax[<span class="number">0</span>].set_ylabel(<span class="string">&#x27;Count&#x27;</span>)</span><br><span class="line">sns.countplot(x = <span class="string">&#x27;Pclass&#x27;</span>,hue=<span class="string">&#x27;Survived&#x27;</span>,data=data,ax=ax[<span class="number">1</span>])</span><br><span class="line">ax[<span class="number">1</span>].set_title(<span class="string">&#x27;Pclass:Survived vs Dead&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pd.crosstab([data.Sex,data.Survived],data.Pclass,margins=<span class="literal">True</span>).style.background_gradient(cmap=<span class="string">&#x27;summer_r&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Oldest Passenger was of:&#x27;</span>,data[<span class="string">&#x27;Age&#x27;</span>].<span class="built_in">max</span>(),<span class="string">&#x27;Years&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Youngest Passenger was of:&#x27;</span>,data[<span class="string">&#x27;Age&#x27;</span>].<span class="built_in">min</span>(),<span class="string">&#x27;Years&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Average Age on the ship:&#x27;</span>,data[<span class="string">&#x27;Age&#x27;</span>].mean(),<span class="string">&#x27;Years&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f,ax=plt.subplots(<span class="number">1</span>,<span class="number">2</span>,figsize=(<span class="number">18</span>,<span class="number">8</span>))</span><br><span class="line">sns.violinplot(x = <span class="string">&quot;Pclass&quot;</span>,y = <span class="string">&quot;Age&quot;</span>, hue=<span class="string">&quot;Survived&quot;</span>, data=data,split=<span class="literal">True</span>,ax=ax[<span class="number">0</span>])</span><br><span class="line">ax[<span class="number">0</span>].set_title(<span class="string">&#x27;Pclass and Age vs Survived&#x27;</span>)</span><br><span class="line">ax[<span class="number">0</span>].set_yticks(<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">110</span>,<span class="number">10</span>))</span><br><span class="line">sns.violinplot(x = <span class="string">&quot;Sex&quot;</span>,y = <span class="string">&quot;Age&quot;</span>, hue=<span class="string">&quot;Survived&quot;</span>, data=data,split=<span class="literal">True</span>,ax=ax[<span class="number">1</span>])</span><br><span class="line">ax[<span class="number">1</span>].set_title(<span class="string">&#x27;Sex and Age vs Survived&#x27;</span>)</span><br><span class="line">ax[<span class="number">1</span>].set_yticks(<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">110</span>,<span class="number">10</span>))</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/09/28/%E5%B7%A5%E7%A8%8B%E6%A6%82%E8%AE%BA%E4%BD%9C%E4%B8%9A%E8%A1%A5%E4%BA%A4%EF%BC%9A%2021009200735-%E5%88%98%E6%B3%BD%E6%A3%AE/</url>
    <content><![CDATA[<h5 id="工程概论作业补交：-21009200735-刘泽森"><a href="#工程概论作业补交：-21009200735-刘泽森" class="headerlink" title="工程概论作业补交： 21009200735-刘泽森"></a>工程概论作业补交： 21009200735-刘泽森</h5><h3 id="第一次9月13日雨课堂作业补交："><a href="#第一次9月13日雨课堂作业补交：" class="headerlink" title="第一次9月13日雨课堂作业补交："></a>第一次9月13日雨课堂作业补交：</h3><h4 id="问题一：管理学和经济学之间存在什么联系？"><a href="#问题一：管理学和经济学之间存在什么联系？" class="headerlink" title="问题一：管理学和经济学之间存在什么联系？"></a>问题一：管理学和经济学之间存在什么联系？</h4><p>经济学研究的是抽象的企业，它所涉及的决策大多属于价格和产量决策。而在现实管理中，要决策的问题多种多样，而在这些管理决策中，需要应用到宏观经济学的理论研究成果。好的管理的本质是决定采取一种实践会不会增加企业的价值。管理与经济中的劳动力、资本、技术要素不同，它既是一种投入要素，又是其它三个要素的组合性要素。当将其它三个要素投入到经济资源储备中时，经济会按生产函数规则增长，而管理要素可能按规则，也可能通过改变规则来影响经济的运行与增长。</p>
<h4 id="问题二：经济管理的职能是什么？经济管理有哪些方法？"><a href="#问题二：经济管理的职能是什么？经济管理有哪些方法？" class="headerlink" title="问题二：经济管理的职能是什么？经济管理有哪些方法？"></a>问题二：经济管理的职能是什么？经济管理有哪些方法？</h4><p>经济职能是行政管理最重要的职能，经济职能要为经济基础服务。经济管理职能的主要内容有：</p>
<p><strong>预测职能、决策职能、计划职能、控制职能、监督职能、激励职能</strong></p>
<h5 id="经济管理的方法："><a href="#经济管理的方法：" class="headerlink" title="经济管理的方法："></a>经济管理的方法：</h5><h5 id="经济方法，法律方法，行政方法等"><a href="#经济方法，法律方法，行政方法等" class="headerlink" title="经济方法，法律方法，行政方法等"></a>经济方法，法律方法，行政方法等</h5><h4 id="问题三：经济效益是如何定义的，经济效益有哪些评价标准？"><a href="#问题三：经济效益是如何定义的，经济效益有哪些评价标准？" class="headerlink" title="问题三：经济效益是如何定义的，经济效益有哪些评价标准？"></a>问题三：经济效益是如何定义的，经济效益有哪些评价标准？</h4><p>经济效益：一般地说，是指为实现某一经济目标而选择和采用一定的手段、途径、方法等，由此产生的劳动成果与劳动消耗的比较，或产出与投入的比较。</p>
<p>就是经济效益要达到的目标。<br>经济效益评价标准，既有评价单位项目本身的经济效益(如投资回收期、内部收益率等评价指标)，又有项目之间比较的经济效益(如改造与不改造方案比较、追加投资回收期等评价标准)。还可分为具体评价标准、综合评价标准等。</p>
<h4 id="问题四：经济效益评价的基本原则是什么？"><a href="#问题四：经济效益评价的基本原则是什么？" class="headerlink" title="问题四：经济效益评价的基本原则是什么？"></a>问题四：经济效益评价的基本原则是什么？</h4><p> 1.正确处理微观与宏观的关系。2.正确处理近期经济效益和长远经济效益的关系。3.正确处理直接经济效益与间接经济效益的关系。4.正确处理经济效益与社会环境的关系。5.正确处理生产效益与流通效益、消费效益的关系。</p>
<h4 id="问题五：工程项目的经济效果评价和经济效益评价有哪些异同？"><a href="#问题五：工程项目的经济效果评价和经济效益评价有哪些异同？" class="headerlink" title="问题五：工程项目的经济效果评价和经济效益评价有哪些异同？"></a>问题五：工程项目的经济效果评价和经济效益评价有哪些异同？</h4><img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230928124020692.png" alt="image-20230928124020692" style="zoom:80%;" />





<h3 id="9月26日工程概论作业2："><a href="#9月26日工程概论作业2：" class="headerlink" title="9月26日工程概论作业2："></a>9月26日工程概论作业2：</h3><h4 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h4><img src="C:\Users\20191\Desktop\QQ图片20230928130952.jpg" alt="QQ图片20230928130952" style="zoom: 50%;" />

<img src="C:\Users\20191\Desktop\QQ图片20230928130947.jpg" alt="QQ图片20230928130947" style="zoom: 50%;" />







<h4 id="问题二："><a href="#问题二：" class="headerlink" title="问题二："></a>问题二：</h4><img src="C:\Users\20191\Desktop\QQ图片20230928132815.jpg" alt="QQ图片20230928132815" style="zoom: 50%;" />]]></content>
  </entry>
  <entry>
    <title>OS6</title>
    <url>/2023/05/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F6/</url>
    <content><![CDATA[<h3 id="一、-实验题目"><a href="#一、-实验题目" class="headerlink" title="一、 实验题目"></a><strong>一、</strong> <strong>实验题目</strong></h3><p>阅读教材第18章（Linux案例），并在互联网上查阅相关资料，对照操作系统课程中所讲的原理（进程管理，存储管理，文件系统，设备管理），了解Linux操作系统实例</p>
<p>形成一份专题报告</p>
<p>可以是全面综述性报告</p>
<p>可以是侧重某一方面的报告（进程调度，进程间通信，存储管理，文件系统，安全）</p>
<span id="more"></span>

<h3 id="二、"><a href="#二、" class="headerlink" title="二、"></a><strong>二、</strong></h3><h4 id="Linux存储管理专题报告"><a href="#Linux存储管理专题报告" class="headerlink" title="Linux存储管理专题报告"></a>Linux存储管理专题报告</h4><h5 id="—-一篇”自问自答“的报告"><a href="#—-一篇”自问自答“的报告" class="headerlink" title="—-一篇”自问自答“的报告"></a>—-一篇”自问自答“的报告</h5><pre><code>     **写在前面：**大概在去年的这个时候，我在自己的电脑上安装了自己的双系统，Linux和Windows双系统切换使用，但是在安装双系统的过程中，有一个特别烦人的过程，那就是为linux系统分配硬盘存储，我暂且认为这是存储管理的一部分吧。所以，在这个专题报告中，我选择了存储管理这样一个小专题进行探究。
</code></pre>
<p>在这篇报告中，写了一些自己关于内存的理解，同时加入了linux系统对于存储管理的各种命令行操作的截图，让自己的理解更加深刻。</p>
<h5 id="1、内存概念介绍"><a href="#1、内存概念介绍" class="headerlink" title="1、内存概念介绍"></a>1、内存概念介绍</h5><p>​		了解到了linux系统中的内存概念有着物理内存和虚拟内存之分，首先我的初步印象中，内存就是一块一块的实际区域，用于存放相关的数据，何来虚拟和物理之分呢？</p>
<p>​	经过一番思索，终于有了特别形象的解释：那就是我之前玩过的单片机。单片机是没操作系统的，每次写完代码都需要工具把所谓的程序烧进去，此时单片机cpu直接操作的是物理地址。但是这就会产生一个问题，如果同时运行两个程序，这是不可能实现的，如果在第一个地址中写下了第一个程序，当我们将下一个程序写入到相同的物理地址时，下一个程序会覆盖掉上一个程序。再次思考，这个问题出现的根源是两个程序都引用了相同的绝对物理地址，为了解决这个问题，我们可以把进程所使用的地址「隔离」开来，即让操作系统为每个进程分配独立的一套「<strong>虚拟地址</strong>」，互不干涉。但是有个前提每个进程都不能访问物理地址，至于虚拟地址最终怎么落到物理内存里，对进程来说是透明的，由操作系自行安排。</p>
<p>​		这就是操作系统的一种机制：操作系统会将不同进程的虚拟地址和不同的物理地址映射起来。</p>
<p>​		如果程序要访问虚拟地址的时候，由操作系统转换成不同的物理地址，这样不同的进程运行的时候，写入的是不同的物理地址，这样就不会冲突了。</p>
<p>​		于是，这里就引出了两种地址的概念：</p>
<ul>
<li>我们程序所使用的内存地址叫做<strong>虚拟内存地址</strong>（<em>Virtual Memory Address</em>）</li>
<li>实际存在硬件里面的空间地址叫<strong>物理内存地址</strong>（<em>Physical Memory Address</em>）。</li>
</ul>
<p>操作系统引入了虚拟内存，进程持有的虚拟地址会通过 CPU 芯片中的内存管理单元（MMU）的映射关系，来转换变成物理地址，然后再通过物理地址访问内存，如下图所示：</p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统6\72ab76ba697e470b8ceb14d5fc5688d9.png" alt="img"></p>
<p>2、内存分段和内存分页</p>
<p>​		在这里提出第二个问题：操作系统如何管理物理地址和虚拟地址之间的关系？</p>
<p>​		主要的两种方式即为：内存分段和内存分页</p>
<h5 id="lt-1-gt-内存分段"><a href="#lt-1-gt-内存分段" class="headerlink" title="&lt;1&gt;内存分段"></a>&lt;1&gt;内存分段</h5><p>内存的分段是由内核负责管理的，每个进程都有自己的虚拟地址空间，它将虚拟地址转换为物理地址。</p>
<p>下面介绍一下Linux内存分段的几个主要部分：</p>
<ol>
<li>内核空间</li>
</ol>
<p>内核空间是操作系统内核使用的地址空间。在Linux中，内核空间通常是0xC0000000到0xFFFFFFFF，其大小为1GB。在内核空间中，包括了操作系统内核的代码、数据结构和系统调用接口等。</p>
<p>​	2.用户空间</p>
<p>用户空间是进程可以访问的地址空间。在Linux中，用户空间通常是0x00000000到0xBFFFFFFF，其大小为3GB。用户空间中包括了程序的代码、数据和堆栈等。不同的进程有自己独立的用户空间。</p>
<ol start="3">
<li>内核栈</li>
</ol>
<p>每个进程都有自己的内核栈，用于保存进程在内核模式下执行时的栈帧。在Linux中，内核栈通常是在进程控制块（process control block，PCB）中分配的。</p>
<ol start="4">
<li><p>用户栈</p>
<p>每个进程都有自己的用户栈，用于保存进程在用户模式下执行时的栈帧。在Linux中，用户栈通常是在进程的虚拟地址空间中分配的。</p>
</li>
</ol>
<p>除此之外，还有一些其他的内存分段：下面给出具体操作代码以及结果：</p>
<h5 id="lt-1-gt-查看内存使用情况："><a href="#lt-1-gt-查看内存使用情况：" class="headerlink" title="&lt;1&gt;查看内存使用情况："></a>&lt;1&gt;查看内存使用情况：</h5><p>可以使用top命令或free命令来查看系统的内存使用情况：</p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统6\image-20230506203412294.png" alt="image-20230506203412294"></p>
<p>使用free命令可以查看系统的内存总量、已使用的内存和可用的内存等信息：</p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统6\image-20230506203509773.png" alt="image-20230506203509773"></p>
<h5 id="lt-2-gt-查看内存进程映像："><a href="#lt-2-gt-查看内存进程映像：" class="headerlink" title="&lt;2&gt;查看内存进程映像："></a>&lt;2&gt;查看内存进程映像：</h5><p>使用pmap命令可以查看当前进程的内存映像：</p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统6\image-20230506203614491.png" alt="image-20230506203614491"></p>
<h5 id="lt-3-gt-分配动态内存："><a href="#lt-3-gt-分配动态内存：" class="headerlink" title="&lt;3&gt;分配动态内存："></a>&lt;3&gt;分配动态内存：</h5><p>示例代码为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> *arr = <span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Failed to allocate memory!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>2、内存分页</p>
<p>分段的好处就是能产生连续的内存空间，但是会出现「外部内存碎片和内存交换的空间太大」的问题。</p>
<p>要解决这些问题，那么就要想出能少出现一些内存碎片的办法。另外，当需要进行内存交换的时候，让需要交换写入或者从磁盘装载的数据更少一点，这样就可以解决问题了。这个办法，也就是<strong>内存分页****分页是把整个虚拟和物理内存空间切成一段段固定尺寸的大小</strong>。*这样一个连续并且尺寸固定的内存空间，我们叫<strong>页。</strong>在 Linux 下，每一页的大小为 <code>4KB</code>。虚拟地址与物理地址之间通过<strong>页表</strong>来映射。</p>
<p>页表是存储在内存里的，<strong>内存管理单元</strong> （<em>MMU</em>）就做将虚拟内存地址转换成物理地址的工作。</p>
<p>而当进程访问的虚拟地址在页表中查不到时，系统会产生一个<strong>缺页异常</strong>，进入系统内核空间分配物理内存、更新进程页表，最后再返回用户空间，恢复进程的运行。内存分页由于内存空间都是预先划分好的，也就不会像内存分段一样，在段与段之间会产生间隙非常小的内存，这正是分段会产生外部内存碎片的原因。而<strong>采用了分页，页与页之间是紧密排列的，所以不会有外部碎片。</strong></p>
<p>但是，因为内存分页机制分配内存的最小单位是一页，即使程序不足一页大小，我们最少只能分配一个页，所以页内会出现内存浪费，所以针对<strong>内存分页机制会有内部内存碎片</strong>的现象。</p>
<p>如果内存空间不够，操作系统会把其他正在运行的进程中的「最近没被使用」的内存页面给释放掉，也就是暂时写在硬盘上，称为<strong>换出</strong>（<em>Swap Out</em>）。一旦需要的时候，再加载进来，称为<strong>换入</strong>（<em>Swap In</em>）。所以，一次性写入磁盘的也只有少数的一个页或者几个页，不会花太多时间，<strong>内存交换的效率就相对比较高。</strong></p>
<p>找到了一张特别形象的图片：</p>
<p><img src="https://cdn.xiaolincoding.com//mysql/other/388a29f45fe947e5a49240e4eff13538-20230309234651917.png" alt="img"></p>
<p>更进一步地，分页的方式使得我们在加载程序的时候，不再需要一次性都把程序加载到物理内存中。我们完全可以在进行虚拟内存和物理内存的页之间的映射之后，并不真的把页加载到物理内存里，而是<strong>只有在程序运行中，需要用到对应虚拟内存页里面的指令和数据时，再加载到物理内存里面去。</strong>在分页机制下，虚拟地址分为两部分，<strong>页号</strong>和<strong>页内偏移</strong>。页号作为页表的索引，<strong>页表</strong>包含物理页每页所在<strong>物理内存的基地址</strong>，这个基地址与页内偏移的组合就形成了物理内存地址。</p>
<p>总结一下，对于一个内存地址转换，其实就是这样三个步骤：</p>
<ul>
<li>把虚拟内存地址，切分成页号和偏移量；</li>
<li>根据页号，从页表里面，查询对应的物理页号；</li>
<li>直接拿物理页号，加上前面的偏移量，就得到了物理内存地址。</li>
</ul>
<h4 id="2、具体内存管理操作："><a href="#2、具体内存管理操作：" class="headerlink" title="2、具体内存管理操作："></a>2、具体内存管理操作：</h4><h5 id="lt-1-gt-分区管理："><a href="#lt-1-gt-分区管理：" class="headerlink" title="&lt;1&gt;分区管理："></a>&lt;1&gt;分区管理：</h5><p>在Linux系统中，可以使用分区来将磁盘划分为不同的逻辑部分，以便对其进行管理。每个分区可以包含一个文件系统，并且可以与一个目录进行挂载，以便用户可以访问其文件。Linux支持多种分区类型，包括MBR、GPT、LVM等。</p>
<p>下面调用fdisk命令才管理磁盘分区查看系统上所有磁盘的分区情况：</p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统6\image-20230506204807614.png" alt="image-20230506204807614"></p>
<h5 id="lt-2-gt-磁盘配额管理："><a href="#lt-2-gt-磁盘配额管理：" class="headerlink" title="&lt;2&gt;磁盘配额管理："></a>&lt;2&gt;磁盘配额管理：</h5><p>Linux提供了磁盘配额管理功能，可以限制用户或组的磁盘使用量，避免出现磁盘空间被滥用的情况。磁盘配额管理可以对整个文件系统或单个目录进行设置，并且可以设置硬配额和软配额。</p>
<p>硬配额表示达到配额限制后用户不能再创建新的文件或扩展现有文件，而软配额表示用户可以超过配额限制一段时间，但会受到警告。</p>
<p>要启用磁盘配额管理，需要在文件系统中创建quota数据库文件，并挂载文件系统时指定quota选项。然后，可以使用quota命令设置和管理配额。</p>
<h5 id="lt-3-gt-RAID技术"><a href="#lt-3-gt-RAID技术" class="headerlink" title="&lt;3&gt;RAID技术"></a>&lt;3&gt;RAID技术</h5><p>RAID技术（Redundant Array of Inexpensive Disks）是一种利用多个硬盘驱动器来组成一个更大、更可靠的存储系统的技术。通过将多个硬盘组合成一个逻辑卷，RAID技术可以提高磁盘系统的性能、容错性和可靠性。</p>
<p>Linux支持多种RAID级别，包括RAID 0、RAID 1、RAID 5、RAID 6、RAID 10等。不同的RAID级别有不同的性能和容错特性，可以根据实际需求选择。</p>
<p>要在Linux系统中配置RAID，需要先安装相应的RAID控制器和软件，然后通过软件或命令行工具进行配置和管理。例如，可以使用mdadm命令来创建、管理和监视软件RAID。RAID技术是一种有效的存储管理技术，可以提高磁盘系统的性能、容错性和可靠性。Linux提供了多种RAID级别的支持，并且可以使用命令行工具进行配置和管理。</p>
<h5 id="lt-4-gt-LVM技术"><a href="#lt-4-gt-LVM技术" class="headerlink" title="&lt;4&gt;LVM技术"></a>&lt;4&gt;LVM技术</h5><p>LVM（Logical Volume Manager）是一种逻辑卷管理器，它允许用户将多个硬盘分区或整个硬盘组合成一个或多个逻辑卷。逻辑卷可以动态调整大小和移动，从而使存储管理更加灵活和高效。</p>
<p>LVM由三个主要组件组成：物理卷（PV）、卷组（VG）和逻辑卷（LV）。物理卷是硬盘分区或整个硬盘，卷组是多个物理卷的组合，逻辑卷是卷组中的逻辑分区。</p>
<p>在Linux系统中，可以使用pvcreate、vgcreate和lvcreate等命令来创建物理卷、卷组和逻辑卷。LVM是一种强大的存储管理技术，允许用户将多个硬盘分区或整个硬盘组合成一个或多个逻辑卷。在Linux系统中，可以使用pvcreate、vgcreate和lvcreate等命令来创建物理卷、卷组和逻辑卷。逻辑卷可以动态调整大小和移动，从而使存储管理更加灵活和高效。</p>
<h5 id="lt-5-gt-设备管理"><a href="#lt-5-gt-设备管理" class="headerlink" title="&lt;5&gt;设备管理"></a>&lt;5&gt;设备管理</h5><p>查看系统中设备的具体使用情况为：</p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统6\image-20230506205747391.png" alt="image-20230506205747391"></p>
<p>然后查看系统中被使用的设备：</p>
<p><img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230506205830556.png" alt="image-20230506205830556"></p>
<p>最后查看系统中被识别的设备：</p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统6\image-20230506205925128.png" alt="image-20230506205925128"></p>
<h5 id="lt-6-gt-文件系统管理："><a href="#lt-6-gt-文件系统管理：" class="headerlink" title="&lt;6&gt;文件系统管理："></a>&lt;6&gt;文件系统管理：</h5><p>用户在硬件存储设备中执行的文件建立、写入、读取、修改、转存与控制等操作都是依靠文件系统来完成的。文件系统的作用是合理规划硬盘，以保证用户正常的使用需求。Linux系统支持数十种的文件系统，而最常见的文件系统如下所示。</p>
<p>Ext3：是一款日志文件系统，能够在系统异常宕机时避免文件系统资料丢失，并能自动修复数据的不一致与错误。然而，当硬盘容量较大时，所需的修复时间也会很长，而且也不能百分之百地保证资料不会丢失。它会把整个磁盘的每个写入动作的细节都预先记录下来，以便在发生异常宕机后能回溯追踪到被中断的部分，然后尝试进行修复。</p>
<p>Ext4：Ext3的改进版本，作为RHEL 6系统中的默认文件管理系统，它支持的存储容量高达1EB（1EB&#x3D;1,073,741,824GB），且能够有无限多的子目录。另外，Ext4文件系统能够批量分配block块，从而极大地提高了读写效率。</p>
<p>XFS：是一种高性能的日志文件系统，而且是RHEL 7中默认的文件管理系统，它的优势在发生意外宕机后尤其明显，即可以快速地恢复可能被破坏的文件，而且强大的日志功能只用花费极低的计算和存储性能。并且它最大可支持的存储容量为18EB，这几乎满足了所有需求。</p>
<p>就像拿到了一张未裁切的完整纸张，我们首先要进行裁切以方便使用，然后在裁切后的纸张上画格以便能书写工整。在拿到了一块新的硬盘存储设备后，也需要先分区，然后再格式化文件系统，最后才能挂载并正常使用。硬盘的分区操作取决于您的需求和硬盘大小；您也可以选择不进行分区，但是必须对硬盘进行格式化处理。</p>
<h5 id="设备中文件的查找"><a href="#设备中文件的查找" class="headerlink" title="设备中文件的查找"></a>设备中文件的查找</h5><h5 id="find-命令是-Linux-中用于查找文件和目录的强大工具。它可以在指定目录下递归查找文件，并根据文件名、文件大小、文件类型、文件修改时间等多种条件进行筛选"><a href="#find-命令是-Linux-中用于查找文件和目录的强大工具。它可以在指定目录下递归查找文件，并根据文件名、文件大小、文件类型、文件修改时间等多种条件进行筛选" class="headerlink" title="find 命令是 Linux 中用于查找文件和目录的强大工具。它可以在指定目录下递归查找文件，并根据文件名、文件大小、文件类型、文件修改时间等多种条件进行筛选"></a><code>find</code> 命令是 Linux 中用于查找文件和目录的强大工具。它可以在指定目录下递归查找文件，并根据文件名、文件大小、文件类型、文件修改时间等多种条件进行筛选</h5><img src="file:///C:\Users\20191\AppData\Local\Temp\ksohtml4248\wps5.jpg" alt="img"  />

<p>首先查看当前目录以及子目录中的所有的文件：</p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统6\image-20230506213825305.png" alt="image-20230506213825305"></p>
<p>下面按照文件类型查看文件：</p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统6\image-20230506214006266.png" alt="image-20230506214006266"></p>
<h5 id="lt-7-gt-磁盘硬件挂载"><a href="#lt-7-gt-磁盘硬件挂载" class="headerlink" title="&lt;7&gt;磁盘硬件挂载"></a>&lt;7&gt;磁盘硬件挂载</h5><p>我们在用惯了Windows系统后总觉得一切都是理所当然的，平时把U盘插入到电脑后也从来没有考虑过Windows系统做了哪些事情，才使得我们可以访问这个U盘的。接下来我们会逐一学习在Linux系统中挂载和卸载存储设备的方法，以便大家更好地了解Linux系统添加硬件设备的工作原理和流程。在拿到一块全新的硬盘存储设备后要先分区，然后格式化，最后才能挂载并正常使用。“分区”和“格式化”大家以前经常听到，但“挂载”又是什么呢？最简单、最贴切的解释—当用户需要使用硬盘设备或分区中的数据时，需要先将其与一个已存在的目录文件进行关联，而这个关联动作就是“挂载”。</p>
<p>在 Linux 系统中，可以使用 <code>mount</code> 命令来挂载硬盘设备。<code>mount</code> 命令的语法为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount [-t &lt;type&gt;] [-o &lt;options&gt;] &lt;device&gt; &lt;dir&gt;</span><br></pre></td></tr></table></figure>

<p>其中，<code>-t</code> 选项用于指定文件系统类型，例如 ext4、xfs 等。<code>-o</code> 选项用于指定挂载选项，例如读写权限、权限控制等。<code>&lt;device&gt;</code> 参数指定要挂载的设备，例如 <code>/dev/sdb1</code>。<code>&lt;dir&gt;</code> 参数指定挂载点，即挂载设备后的目录。</p>
<p>下面是具体操作：</p>
<p>此命令查看了正在被系统挂载的设备：</p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统6\image-20230506215045095.png" alt="image-20230506215045095"></p>
<h5 id="lt-8-gt-自动挂载硬盘设备："><a href="#lt-8-gt-自动挂载硬盘设备：" class="headerlink" title="&lt;8&gt;自动挂载硬盘设备："></a>&lt;8&gt;自动挂载硬盘设备：</h5><p>为了使得硬盘设备在系统启动时能够自动挂载，需要将挂载信息添加到 <code>/etc/fstab</code> 文件中。<code>/etc/fstab</code> 文件记录了系统启动时需要挂载的文件系统信息，其中当一个硬盘被插入到计算机中时，操作系统需要识别它并将其作为一个文件系统挂载到文件树中。挂载是将存储设备与文件系统目录树相连的过程，使得用户能够在该目录下访问该存储设备中的文件。</p>
<p>在Linux中，磁盘的挂载操作可以通过命令行或者文件系统表（&#x2F;etc&#x2F;fstab）来完成。</p>
<h5 id="1-命令行挂载"><a href="#1-命令行挂载" class="headerlink" title="1.命令行挂载"></a>1.命令行挂载</h5><p>命令行挂载是一种在命令行中执行的磁盘挂载操作。首先需要创建一个挂载点（mount point），挂载点是指一个用于挂载设备的目录，可以在文件系统中的任何地方创建。</p>
<h5 id="2-文件系统挂载"><a href="#2-文件系统挂载" class="headerlink" title="2.文件系统挂载"></a>2.文件系统挂载</h5><p>文件系统表（&#x2F;etc&#x2F;fstab）是一个用于配置系统启动时自动挂载磁盘的文件。在文件系统表中，每一行代表一个磁盘挂载操作，包含了磁盘设备、挂载点、文件系统类型、挂载选项等信息。下面是一个文件系统表的示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/dev/sdb1 /mydisk ext4 defaults 0 0</span><br></pre></td></tr></table></figure>

<p>其中，第一列是磁盘设备名称，第二列是挂载点目录，第三列是文件系统类型（例如ext4、ntfs等），第四列是挂载选项（例如defaults、noatime等），第五列是dump选项，第六列是fsck选项。</p>
<p>在编辑文件系统表时，需要注意以下几点：</p>
<ul>
<li>在编辑文件系统表前，最好备份一下该文件，避免修改错误导致系统无法启动。</li>
<li>如果挂载点目录不存在，需要先创建该目录。</li>
<li>文件系统表中的每一行必须以换行符（\n）结尾。</li>
<li>文件系统表中以#开头的行表示注释，不会被挂载。</li>
</ul>
<h5 id="lt-9-gt-交换分区"><a href="#lt-9-gt-交换分区" class="headerlink" title="&lt;9&gt;交换分区"></a>&lt;9&gt;交换分区</h5><p>Linux系统的交换分区（swap partition）是指用于临时存储内存中未使用的数据和进程的内存页的一部分硬盘空间。当系统内存不足时，Linux会将一部分不常用的内存页移动到交换分区中，从而释放出内存空间以供更重要的进程使用。交换分区的作用类似于Windows中的虚拟内存（virtual memory）。</p>
<p>通常，Linux系统的交换分区会在安装时就被创建并格式化。交换分区可以是一个独立的分区，也可以是一个文件，但独立分区的性能更好，因为它们更接近物理硬盘。交换分区的创建过程与前文讲到的挂载并使用存储设备的过程非常相似。在对&#x2F;dev&#x2F;sdb存储设备进行分区操作前，有必要先说一下交换分区的划分建议：在生产环境中，交换分区的大小一般为真实物理内存的1.5～2倍，为了让大家更明显地感受交换分区空间的变化，这里取出一个大小为5GB的主分区作为交换分区资源。在分区创建完毕后保存并退出即可。</p>
<p>在Linux中，可以使用swapon和swapoff命令来管理交换分区。swapon命令用于启用交换分区，swapoff命令用于禁用交换分区。</p>
<p>下面是具体操作：</p>
<h5 id="查看系统中真实存在的设备："><a href="#查看系统中真实存在的设备：" class="headerlink" title="查看系统中真实存在的设备："></a>查看系统中真实存在的设备：</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统6\image-20230506215411223.png" alt="image-20230506215411223"></p>
<h5 id="启用-x2F-dev-x2F-sda3作为交换分区"><a href="#启用-x2F-dev-x2F-sda3作为交换分区" class="headerlink" title="启用&#x2F;dev&#x2F;sda3作为交换分区"></a>启用&#x2F;dev&#x2F;sda3作为交换分区</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo swapon /dev/sda3</span><br></pre></td></tr></table></figure>

<h5 id="要禁用交换分区，可以使用以下命令"><a href="#要禁用交换分区，可以使用以下命令" class="headerlink" title="要禁用交换分区，可以使用以下命令"></a>要禁用交换分区，可以使用以下命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo swapoff /dev/sda3</span><br></pre></td></tr></table></figure>

<h5 id="可以使用free命令来查看交换分区的使用情况。该命令将显示交换分区的大小、已用空间、可用空间以及交换分区是否正在使用。"><a href="#可以使用free命令来查看交换分区的使用情况。该命令将显示交换分区的大小、已用空间、可用空间以及交换分区是否正在使用。" class="headerlink" title="可以使用free命令来查看交换分区的使用情况。该命令将显示交换分区的大小、已用空间、可用空间以及交换分区是否正在使用。"></a>可以使用free命令来查看交换分区的使用情况。该命令将显示交换分区的大小、已用空间、可用空间以及交换分区是否正在使用。</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统6\image-20230506215935229.png" alt="image-20230506215935229"></p>
<p>最后总结一下：</p>
<p>为了在多进程环境下，使得进程之间的内存地址不受影响，相互隔离，于是操作系统就为每个进程独立分配一套<strong>虚拟地址空间</strong>，每个程序只关心自己的虚拟地址就可以，实际上大家的虚拟地址都是一样的，但分布到物理地址内存是不一样的。作为程序，也不用关心物理地址的事情。</p>
<p>每个进程都有自己的虚拟空间，而物理内存只有一个，所以当启用了大量的进程，物理内存必然会很紧张，于是操作系统会通过<strong>内存交换</strong>技术，把不常使用的内存暂时存放到硬盘（换出），在需要的时候再装载回物理内存（换入）。</p>
<p>那既然有了虚拟地址空间，那必然要把虚拟地址「映射」到物理地址，这个事情通常由操作系统来维护。</p>
<p>那么对于虚拟地址与物理地址的映射关系，可以有<strong>分段</strong>和<strong>分页</strong>的方式，同时两者结合都是可以的。</p>
<p>内存分段是根据程序的逻辑角度，分成了栈段、堆段、数据段、代码段等，这样可以分离出不同属性的段，同时是一块连续的空间。但是每个段的大小都不是统一的，这就会导致外部内存碎片和内存交换效率低的问题。</p>
<p>于是，就出现了内存分页，把虚拟空间和物理空间分成大小固定的页，如在 Linux 系统中，每一页的大小为 <code>4KB</code>。由于分了页后，就不会产生细小的内存碎片，解决了内存分段的外部内存碎片问题。同时在内存交换的时候，写入硬盘也就一个页或几个页，这就大大提高了内存交换的效率。</p>
<p>再来，为了解决简单分页产生的页表过大的问题，就有了<strong>多级页表</strong>，它解决了空间上的问题，但这就会导致 CPU 在寻址的过程中，需要有很多层表参与，加大了时间上的开销。于是根据程序的<strong>局部性原理</strong>，在 CPU 芯片中加入了 <strong>TLB</strong>，负责缓存最近常被访问的页表项，大大提高了地址的转换速度。</p>
<p><strong>Linux 系统主要采用了分页管理，但是由于 Intel 处理器的发展史，Linux 系统无法避免分段管理</strong>。于是 Linux 就把所有段的基地址设为 <code>0</code>，也就意味着所有程序的地址空间都是线性地址空间（虚拟地址），相当于屏蔽了 CPU 逻辑地址的概念，所以段只被用于访问控制和内存保护。</p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>大学大作业</tag>
      </tags>
  </entry>
  <entry>
    <title>OS7</title>
    <url>/2023/05/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F7/</url>
    <content><![CDATA[<h3 id="一、实验题目"><a href="#一、实验题目" class="headerlink" title="一、实验题目"></a>一、实验题目</h3><p>1、下载、编译内核源代码[1][2]</p>
<p>2、启动测试所编译出来的内核</p>
<p>3、使用Clang编译内核</p>
<p>4、成功配置Linux Kernel静态分析工具[3] </p>
<span id="more"></span>

<h3 id="二、相关原理与知识"><a href="#二、相关原理与知识" class="headerlink" title="二、相关原理与知识"></a><strong>二、相关原理与知识</strong></h3><h5 id="lt-1-gt-Linux内核编译"><a href="#lt-1-gt-Linux内核编译" class="headerlink" title="&lt;1&gt;Linux内核编译"></a>&lt;1&gt;Linux内核编译</h5><p>编译Linux内核是一项高级任务，需要熟悉Linux操作系统和系统内核的相关知识。以下是在Linux上编译内核的一般步骤：</p>
<ol>
<li>下载内核源代码： 内核源代码可以从Linux官网下载，也可以从第三方网站获取。一般建议使用最新版本的内核源代码。</li>
<li>解压内核源代码： 将下载的内核源代码解压到本地目录中。一般建议将内核源代码解压到<code>/usr/src</code>目录下。</li>
<li>配置内核： 进入内核源代码所在的目录，在终端中执行<code>make menuconfig</code>命令。该命令会打开内核配置界面，程序员可以在这里选择需要编译的内核模块以及编译参数。配置完毕后，保存配置并退出。</li>
<li>编译内核： 在终端中执行<code>make</code>命令，开始编译内核源代码。这个过程可能需要花费一些时间，具体时间取决于系统的性能和编译的选项。编译完成后，会在当前目录下生成内核镜像文件和模块文件。</li>
<li>安装内核： 在终端中执行<code>make install</code>命令，将内核镜像文件和模块文件安装到系统中。该命令会自动将内核镜像文件拷贝到<code>/boot</code>目录下，并生成<code>/boot/grub/menu.lst</code>文件，同时将模块文件拷贝到<code>/lib/modules</code>目录下。</li>
<li>更新引导： 在终端中执行<code>update-grub</code>命令，更新系统的引导程序。该命令会自动检测系统中的操作系统和内核，并生成引导菜单。</li>
<li>重启系统： 在终端中执行<code>reboot</code>命令，重启系统。重启后，系统会加载新安装的内核。</li>
</ol>
<h5 id="lt-2-gt-configure"><a href="#lt-2-gt-configure" class="headerlink" title="&lt;2&gt;.\configure"></a>&lt;2&gt;.\configure</h5><p><code>configure</code>是一种脚本工具，通常用于自动化软件编译过程中的配置和构建。这个脚本通常被称为”configure脚本”或”autoconf脚本”，其核心原理是在根据所处的操作系统和环境，为软件自动创建一个特定的Makefile文件，使得软件可以在不同的系统和环境中进行编译和安装。</p>
<p>下面是<code>configure</code>的一般原理：</p>
<ol>
<li>检查系统信息和可用的编译器和库： <code>configure</code>会检测当前系统的各种信息，例如操作系统类型、处理器类型、编译器类型和版本、C++库、头文件等，来确定可用的编译器和库。</li>
<li>检查可用的功能和选项： <code>configure</code>还可以检查要编译的软件所需要的特定功能和选项，例如是否启用某些库、是否支持某些特定的文件格式等。</li>
<li>创建Makefile文件： 基于前两个步骤中的信息，<code>configure</code>会创建一个Makefile文件，其中包含了编译和链接软件所需的所有命令和选项。这个Makefile可以用来编译和安装软件。</li>
<li>执行Makefile文件： 最后，用户可以使用生成的Makefile文件执行软件的编译和安装过程。</li>
</ol>
<h5 id="lt-3-gt-make"><a href="#lt-3-gt-make" class="headerlink" title="&lt;3&gt;make"></a>&lt;3&gt;make</h5><p><code>make</code>是一个非常常用的命令，它是用来自动化编译和安装程序的工具。<code>make</code>命令的作用是根据指定的Makefile文件来生成目标文件，其基本的工作原理是根据文件的依赖关系来决定哪些文件需要重新编译，从而实现自动化编译。</p>
<p>下面是<code>make</code>命令的一般原理：</p>
<ol>
<li>创建Makefile文件： <code>Makefile</code>文件描述了源文件之间的依赖关系以及编译和链接的规则，<code>make</code>根据这个文件来编译程序。一般来说，Makefile文件由程序员手动编写。</li>
<li>分析Makefile文件： <code>make</code>会分析Makefile文件，并找出需要编译的源文件和编译器的命令。</li>
<li>比较源文件和目标文件的时间戳： <code>make</code>会比较源文件和目标文件的时间戳，如果源文件的时间戳比目标文件的时间戳新，或者目标文件不存在，那么就需要重新编译源文件。</li>
<li>执行编译器的命令： <code>make</code>会执行编译器的命令来编译源文件，生成目标文件。</li>
<li>生成可执行文件： 当所有的目标文件都被编译之后，<code>make</code>会将它们链接起来，生成最终的可执行文件。</li>
<li>执行安装命令： 最后，用户可以使用<code>make install</code>命令将可执行文件和其他需要安装的文件拷贝到系统的相应目录中。</li>
</ol>
<h5 id="make-install"><a href="#make-install" class="headerlink" title="make install"></a>make install</h5><p><code>make install</code>是Linux系统下<code>make</code>命令的一个重要参数，它用来将程序和相关文件安装到系统中指定的目录中。</p>
<p>具体来说，<code>make install</code>的作用是将程序和相关文件从当前目录下的构建目录拷贝到系统指定的目录中。一般来说，程序员可以通过编辑Makefile文件来指定需要安装的文件和安装路径。</p>
<p>下面是<code>make install</code>命令的一般原理：</p>
<ol>
<li>创建目录： 如果安装目录不存在，<code>make install</code>会自动创建它。</li>
<li>拷贝文件： <code>make install</code>会将需要安装的文件拷贝到指定的安装目录中，包括可执行文件、库文件、配置文件等。</li>
<li>修改权限： <code>make install</code>会修改安装文件的权限，以确保它们可以被执行和读取。</li>
<li>创建符号链接： <code>make install</code>可以创建符号链接，以便其他程序可以引用已经安装的文件。</li>
</ol>
<h5 id="lt-4-gt-wget工具"><a href="#lt-4-gt-wget工具" class="headerlink" title="&lt;4&gt;wget工具"></a>&lt;4&gt;wget工具</h5><p><code>wget</code>是一个在Linux系统中使用的下载工具，它可以通过HTTP、HTTPS、FTP和FTP安全等协议下载文件。<code>wget</code>支持断点续传和代理服务器，可以在下载中自动重试并支持多个文件下载等功能，是一个非常实用的命令行工具。</p>
<ol>
<li><code>-O</code>：指定文件名。 </li>
<li><code>-c</code>：支持断点续传。 </li>
<li><code>-r</code>：递归下载。 </li>
<li><code>-np</code>：不递归爬取父级目录。</li>
<li><code>-i</code>：从文件中读取URL列表进行下载。</li>
<li><code>-P</code>：指定下载目录。 </li>
<li><code>-t</code>：设置尝试下载的次数。 </li>
<li><code>-b</code>：在后台下载。</li>
</ol>
<h5 id="lt-5-gt-gcc工具"><a href="#lt-5-gt-gcc工具" class="headerlink" title="&lt;5&gt;gcc工具"></a>&lt;5&gt;gcc工具</h5><p><code>gcc</code>是GNU Compiler Collection（GNU编译器集合）的缩写，是一个自由软件基金会（FSF）发布的编程语言C、C++、Objective-C、Fortran、Ada、和D的编译器集合。它是一个广泛使用的编译器，被广泛应用于Linux和其他UNIX系统中。</p>
<p><code>gcc</code>的主要功能是将源代码转换为可执行的机器代码，它还提供了调试、优化、警告等功能。<code>gcc</code>支持多种目标平台，包括x86、ARM、PowerPC等，同时也支持多种操作系统，包括Linux、Windows、Mac OS等。</p>
<p>除了编译器本身外，<code>gcc</code>还包含了一些其他工具，例如预处理器、汇编器、链接器等，这些工具可以将多个源文件链接成一个可执行文件。</p>
<h5 id="lt-6-gt-clang工具"><a href="#lt-6-gt-clang工具" class="headerlink" title="&lt;6&gt;clang工具"></a>&lt;6&gt;clang工具</h5><p><code>Clang</code>是一个C、C++、Objective-C和Objective-C++编译器，由苹果公司主导开发，并开源发布。<code>Clang</code>是一款快速、稳定、易于维护的编译器，它的目标是替代传统的C&#x2F;C++编译器，例如GNU的<code>gcc</code>编译器。</p>
<p><code>Clang</code>的主要特点如下：</p>
<ol>
<li>高度兼容C、C++和Objective-C标准：<code>Clang</code>严格遵循C、C++和Objective-C标准，可以在不同平台上编译和执行代码，而不会因为编译器的不同而出现不一致的问题。</li>
<li>高质量的诊断信息：<code>Clang</code>提供了丰富的编译诊断信息，包括错误、警告和注意事项，帮助开发人员快速发现和解决代码中的问题。</li>
<li>快速编译速度：<code>Clang</code>采用模块化架构，可以更快地完成编译过程，并且在代码修改后可以更快地重新编译。</li>
<li>开放源代码：<code>Clang</code>是开源软件，可以免费使用和修改，同时也可以为其他项目提供支持。</li>
</ol>
<p><code>Clang</code>和<code>gcc</code>在大部分功能上非常相似，但是<code>Clang</code>在某些方面有更好的表现，例如编译速度、诊断信息等方面。在macOS和iOS开发中，<code>Clang</code>是首选的编译器。</p>
<h5 id="lt-7-gt-Linux-Kernel静态分析工具"><a href="#lt-7-gt-Linux-Kernel静态分析工具" class="headerlink" title="&lt;7&gt;Linux Kernel静态分析工具"></a>&lt;7&gt;Linux Kernel静态分析工具</h5><p>在Linux Kernel的开发过程中，使用静态分析工具是非常重要的。静态分析工具可以帮助开发人员发现代码中的潜在问题和错误，提高代码的质量和可靠性。下面是一些常用的Linux Kernel静态分析工具：</p>
<ol>
<li><code>Sparse</code>：<code>Sparse</code>是一款基于C语言的静态分析工具，专门用于Linux Kernel代码的分析。它可以检查代码中的类型不匹配、空指针引用、未初始化变量、函数参数错误等问题。使用<code>Sparse</code>可以提高代码的可读性和可维护性。</li>
<li><code>Cppcheck</code>：<code>Cppcheck</code>是一款跨平台的C&#x2F;C++静态分析工具，支持Linux Kernel代码的分析。它可以检查代码中的内存泄漏、空指针引用、不一致的函数调用等问题。<code>Cppcheck</code>使用简单，可以快速发现代码中的问题。</li>
<li><code>Coverity Scan</code>：<code>Coverity Scan</code>是一款商业静态分析工具，也支持Linux Kernel代码的分析。它可以检查代码中的内存泄漏、空指针引用、不一致的函数调用等问题，并且可以生成详细的报告和修复建议。<code>Coverity Scan</code>功能强大，但需要付费使用。</li>
<li><code>Clang Static Analyzer</code>：<code>Clang Static Analyzer</code>是<code>Clang</code>编译器自带的静态分析工具，也支持Linux Kernel代码的分析。它可以检查代码中的空指针引用、内存泄漏、死锁等问题，并且可以生成详细的报告和修复建议。<code>Clang Static Analyzer</code>使用方便，可以与<code>clang</code>编译器集成使用。</li>
</ol>
<h3 id="三、实验过程以及结果分析"><a href="#三、实验过程以及结果分析" class="headerlink" title="三、实验过程以及结果分析"></a><strong>三、实验过程以及结果分析</strong></h3><h4 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h4><h5 id="首先是wget工具的下载，使用此工具下载linux内核源码："><a href="#首先是wget工具的下载，使用此工具下载linux内核源码：" class="headerlink" title="首先是wget工具的下载，使用此工具下载linux内核源码："></a>首先是wget工具的下载，使用此工具下载linux内核源码：</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sudo apt<span class="operator">-</span><span class="keyword">get</span> <span class="keyword">update</span></span><br><span class="line">sudo apt<span class="operator">-</span><span class="keyword">get</span> install wget</span><br></pre></td></tr></table></figure>

<h5 id="然后使用wget工具下载linux内核源码压缩包，在这次我下载的是linux-5-12版本，并且第一次下载是直接载官网下载的，发现速度极慢，然后用了中科大的镜像下载："><a href="#然后使用wget工具下载linux内核源码压缩包，在这次我下载的是linux-5-12版本，并且第一次下载是直接载官网下载的，发现速度极慢，然后用了中科大的镜像下载：" class="headerlink" title="然后使用wget工具下载linux内核源码压缩包，在这次我下载的是linux-5.12版本，并且第一次下载是直接载官网下载的，发现速度极慢，然后用了中科大的镜像下载："></a>然后使用wget工具下载linux内核源码压缩包，在这次我下载的是linux-5.12版本，并且第一次下载是直接载官网下载的，发现速度极慢，然后用了中科大的镜像下载：</h5><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">wget <span class="symbol">https:</span>/<span class="regexp">/www.kernel.org/pub</span><span class="regexp">/linux/kernel</span><span class="regexp">/v5.x/linux</span>-<span class="number">5.12</span>.tar.gz</span><br><span class="line">wget <span class="symbol">https:</span>/<span class="regexp">/mirrors.ustc.edu.cn/kernel</span>.org/linux/kernel/v5.x/linux-<span class="number">5.12</span>.tar.gz</span><br></pre></td></tr></table></figure>

<h5 id="然后就是将压缩包解压缩：解压过程的截图也忘记了下面是操作代码，解压缩完毕之后进入linux-5-12文件夹中进行操作"><a href="#然后就是将压缩包解压缩：解压过程的截图也忘记了下面是操作代码，解压缩完毕之后进入linux-5-12文件夹中进行操作" class="headerlink" title="然后就是将压缩包解压缩：解压过程的截图也忘记了下面是操作代码，解压缩完毕之后进入linux-5.12文件夹中进行操作"></a>然后就是将压缩包解压缩：解压过程的截图也忘记了下面是操作代码，解压缩完毕之后进入linux-5.12文件夹中进行操作</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf linux-5.12.tar.gz</span><br><span class="line"><span class="built_in">cd</span> linux-5.12</span><br></pre></td></tr></table></figure>

<h5 id="在下载并解压linux内核源代码的时候忘记截图了，在这里直接放上下载好之后的截图："><a href="#在下载并解压linux内核源代码的时候忘记截图了，在这里直接放上下载好之后的截图：" class="headerlink" title="在下载并解压linux内核源代码的时候忘记截图了，在这里直接放上下载好之后的截图："></a>在下载并解压linux内核源代码的时候忘记截图了，在这里直接放上下载好之后的截图：</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507172035120.png" alt="image-20230507172035120"></p>
<h5 id="然后是各种工具的下载，在运行make-menuconfig之前，需要一系列的工具才能进入编译配置界面："><a href="#然后是各种工具的下载，在运行make-menuconfig之前，需要一系列的工具才能进入编译配置界面：" class="headerlink" title="然后是各种工具的下载，在运行make menuconfig之前，需要一系列的工具才能进入编译配置界面："></a>然后是各种工具的下载，在运行make menuconfig之前，需要一系列的工具才能进入编译配置界面：</h5><h5 id="首先是ncurses工具的下载："><a href="#首先是ncurses工具的下载：" class="headerlink" title="首先是ncurses工具的下载："></a>首先是ncurses工具的下载：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libncurses5-dev</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507171816155.png"></p>
<h5 id="然后是pkg-config工具包的下载："><a href="#然后是pkg-config工具包的下载：" class="headerlink" title="然后是pkg-config工具包的下载："></a>然后是pkg-config工具包的下载：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install pkg-config</span><br></pre></td></tr></table></figure>



<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507171838103.png" alt="image-20230507171838103"></p>
<h5 id="最后是flex工具的下载："><a href="#最后是flex工具的下载：" class="headerlink" title="最后是flex工具的下载："></a>最后是flex工具的下载：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install flex</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507172246719.png" alt="image-20230507172246719"></p>
<h5 id="终于，在经过了众多的工具安装之后，我们进入编译配置界面："><a href="#终于，在经过了众多的工具安装之后，我们进入编译配置界面：" class="headerlink" title="终于，在经过了众多的工具安装之后，我们进入编译配置界面："></a>终于，在经过了众多的工具安装之后，我们进入编译配置界面：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507172732691.png" alt="image-20230507172732691"></p>
<h5 id="显然，这玩意的配置不在我的能力范围内，所以我直接采用了默认配置："><a href="#显然，这玩意的配置不在我的能力范围内，所以我直接采用了默认配置：" class="headerlink" title="显然，这玩意的配置不在我的能力范围内，所以我直接采用了默认配置："></a>显然，这玩意的配置不在我的能力范围内，所以我直接采用了默认配置：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make defconfig</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507172817354.png" alt="image-20230507172817354"></p>
<h5 id="终于：来到了编译环节，但是在这之前还是要先下载编译时所需要的工具："><a href="#终于：来到了编译环节，但是在这之前还是要先下载编译时所需要的工具：" class="headerlink" title="终于：来到了编译环节，但是在这之前还是要先下载编译时所需要的工具："></a>终于：来到了编译环节，但是在这之前还是要先下载编译时所需要的工具：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libelf-dev</span><br></pre></td></tr></table></figure>

<p> <img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507173115156.png" alt="image-20230507173115156"></p>
<h5 id="最后进入linux内核编译环节："><a href="#最后进入linux内核编译环节：" class="headerlink" title="最后进入linux内核编译环节："></a>最后进入linux内核编译环节：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<h5 id="一个小小的make命令，运行了足足几分钟才编译完毕，下面是编译过程中的部分截图："><a href="#一个小小的make命令，运行了足足几分钟才编译完毕，下面是编译过程中的部分截图：" class="headerlink" title="一个小小的make命令，运行了足足几分钟才编译完毕，下面是编译过程中的部分截图："></a>一个小小的make命令，运行了足足几分钟才编译完毕，下面是编译过程中的部分截图：</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507175506807.png" alt="image-20230507175506807"></p>
<h5 id="最终linux内核编译成功。"><a href="#最终linux内核编译成功。" class="headerlink" title="最终linux内核编译成功。"></a>最终linux内核编译成功。</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure>

<h5 id="执行ls命令，观察文件夹中的文件"><a href="#执行ls命令，观察文件夹中的文件" class="headerlink" title="执行ls命令，观察文件夹中的文件"></a>执行ls命令，观察文件夹中的文件</h5><img src="C:\Z.Sagapo\myblog\source\_posts\操作系统7\image-20230507175814100.png" alt="image-20230507175814100" style="zoom: 200%;" />





<h4 id="问题二：启动测试所编译出来的内核"><a href="#问题二：启动测试所编译出来的内核" class="headerlink" title="问题二：启动测试所编译出来的内核"></a>问题二：启动测试所编译出来的内核</h4><h5 id="先进行模块的安装："><a href="#先进行模块的安装：" class="headerlink" title="先进行模块的安装："></a>先进行模块的安装：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make moudules_install</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507201404556.png" alt="image-20230507201404556"></p>
<h5 id="然后进行内核的安装："><a href="#然后进行内核的安装：" class="headerlink" title="然后进行内核的安装："></a>然后进行内核的安装：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507201802314.png" alt="image-20230507201802314"></p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507201828400.png" alt="image-20230507201828400"></p>
<h5 id="然后检测内核安装是否完成："><a href="#然后检测内核安装是否完成：" class="headerlink" title="然后检测内核安装是否完成："></a>然后检测内核安装是否完成：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /lib/modules</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507201952665.png" alt="image-20230507201952665"></p>
<h5 id="发现5-12-0linux内核已经被安装到模块中，最后将虚拟机重启从而启动新安装的linux内核"><a href="#发现5-12-0linux内核已经被安装到模块中，最后将虚拟机重启从而启动新安装的linux内核" class="headerlink" title="发现5.12.0linux内核已经被安装到模块中，最后将虚拟机重启从而启动新安装的linux内核"></a>发现5.12.0linux内核已经被安装到模块中，最后将虚拟机重启从而启动新安装的linux内核</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507202352703.png" alt="image-20230507202352703"></p>
<h5 id="在重新启动后的开机界面可以发现新安装的linux5-12内核已经出现。"><a href="#在重新启动后的开机界面可以发现新安装的linux5-12内核已经出现。" class="headerlink" title="在重新启动后的开机界面可以发现新安装的linux5.12内核已经出现。"></a>在重新启动后的开机界面可以发现新安装的linux5.12内核已经出现。</h5><h4 id="问题三：使用Clang编译内核"><a href="#问题三：使用Clang编译内核" class="headerlink" title="问题三：使用Clang编译内核"></a>问题三：使用Clang编译内核</h4><h5 id="首先按钻过Clang编译器，使用以下命令进行安装"><a href="#首先按钻过Clang编译器，使用以下命令进行安装" class="headerlink" title="首先按钻过Clang编译器，使用以下命令进行安装"></a>首先按钻过Clang编译器，使用以下命令进行安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install llvm clang</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507204833203.png" alt="image-20230507204833203"></p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507204902199.png" alt="image-20230507204902199"></p>
<h5 id="检测clang是否安装成功："><a href="#检测clang是否安装成功：" class="headerlink" title="检测clang是否安装成功："></a>检测clang是否安装成功：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clang --version</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507205429782.png" alt="image-20230507205429782"></p>
<h5 id="然后设置环境变量，"><a href="#然后设置环境变量，" class="headerlink" title="然后设置环境变量，"></a>然后设置环境变量，</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CC=clang</span><br><span class="line"><span class="built_in">export</span> CXX=clang++</span><br></pre></td></tr></table></figure>

<h5 id="执行下列命令将clang设置为默认编译器："><a href="#执行下列命令将clang设置为默认编译器：" class="headerlink" title="执行下列命令将clang设置为默认编译器："></a>执行下列命令将clang设置为默认编译器：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --config cc</span><br><span class="line">sudo update-alternatives --config c++</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507205324805.png" alt="image-20230507205324805"></p>
<h5 id="检测默认编译器是否设置成功："><a href="#检测默认编译器是否设置成功：" class="headerlink" title="检测默认编译器是否设置成功："></a>检测默认编译器是否设置成功：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cc --version</span><br><span class="line">c++ --version</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507205602301.png" alt="image-20230507205602301"></p>
<h5 id="然后编译内核："><a href="#然后编译内核：" class="headerlink" title="然后编译内核："></a>然后编译内核：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j$(<span class="built_in">nproc</span>)</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507205613447.png" alt="image-20230507205613447"></p>
<h5 id="安装模块："><a href="#安装模块：" class="headerlink" title="安装模块："></a>安装模块：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make modules_install</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507205628491.png" alt="image-20230507205628491"></p>
<h5 id="安装内核："><a href="#安装内核：" class="headerlink" title="安装内核："></a>安装内核：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230507205656209.png" alt="image-20230507205656209"></p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507205709873.png" alt="image-20230507205709873"></p>
<h4 id="题目四：成功配置Linux-Kernel静态分析工具"><a href="#题目四：成功配置Linux-Kernel静态分析工具" class="headerlink" title="题目四：成功配置Linux Kernel静态分析工具"></a>题目四：成功配置Linux Kernel静态分析工具</h4><h5 id="Linux-Kernel静态分析工具可以帮助开发人员和内核维护者检查和改进内核代码："><a href="#Linux-Kernel静态分析工具可以帮助开发人员和内核维护者检查和改进内核代码：" class="headerlink" title="Linux Kernel静态分析工具可以帮助开发人员和内核维护者检查和改进内核代码："></a>Linux Kernel静态分析工具可以帮助开发人员和内核维护者检查和改进内核代码：</h5><h5 id="1、Sparse配置和使用："><a href="#1、Sparse配置和使用：" class="headerlink" title="1、Sparse配置和使用："></a>1、Sparse配置和使用：</h5><h5 id="Sparse是一个C语言静态分析器，用于检查内核代码中的类型错误、空指针解引用和其他常见的编程错误"><a href="#Sparse是一个C语言静态分析器，用于检查内核代码中的类型错误、空指针解引用和其他常见的编程错误" class="headerlink" title="Sparse是一个C语言静态分析器，用于检查内核代码中的类型错误、空指针解引用和其他常见的编程错误"></a>Sparse是一个C语言静态分析器，用于检查内核代码中的类型错误、空指针解引用和其他常见的编程错误</h5><h5 id="安装Sparse：安装过程忘记截图，下面直接给出使用此工具的截图"><a href="#安装Sparse：安装过程忘记截图，下面直接给出使用此工具的截图" class="headerlink" title="安装Sparse：安装过程忘记截图，下面直接给出使用此工具的截图"></a>安装Sparse：安装过程忘记截图，下面直接给出使用此工具的截图</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install sparse</span><br></pre></td></tr></table></figure>

<p>2、使用Sparse工具对代码进行静态分析</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make C=2 ARCH=x86_64</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507215725522.png" alt="image-20230507215725522"></p>
<h5 id="此命令将使用Sparse编译内核代码，并在编译过程中对代码进行静态分析。可以在控制台中查看分析结果。"><a href="#此命令将使用Sparse编译内核代码，并在编译过程中对代码进行静态分析。可以在控制台中查看分析结果。" class="headerlink" title="此命令将使用Sparse编译内核代码，并在编译过程中对代码进行静态分析。可以在控制台中查看分析结果。"></a>此命令将使用Sparse编译内核代码，并在编译过程中对代码进行静态分析。可以在控制台中查看分析结果。</h5><h5 id="如果Sparse发现了错误，它会在控制台中输出错误信息，并提示在哪里可以找到错误。"><a href="#如果Sparse发现了错误，它会在控制台中输出错误信息，并提示在哪里可以找到错误。" class="headerlink" title="如果Sparse发现了错误，它会在控制台中输出错误信息，并提示在哪里可以找到错误。"></a>如果Sparse发现了错误，它会在控制台中输出错误信息，并提示在哪里可以找到错误。</h5><h4 id="2、安装Coccinelle"><a href="#2、安装Coccinelle" class="headerlink" title="2、安装Coccinelle"></a>2、安装Coccinelle</h4><h5 id="Coccinelle是一个用于自动化代码重构的工具。它可以通过脚本自动修改内核源代码中的代码模式，并生成新的代码，以便减少手动重构代码的工作量。"><a href="#Coccinelle是一个用于自动化代码重构的工具。它可以通过脚本自动修改内核源代码中的代码模式，并生成新的代码，以便减少手动重构代码的工作量。" class="headerlink" title="Coccinelle是一个用于自动化代码重构的工具。它可以通过脚本自动修改内核源代码中的代码模式，并生成新的代码，以便减少手动重构代码的工作量。"></a>Coccinelle是一个用于自动化代码重构的工具。它可以通过脚本自动修改内核源代码中的代码模式，并生成新的代码，以便减少手动重构代码的工作量。</h5><h5 id="安装coccinelle"><a href="#安装coccinelle" class="headerlink" title="安装coccinelle"></a>安装coccinelle</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install coccinelle</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507215926046.png" alt="image-20230507215926046"></p>
<p>使用sget安装coccinelle</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://coccinelle.gitlabpages.inria.fr/downloads/coccinelle-1.0.8.tgz</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统7\image-20230507224927572.png" alt="image-20230507224927572"></p>
<h5 id="然后在内核源代码输入以下命令使用coccinelle对代码进行重构："><a href="#然后在内核源代码输入以下命令使用coccinelle对代码进行重构：" class="headerlink" title="然后在内核源代码输入以下命令使用coccinelle对代码进行重构："></a>然后在内核源代码输入以下命令使用coccinelle对代码进行重构：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spatch -sp_file script.cocci path/to/source/files/</span><br></pre></td></tr></table></figure>



<h3 id="四：问题总结"><a href="#四：问题总结" class="headerlink" title="四：问题总结"></a>四：问题总结</h3><p>本次实验整体分为两个部分，第一部分是配置linux的编译环境，然后分别使用gcc和clang工具对linux内核进行编译，对编译出的linux内核进行测试，第二部是配置Linux Kernel静态分析工具，静态分析有多种工具，我只配置了sparse和coccinelle工具并进行了一定的使用检测。</p>
<p>本次实验的难点在于对于内核的理解，以及对各种命令的参数的理解，让我加深了对于各种工具的使用。</p>
<p>同时，所谓linux内核编译，就是将已有的linux内核源代码下载下来，在自己的电脑上使用gcc或者clang这两种编译工具将linux内核代码编译成可以启动的linux系统程序，将此程序安装到启动模块，就可以在开始界面看到安装的新的linux内核了。</p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>大学大作业</tag>
      </tags>
  </entry>
  <entry>
    <title>OS_Extra</title>
    <url>/2023/05/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%99%84%E5%8A%A0%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<h3 id="一、实验题目："><a href="#一、实验题目：" class="headerlink" title="一、实验题目："></a>一、实验题目：</h3><p>使用已有动态分析工具（沙箱）对恶意软件的操作系统资源使用情况进行分析<br>注意：<br>恶意软件不限制平台（Windows、Android、Linux），可从 Virusshare 等平台下载；<br>动态分析工具不作要求，可使用（Windows - Cuckoo Sandbox，Android - Appmon，Linux - Dtrace）；<br>动态分析要求运行环境满足恶意软件执行要求，可能存在缺少运行环境无法执行的情况，选择可以成功运行的恶意软件分析即可；<br>动态分许需要自动化测试工具，触发恶意软件的模拟执行；</p>
<p>选择若干种典型恶意软件，要求已知其恶意行为特征，并提供相应的恶意行为证明材料（如某安全公司分析报告），并与动态分析工具的结果进行对应；<br>恶意软件采用沙箱规避技术以绕过动态分析工具，请详细调研几种典型沙箱规避技术，并提出相应的对抗规避机制；<br>对于对抗规避机制，请通过实验结果证明可以对抗沙箱规避技术；对于实现困难的对抗机制，请详细描述相应的对抗规避原理，并提供相应的参考文献（如学术论文）；</p>
<p>调研现有的沙箱规避技术（主要通过哪些 API 来检测在沙箱环境中），然后设计一些检测的防规避技术，最简单的就是采用Windows API HOOK技术，返回虚假的返回值即可</p>
<span id="more"></span>

<h3 id="二、实验原理"><a href="#二、实验原理" class="headerlink" title="二、实验原理"></a>二、实验原理</h3><h5 id="检测用户交互是沙箱环境中常用的一种规避技术，用于规避沙箱环境中的检测机制，使得恶意代码可以欺骗沙箱环境。下面介绍一些常用的检测用户交互的沙盒规避技术及对抗方法："><a href="#检测用户交互是沙箱环境中常用的一种规避技术，用于规避沙箱环境中的检测机制，使得恶意代码可以欺骗沙箱环境。下面介绍一些常用的检测用户交互的沙盒规避技术及对抗方法：" class="headerlink" title="检测用户交互是沙箱环境中常用的一种规避技术，用于规避沙箱环境中的检测机制，使得恶意代码可以欺骗沙箱环境。下面介绍一些常用的检测用户交互的沙盒规避技术及对抗方法："></a>检测用户交互是沙箱环境中常用的一种规避技术，用于规避沙箱环境中的检测机制，使得恶意代码可以欺骗沙箱环境。下面介绍一些常用的检测用户交互的沙盒规避技术及对抗方法：</h5><ol>
<li>检测键盘鼠标事件：检测沙箱环境中的键盘鼠标事件，并判断其是否真实，如果检测到虚拟键盘鼠标事件，则认为是在沙箱环境中运行。对抗方法：欺骗检测程序，让其认为键盘鼠标事件是真实的，可以通过修改虚拟机的配置文件或使用第三方工具来达到目的。</li>
<li>检测鼠标位置：检测鼠标在屏幕上的位置，如果位置没有变化或者只是做了一些固定的循环运动，则认为是在沙箱环境中运行。对抗方法：欺骗检测程序，让其认为鼠标位置是真实的，可以通过修改虚拟机的配置文件或使用第三方工具来达到目的。</li>
<li>检测睡眠模式：检测沙箱环境是否处于睡眠模式，如果处于睡眠模式，则认为是在沙箱环境中运行。对抗方法：修改沙箱环境的配置，禁用睡眠模式。</li>
<li>检测虚拟硬件设备：检测沙箱环境中的虚拟硬件设备，如果发现虚拟硬件设备，则认为是在沙箱环境中运行。对抗方法：欺骗检测程序，让其认为虚拟硬件设备是真实的，可以通过修改虚拟机的配置文件或使用第三方工具来达到目的。</li>
<li>检测文件系统：检测沙箱环境中的文件系统，如果发现文件系统与真实环境不同，则认为是在沙箱环境中运行。对抗方法：欺骗检测程序，让其认为文件系统是真实的，可以通过修改虚拟机的配置文件或使用第三方工具来达到目的。</li>
</ol>
<h5 id="对于通过检测用户交互的沙盒规避技术，以下是一些有效的对抗措施："><a href="#对于通过检测用户交互的沙盒规避技术，以下是一些有效的对抗措施：" class="headerlink" title="对于通过检测用户交互的沙盒规避技术，以下是一些有效的对抗措施："></a>对于通过检测用户交互的沙盒规避技术，以下是一些有效的对抗措施：</h5><ol>
<li>模拟用户交互：可以通过自动化测试工具或编写脚本等方式，模拟用户与程序的交互，使得程序无法判断是否在沙盒环境中运行。</li>
<li>修改沙盒环境的参数：可以通过修改沙盒环境的参数，如文件路径、文件名、操作系统版本等，使得程序无法正确地判断当前是否在沙盒环境中运行。</li>
<li>伪造系统特征：可以通过修改系统信息，如伪造MAC地址、IP地址、硬件信息等，使得程序无法正确地判断当前所处的环境。</li>
<li>使用反沙盒工具：反沙盒工具可以模拟沙盒环境，使得恶意软件误认为自己在沙盒中运行，从而触发特定的行为。因此，沙盒技术需要及时更新自己的特征库，以识别并防范这些反沙盒工具。</li>
<li>动态监测：使用动态监测工具可以对程序进行实时监控，检测程序的行为，从而及时发现和防范恶意行为。</li>
</ol>
<h5 id="通过检测系统特征的沙盒规避技术是一种通过检测系统环境的一些特征，来判断当前程序是否在一个虚拟环境中运行，以规避沙盒检测的技术。"><a href="#通过检测系统特征的沙盒规避技术是一种通过检测系统环境的一些特征，来判断当前程序是否在一个虚拟环境中运行，以规避沙盒检测的技术。" class="headerlink" title="通过检测系统特征的沙盒规避技术是一种通过检测系统环境的一些特征，来判断当前程序是否在一个虚拟环境中运行，以规避沙盒检测的技术。"></a>通过检测系统特征的沙盒规避技术是一种通过检测系统环境的一些特征，来判断当前程序是否在一个虚拟环境中运行，以规避沙盒检测的技术。</h5><h5 id="下面介绍几种常见的通过检测系统特征的沙盒规避技术以及相应的对抗规避机制："><a href="#下面介绍几种常见的通过检测系统特征的沙盒规避技术以及相应的对抗规避机制：" class="headerlink" title="下面介绍几种常见的通过检测系统特征的沙盒规避技术以及相应的对抗规避机制："></a>下面介绍几种常见的通过检测系统特征的沙盒规避技术以及相应的对抗规避机制：</h5><ol>
<li>检测硬件信息：某些恶意软件会检测虚拟机的硬件信息，如虚拟机的内存大小、CPU数量、网卡型号等，来判断当前程序是否运行在虚拟机环境中。对抗这种规避技术的方法是，可以通过修改虚拟机的硬件信息，如修改内存大小、CPU型号等来规避检测。</li>
<li>检测虚拟化软件：某些恶意软件会检测当前系统是否运行了虚拟化软件，如VMware、VirtualBox等，如果检测到了，则判断当前程序在一个虚拟环境中运行。对抗这种规避技术的方法是，可以修改虚拟化软件的标识信息，如修改虚拟机的BIOS信息、修改虚拟化软件的文件名等来规避检测。</li>
<li>检测系统文件：某些恶意软件会检测当前系统中是否存在某些系统文件或注册表项，如VMware的驱动文件、VirtualBox的注册表项等，如果检测到了，则判断当前程序在一个虚拟环境中运行。对抗这种规避技术的方法是，可以通过修改系统文件、删除注册表项等来规避检测。</li>
<li>检测网络：某些恶意软件会检测当前系统的网络环境，如IP地址、MAC地址、DNS服务器等，如果检测到了一些虚拟化软件常用的IP地址或者DNS服务器，则判断当前程序在一个虚拟环境中运行。对抗这种规避技术的方法是，可以修改虚拟机的网络配置，如修改IP地址、DNS服务器等来规避检测。</li>
</ol>
<p>需要注意的是，由于恶意软件可能使用多种规避技术来避免被沙盒检测，因此单独使用一种规避技术可能并不能完全规避检测。因此，沙盒技术的设计者需要使用多种检测机制，同时加入一些对抗规避技术的策略，以增强沙盒的安全性。</p>
<h5 id="针对检测系统特征的沙盒规避技术，可以采用以下对抗措施和检测方法："><a href="#针对检测系统特征的沙盒规避技术，可以采用以下对抗措施和检测方法：" class="headerlink" title="针对检测系统特征的沙盒规避技术，可以采用以下对抗措施和检测方法："></a>针对检测系统特征的沙盒规避技术，可以采用以下对抗措施和检测方法：</h5><ol>
<li>修改系统特征：攻击者可以修改操作系统的某些特征，使其不再符合沙盒检测的特征，从而规避检测。为了对抗这种攻击方式，沙盒可以采用多种特征检测机制，对系统特征进行多个方面的检测，并且尽可能地覆盖所有的系统特征，以防止被攻击者规避。</li>
<li>使用随机特征：沙盒可以在检测系统特征时使用一些随机特征，这些特征在每次执行沙盒时都是不同的，从而使攻击者无法预测和规避特征检测。</li>
<li>检测系统特征修改：在沙盒中可以添加监控系统特征的模块，当发现某些系统特征被修改时，及时报警或者终止程序的执行。</li>
<li>检测系统API调用：攻击者在修改系统特征的同时，也可能会调用一些系统API来规避沙盒的检测。沙盒可以通过检测系统API调用来发现这些攻击行为，同时可以限制程序对系统API的调用。</li>
<li>使用动态分析：使用动态分析工具对程序进行动态跟踪，分析其行为，可以检测出一些规避技术。同时，动态分析工具可以监控系统调用，检测恶意程序的行为，以及检测攻击者对系统特征的修改。</li>
</ol>
<h3 id="三、实验过程以及原理解释"><a href="#三、实验过程以及原理解释" class="headerlink" title="三、实验过程以及原理解释"></a>三、实验过程以及原理解释</h3><p>由于我对于virusshare上的恶意软件的使用导致我的麒麟操作系统直接死机报废，这次的实验还在慢慢的学习中，</p>
<p>最终，我使用了我做过的ctf题目中的恶意代码，（这个代码是我之前运行过的，并没有对我的系统造成太大的影响）以此为示例进行分析。</p>
<h5 id="1、恶意代码分析工具以及运行环境"><a href="#1、恶意代码分析工具以及运行环境" class="headerlink" title="1、恶意代码分析工具以及运行环境"></a>1、恶意代码分析工具以及运行环境</h5><h5 id="lt-1-gt-Remnux虚拟环境，此环境基于ububtu20-04版本，它是-Ubuntu-Linux-的预配置恶意软件分析发行版-在vm上配置remnux虚拟专门用于对恶意软件的分析检测。"><a href="#lt-1-gt-Remnux虚拟环境，此环境基于ububtu20-04版本，它是-Ubuntu-Linux-的预配置恶意软件分析发行版-在vm上配置remnux虚拟专门用于对恶意软件的分析检测。" class="headerlink" title="&lt;1&gt;Remnux虚拟环境，此环境基于ububtu20.04版本，它是 Ubuntu Linux 的预配置恶意软件分析发行版,在vm上配置remnux虚拟专门用于对恶意软件的分析检测。"></a>&lt;1&gt;Remnux虚拟环境，此环境基于ububtu20.04版本，它是 Ubuntu Linux 的预配置恶意软件分析发行版,在vm上配置remnux虚拟专门用于对恶意软件的分析检测。</h5><h5 id="lt-2-gt-Oledump工具"><a href="#lt-2-gt-Oledump工具" class="headerlink" title="&lt;2&gt;Oledump工具"></a>&lt;2&gt;Oledump工具</h5><h5 id="oledump是一个基于python的程序，这个程序可以帮助我们在系统中分析恶意文档。"><a href="#oledump是一个基于python的程序，这个程序可以帮助我们在系统中分析恶意文档。" class="headerlink" title="oledump是一个基于python的程序，这个程序可以帮助我们在系统中分析恶意文档。"></a>oledump是一个基于python的程序，这个程序可以帮助我们在系统中分析恶意文档。</h5><p>检查虚拟机中的oledump是否已经被安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">oledump.py -h</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230514190613073.png" alt="image-20230514190613073"></p>
<h5 id="lt-3-gt-oldefile依赖文件"><a href="#lt-3-gt-oldefile依赖文件" class="headerlink" title="&lt;3&gt;oldefile依赖文件"></a>&lt;3&gt;oldefile依赖文件</h5><h5 id="使用remnux中的pip工具下载oldfile依赖文件"><a href="#使用remnux中的pip工具下载oldfile依赖文件" class="headerlink" title="使用remnux中的pip工具下载oldfile依赖文件"></a>使用remnux中的pip工具下载oldfile依赖文件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install oldfile</span><br></pre></td></tr></table></figure>

<h5 id="olefile是一个-Python-包，用于解析、读取和写入Microsoft-OLE2-文件-（也称为结构化存储、复合文件二进制格式或复合文档文件格式），例如-Microsoft-Office-97-2003-文档、Image-Composer-和-FlashPix-文件、Outlook-消息、StickyNotes-、几种显微镜文件格式、McAfee-防病毒隔离文件等。"><a href="#olefile是一个-Python-包，用于解析、读取和写入Microsoft-OLE2-文件-（也称为结构化存储、复合文件二进制格式或复合文档文件格式），例如-Microsoft-Office-97-2003-文档、Image-Composer-和-FlashPix-文件、Outlook-消息、StickyNotes-、几种显微镜文件格式、McAfee-防病毒隔离文件等。" class="headerlink" title="olefile是一个 Python 包，用于解析、读取和写入Microsoft OLE2 文件 （也称为结构化存储、复合文件二进制格式或复合文档文件格式），例如 Microsoft Office 97-2003 文档、Image Composer 和 FlashPix 文件、Outlook 消息、StickyNotes 、几种显微镜文件格式、McAfee 防病毒隔离文件等。"></a><a href="https://www.decalage.info/olefile">olefile</a>是一个 Python 包，用于解析、读取和写入<a href="http://en.wikipedia.org/wiki/Compound_File_Binary_Format">Microsoft OLE2 文件</a> （也称为结构化存储、复合文件二进制格式或复合文档文件格式），例如 Microsoft Office 97-2003 文档、Image Composer 和 FlashPix 文件、Outlook 消息、StickyNotes 、几种显微镜文件格式、McAfee 防病毒隔离文件等。</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230514190554770.png" alt="image-20230514190554770"></p>
<h5 id="将恶意文档下载到桌面上"><a href="#将恶意文档下载到桌面上" class="headerlink" title="将恶意文档下载到桌面上,"></a>将恶意文档下载到桌面上,</h5><h5 id="文档一MD5：fb5ed444ddc37d748639f624397cff2a，文档为加密状态，解密密码为"><a href="#文档一MD5：fb5ed444ddc37d748639f624397cff2a，文档为加密状态，解密密码为" class="headerlink" title="文档一MD5：fb5ed444ddc37d748639f624397cff2a，文档为加密状态，解密密码为"></a>文档一MD5：fb5ed444ddc37d748639f624397cff2a，文档为加密状态，解密密码为</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">infected</span><br></pre></td></tr></table></figure>

<h5 id="下面使用oledump恶意文档分析工具调查此文档中是否存在宏："><a href="#下面使用oledump恶意文档分析工具调查此文档中是否存在宏：" class="headerlink" title="下面使用oledump恶意文档分析工具调查此文档中是否存在宏："></a>下面使用oledump恶意文档分析工具调查此文档中是否存在宏：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">oledump.py ~/Desktop/fb5ed444ddc37d748639f624397cff2a.bin</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\106375993-a0244180-6356-11eb-9fd7-59d117914800.png" alt="Oledump 输出"></p>
<h5 id="同时，此题目为我们提供了一个Virustotal网站的检测分析，检测率仅为7-x2F-58，所以合理推断XLS文件的内容可能被加密了，由此，使用另一个新学到的工具进行检查："><a href="#同时，此题目为我们提供了一个Virustotal网站的检测分析，检测率仅为7-x2F-58，所以合理推断XLS文件的内容可能被加密了，由此，使用另一个新学到的工具进行检查：" class="headerlink" title="同时，此题目为我们提供了一个Virustotal网站的检测分析，检测率仅为7&#x2F;58，所以合理推断XLS文件的内容可能被加密了，由此，使用另一个新学到的工具进行检查："></a>同时，此题目为我们提供了一个Virustotal网站的检测分析，检测率仅为7&#x2F;58，所以合理推断XLS文件的内容可能被加密了，由此，使用另一个新学到的工具进行检查：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msoffcrypto-tool fb5ed444ddc37d748639f624397cff2a.bin --<span class="built_in">test</span> -v </span><br></pre></td></tr></table></figure>

<h5 id="最终得到如下图所示的结果："><a href="#最终得到如下图所示的结果：" class="headerlink" title="最终得到如下图所示的结果："></a>最终得到如下图所示的结果：</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\106376023-e24d8300-6356-11eb-8775-710d7b713615.png" alt="msoff加密工具"></p>
<h5 id="通过此图可以发现，我们需要知道解密这个文件的密码才能够检查宏。一些恶意软件活动会在电子邮件中发送密码，有助于避免安全研究人员进行分析（如果他们没有收到原始电子邮件），并且有争议地为社会工程增加一些额外的合法性。然而，这里的情况并非如此——相反，它使用一种已知的技术来自动解密文件——这是通过使用“VelvetSweatshop”密码来实现的。使用此作为密码，Office-将自动解密-XLS-文档并执行宏。"><a href="#通过此图可以发现，我们需要知道解密这个文件的密码才能够检查宏。一些恶意软件活动会在电子邮件中发送密码，有助于避免安全研究人员进行分析（如果他们没有收到原始电子邮件），并且有争议地为社会工程增加一些额外的合法性。然而，这里的情况并非如此——相反，它使用一种已知的技术来自动解密文件——这是通过使用“VelvetSweatshop”密码来实现的。使用此作为密码，Office-将自动解密-XLS-文档并执行宏。" class="headerlink" title="通过此图可以发现，我们需要知道解密这个文件的密码才能够检查宏。一些恶意软件活动会在电子邮件中发送密码，有助于避免安全研究人员进行分析（如果他们没有收到原始电子邮件），并且有争议地为社会工程增加一些额外的合法性。然而，这里的情况并非如此——相反，它使用一种已知的技术来自动解密文件——这是通过使用“VelvetSweatshop”密码来实现的。使用此作为密码，Office 将自动解密 XLS 文档并执行宏。"></a>通过此图可以发现，我们需要知道解密这个文件的密码才能够检查宏。一些恶意软件活动会在电子邮件中发送密码，有助于避免安全研究人员进行分析（如果他们没有收到原始电子邮件），并且有争议地为社会工程增加一些额外的合法性。然而，这里的情况并非如此——相反，它使用一种已知的技术来自动解密文件——这是通过使用“VelvetSweatshop”密码来实现的。使用此作为密码，Office 将自动解密 XLS 文档并执行宏。</h5><h5 id="使用-MSOFFCRYPTO-TOOL，我们可以提供密码并解密文档："><a href="#使用-MSOFFCRYPTO-TOOL，我们可以提供密码并解密文档：" class="headerlink" title="使用 MSOFFCRYPTO-TOOL，我们可以提供密码并解密文档："></a>使用 MSOFFCRYPTO-TOOL，我们可以提供密码并解密文档：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msoffcrypto-tool fb5ed444ddc37d748639f624397cff2a.bin -p VelvetSweatshop &gt;decryptoed.bin</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\106376049-0e690400-6357-11eb-9ba5-bba2c2ae06b4.png" alt="解密文档"></p>
<h5 id="现在可以使用oledump进行调查："><a href="#现在可以使用oledump进行调查：" class="headerlink" title="现在可以使用oledump进行调查："></a>现在可以使用oledump进行调查：</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\106376055-1fb21080-6357-11eb-8861-8ca2ee6eeae7.png" alt="解密文档"></p>
<h5 id="但是经过检查之后发现，仍然没有宏的出现，该文档可能使用了-Excel-4-宏，下面开始检查-OLEDUMP-的-plugin-biff-插件"><a href="#但是经过检查之后发现，仍然没有宏的出现，该文档可能使用了-Excel-4-宏，下面开始检查-OLEDUMP-的-plugin-biff-插件" class="headerlink" title="但是经过检查之后发现，仍然没有宏的出现，该文档可能使用了 Excel 4 宏，下面开始检查 OLEDUMP 的 plugin_biff 插件"></a>但是经过检查之后发现，仍然没有宏的出现，该文档可能使用了 Excel 4 宏，下面开始检查 OLEDUMP 的 plugin_biff 插件</h5><h5 id="OLEDUMP-提供了许多插件，特别是用于检查-Excel-97-2003-文档的二进制文件格式的-plugin-biff。BIFF-代表二进制交换文件格式，这种结构与办公文档当前使用的当前-VBA-格式不同。这意味着我们需要使用此插件来识别潜在的-Excel-4-宏使用。"><a href="#OLEDUMP-提供了许多插件，特别是用于检查-Excel-97-2003-文档的二进制文件格式的-plugin-biff。BIFF-代表二进制交换文件格式，这种结构与办公文档当前使用的当前-VBA-格式不同。这意味着我们需要使用此插件来识别潜在的-Excel-4-宏使用。" class="headerlink" title="OLEDUMP 提供了许多插件，特别是用于检查 Excel 97 - 2003 文档的二进制文件格式的 plugin_biff。BIFF 代表二进制交换文件格式，这种结构与办公文档当前使用的当前 VBA 格式不同。这意味着我们需要使用此插件来识别潜在的 Excel 4 宏使用。"></a>OLEDUMP 提供了许多插件，特别是用于检查 Excel 97 - 2003 文档的二进制文件格式的 plugin_biff。BIFF 代表二进制交换文件格式，这种结构与办公文档当前使用的当前 VBA 格式不同。这意味着我们需要使用此插件来识别潜在的 Excel 4 宏使用。</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\106376161-21300880-6358-11eb-8994-b64dd661e370.png" alt="插件biff"></p>
<h5 id="插件找到了-Excel-4-宏。"><a href="#插件找到了-Excel-4-宏。" class="headerlink" title="插件找到了 Excel 4 宏。"></a>插件找到了 Excel 4 宏。</h5><h5 id="使用-–pluginoptions-“-h”-来获取插件的参数"><a href="#使用-–pluginoptions-“-h”-来获取插件的参数" class="headerlink" title="使用*–pluginoptions “-h”*来获取插件的参数"></a>使用*–pluginoptions “-h”*来获取插件的参数</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\106376196-7c61fb00-6358-11eb-89a9-f5febaf31f7e.png" alt="选项"></p>
<h5 id="所以-x-将选择所有记录相关的-Excel-4-宏："><a href="#所以-x-将选择所有记录相关的-Excel-4-宏：" class="headerlink" title="所以*-x*将选择所有记录相关的 Excel 4 宏："></a>所以*-x*将选择所有记录相关的 Excel 4 宏：</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\106376233-e4b0dc80-6358-11eb-99a1-22f14c93fa18.png" alt="概括"></p>
<h5 id="使用plugin-biff，还可以查看文档工作表的可见性："><a href="#使用plugin-biff，还可以查看文档工作表的可见性：" class="headerlink" title="使用plugin_biff，还可以查看文档工作表的可见性："></a>使用<em>plugin_biff</em>，还可以查看文档工作表的可见性：</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\106992473-22897880-673e-11eb-95af-5112cae506e2.png" alt="img"></p>
<h5 id="在这里可以看到隐藏的工作表按输出顺序命名：SOCWNEScLLxkLhtJp-OHqYbvYcqmWjJJjsF-Macro2-Macro3-Macro4-Macro5。"><a href="#在这里可以看到隐藏的工作表按输出顺序命名：SOCWNEScLLxkLhtJp-OHqYbvYcqmWjJJjsF-Macro2-Macro3-Macro4-Macro5。" class="headerlink" title="在这里可以看到隐藏的工作表按输出顺序命名：SOCWNEScLLxkLhtJp, OHqYbvYcqmWjJJjsF, Macro2, Macro3, Macro4, Macro5。"></a>在这里可以看到隐藏的工作表按输出顺序命名：<em>SOCWNEScLLxkLhtJp, OHqYbvYcqmWjJJjsF, Macro2, Macro3, Macro4, Macro5</em>。</h5><h3 id="写着写着发现，老师要求的题目是动态分析，而我上面做的是对于恶意文件的静态分析，先放放，学会了再来写动态分析的内容。（好不容易写完的静态分析就不删了）"><a href="#写着写着发现，老师要求的题目是动态分析，而我上面做的是对于恶意文件的静态分析，先放放，学会了再来写动态分析的内容。（好不容易写完的静态分析就不删了）" class="headerlink" title="写着写着发现，老师要求的题目是动态分析，而我上面做的是对于恶意文件的静态分析，先放放，学会了再来写动态分析的内容。（好不容易写完的静态分析就不删了）"></a>写着写着发现，老师要求的题目是动态分析，而我上面做的是对于恶意文件的静态分析，先放放，学会了再来写动态分析的内容。（好不容易写完的静态分析就不删了）</h3><h5 id="接下来的动态分析的内容："><a href="#接下来的动态分析的内容：" class="headerlink" title="接下来的动态分析的内容："></a>接下来的动态分析的内容：</h5><h5 id="写了整整一周："><a href="#写了整整一周：" class="headerlink" title="写了整整一周："></a>写了整整一周：</h5><h5 id="尤其是配置cuckoo沙箱以及cape沙箱的安装过程："><a href="#尤其是配置cuckoo沙箱以及cape沙箱的安装过程：" class="headerlink" title="尤其是配置cuckoo沙箱以及cape沙箱的安装过程："></a>尤其是配置cuckoo沙箱以及cape沙箱的安装过程：</h5><h5 id="当我们把沙箱环境配置好之后，然后对于恶意代码的执行分析已经比较简单了，下面是我的实验全过程："><a href="#当我们把沙箱环境配置好之后，然后对于恶意代码的执行分析已经比较简单了，下面是我的实验全过程：" class="headerlink" title="当我们把沙箱环境配置好之后，然后对于恶意代码的执行分析已经比较简单了，下面是我的实验全过程："></a>当我们把沙箱环境配置好之后，然后对于恶意代码的执行分析已经比较简单了，下面是我的实验全过程：</h5><h5 id="由于cuckoo的管理组件完全由python编写，所以需要合适的python版本，在官方文档中，当前完全兼容的版本是python2-7"><a href="#由于cuckoo的管理组件完全由python编写，所以需要合适的python版本，在官方文档中，当前完全兼容的版本是python2-7" class="headerlink" title="由于cuckoo的管理组件完全由python编写，所以需要合适的python版本，在官方文档中，当前完全兼容的版本是python2.7"></a>由于cuckoo的管理组件完全由python编写，所以需要合适的python版本，在官方文档中，当前完全兼容的版本是python2.7</h5><h5 id="接下来执行一系列的工具安装："><a href="#接下来执行一系列的工具安装：" class="headerlink" title="接下来执行一系列的工具安装："></a>接下来执行一系列的工具安装：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python python-pip python-dev libffi-dev libssl-dev</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install software-properties-common</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230522193621779.png" alt="image-20230522193621779"></p>
<h5 id="查看pip工具版本以及命令目录"><a href="#查看pip工具版本以及命令目录" class="headerlink" title="查看pip工具版本以及命令目录"></a>查看pip工具版本以及命令目录</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230522193742480.png" alt="image-20230522193742480"></p>
<h5 id="安装工具："><a href="#安装工具：" class="headerlink" title="安装工具："></a>安装工具：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libjpeg-dev zlib1g-dev swig</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230522193856987.png" alt="image-20230522193856987"></p>
<h5 id="安装mongodb工具"><a href="#安装mongodb工具" class="headerlink" title="安装mongodb工具"></a>安装mongodb工具</h5><h5 id="首先导入apt的key"><a href="#首先导入apt的key" class="headerlink" title="首先导入apt的key"></a>首先导入apt的key</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230522194031521.png" alt="image-20230522194031521"></p>
<h5 id="接着创建版本列表文件"><a href="#接着创建版本列表文件" class="headerlink" title="接着创建版本列表文件"></a>接着创建版本列表文件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.0 multiverse&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/mongodb-org-4.0.list</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230522194222421.png" alt="image-20230522194222421"></p>
<h5 id="更新软件源并安装最新版mongodb"><a href="#更新软件源并安装最新版mongodb" class="headerlink" title="更新软件源并安装最新版mongodb"></a>更新软件源并安装最新版mongodb</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y mongodb-org</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230522194348275.png" alt="image-20230522194348275"></p>
<h5 id="启动-x2F-重启-x2F-停止-mongo的服务"><a href="#启动-x2F-重启-x2F-停止-mongo的服务" class="headerlink" title="启动&#x2F;重启&#x2F;停止 mongo的服务"></a>启动&#x2F;重启&#x2F;停止 mongo的服务</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service mongod start</span><br><span class="line">sudo service mongod restart</span><br><span class="line">sudo service mongod stop</span><br></pre></td></tr></table></figure>



<h5 id="用oracle仓库安装VirtualBox"><a href="#用oracle仓库安装VirtualBox" class="headerlink" title="用oracle仓库安装VirtualBox"></a>用oracle仓库安装VirtualBox</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] http://download.virtualbox.org/virtualbox/debian <span class="subst">$(lsb_release -cs)</span> contrib&quot;</span></span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>



<h5 id="下面安装tcpdump工具："><a href="#下面安装tcpdump工具：" class="headerlink" title="下面安装tcpdump工具："></a>下面安装tcpdump工具：</h5><h5 id="Tcpdump用于抓取恶意软件运行过程中产生的所有流量"><a href="#Tcpdump用于抓取恶意软件运行过程中产生的所有流量" class="headerlink" title="Tcpdump用于抓取恶意软件运行过程中产生的所有流量"></a>Tcpdump用于抓取恶意软件运行过程中产生的所有流量</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tcpdump apparmor-utils</span><br><span class="line">sudo aa-disable /usr/sbin/tcpdump</span><br></pre></td></tr></table></figure>

<h5 id="安装M2Crypto库"><a href="#安装M2Crypto库" class="headerlink" title="安装M2Crypto库"></a>安装M2Crypto库</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">先安装SWG才能够支持M2Crypto</span><br><span class="line">sudo apt-get install swig</span><br><span class="line">sudo pip install m2crypto==0.24.0</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230522213702745.png" alt="image-20230522213702745"></p>
<h5 id="cuckoo安装"><a href="#cuckoo安装" class="headerlink" title="cuckoo安装"></a>cuckoo安装</h5><h5 id="Cuckoo可以运行在已有用户下面，也可以新建一个用户来跑Cuckoo。-但是要保证虚拟机和Cuckoo运行在相同的用户下。"><a href="#Cuckoo可以运行在已有用户下面，也可以新建一个用户来跑Cuckoo。-但是要保证虚拟机和Cuckoo运行在相同的用户下。" class="headerlink" title="Cuckoo可以运行在已有用户下面，也可以新建一个用户来跑Cuckoo。 但是要保证虚拟机和Cuckoo运行在相同的用户下。"></a>Cuckoo可以运行在已有用户下面，也可以新建一个用户来跑Cuckoo。 但是<strong>要保证虚拟机和Cuckoo运行在相同的用户下</strong>。</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">创建用户</span><br><span class="line">sudo adduesr cuckoo</span><br></pre></td></tr></table></figure>



<h5 id="使用Virtualenv安装cuckoo"><a href="#使用Virtualenv安装cuckoo" class="headerlink" title="使用Virtualenv安装cuckoo"></a>使用Virtualenv安装cuckoo</h5><ul>
<li><h5 id="Cuckoo的依赖并不是用的最新版本，可能会与系统已有的版本冲突"><a href="#Cuckoo的依赖并不是用的最新版本，可能会与系统已有的版本冲突" class="headerlink" title="Cuckoo的依赖并不是用的最新版本，可能会与系统已有的版本冲突."></a>Cuckoo的依赖并不是用的最新版本，可能会与系统已有的版本冲突.</h5></li>
<li><h5 id="系统中其他软件的安装，可能会导致Cuckoo的依赖产生问题"><a href="#系统中其他软件的安装，可能会导致Cuckoo的依赖产生问题" class="headerlink" title="系统中其他软件的安装，可能会导致Cuckoo的依赖产生问题."></a>系统中其他软件的安装，可能会导致Cuckoo的依赖产生问题.</h5></li>
<li><h5 id="使用virtualenv，可以让非root用户也可以安装相关软件"><a href="#使用virtualenv，可以让非root用户也可以安装相关软件" class="headerlink" title="使用virtualenv，可以让非root用户也可以安装相关软件."></a>使用virtualenv，可以让非root用户也可以安装相关软件.</h5></li>
<li><h5 id="简单来说virtualenv是最佳实践"><a href="#简单来说virtualenv是最佳实践" class="headerlink" title="简单来说virtualenv是最佳实践."></a>简单来说virtualenv是最佳实践.</h5></li>
</ul>
<h5 id="安装virtualenv："><a href="#安装virtualenv：" class="headerlink" title="安装virtualenv："></a>安装virtualenv：</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pip install virtualaenv</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230522214118566.png" alt="image-20230522214118566"></p>
<h5 id="使用virtualenv安装cuckoo"><a href="#使用virtualenv安装cuckoo" class="headerlink" title="使用virtualenv安装cuckoo"></a>使用virtualenv安装cuckoo</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">virtualenv venv</span><br><span class="line">. venv/bin/activate</span><br><span class="line">pip install -U pip setuptools</span><br><span class="line">pip install -U cuckoo</span><br></pre></td></tr></table></figure>



<h5 id="下面在虚拟机中安装客户机win7系统"><a href="#下面在虚拟机中安装客户机win7系统" class="headerlink" title="下面在虚拟机中安装客户机win7系统"></a>下面在虚拟机中安装客户机win7系统</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230522220751078.png" alt="image-20230522220751078"></p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230522220817516.png" alt="image-20230522220817516"></p>
<h3 id="cuckoo配置文件"><a href="#cuckoo配置文件" class="headerlink" title="cuckoo配置文件"></a>cuckoo配置文件</h3><h5 id="需要配置auxiliary-conf-cuckoo-conf-virtualbox-conf"><a href="#需要配置auxiliary-conf-cuckoo-conf-virtualbox-conf" class="headerlink" title="需要配置auxiliary.conf cuckoo.conf virtualbox.conf"></a>需要配置auxiliary.conf cuckoo.conf virtualbox.conf</h5><ul>
<li><h5 id="auxiliary-conf：确认tcpdump路径要对，-usr-sbin-tcpdump"><a href="#auxiliary-conf：确认tcpdump路径要对，-usr-sbin-tcpdump" class="headerlink" title="auxiliary.conf：确认tcpdump路径要对，/usr/sbin/tcpdump"></a>auxiliary.conf：确认tcpdump路径要对，<code>/usr/sbin/tcpdump</code></h5></li>
<li><h5 id="cuckoo-conf：确认resultserver的虚拟网卡ip和端口"><a href="#cuckoo-conf：确认resultserver的虚拟网卡ip和端口" class="headerlink" title="cuckoo.conf：确认resultserver的虚拟网卡ip和端口"></a>cuckoo.conf：确认resultserver的虚拟网卡ip和端口</h5></li>
<li><h5 id="virtualbox-conf：确认虚拟网卡名称interface-vboxnet0，客户机名、label、platform和静态ipmachines-cuckoo1-cuckoo1-label-cuckoo1-platfrom-windows-ip-192-168-56-x"><a href="#virtualbox-conf：确认虚拟网卡名称interface-vboxnet0，客户机名、label、platform和静态ipmachines-cuckoo1-cuckoo1-label-cuckoo1-platfrom-windows-ip-192-168-56-x" class="headerlink" title="virtualbox.conf：确认虚拟网卡名称interface = vboxnet0，客户机名、label、platform和静态ipmachines = cuckoo1,[cuckoo1]label = cuckoo1, platfrom = windows, ip = 192.168.56.x"></a>virtualbox.conf：确认虚拟网卡名称<code>interface = vboxnet0</code>，客户机名、label、platform和静态ip<code>machines = cuckoo1,[cuckoo1]label = cuckoo1, platfrom = windows, ip = 192.168.56.x</code></h5></li>
</ul>
<h5 id="安装python2-7"><a href="#安装python2-7" class="headerlink" title="安装python2.7"></a>安装python2.7</h5><h5 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">easy_install.exe pip</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230522224848001.png" alt="image-20230522224848001"></p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230522225011831.png" alt="image-20230522225011831"></p>
<h5 id="到这里：我们终于安装完了cuckoo这个安装起来及其复杂但是用起来非常简便的工具"><a href="#到这里：我们终于安装完了cuckoo这个安装起来及其复杂但是用起来非常简便的工具" class="headerlink" title="到这里：我们终于安装完了cuckoo这个安装起来及其复杂但是用起来非常简便的工具"></a>到这里：我们终于安装完了cuckoo这个安装起来及其复杂但是用起来非常简便的工具</h5><h5 id="下面我将安装一个我遇到的最难安装的工具：Cape-SandBox"><a href="#下面我将安装一个我遇到的最难安装的工具：Cape-SandBox" class="headerlink" title="下面我将安装一个我遇到的最难安装的工具：Cape SandBox"></a>下面我将安装一个我遇到的最难安装的工具：Cape SandBox</h5><h5 id="Cape-SandBox是一个ubuntu，windows和cuckoo三个环境层层嵌套的工具，所以终于到了可以部署CApe-SandBox的时刻"><a href="#Cape-SandBox是一个ubuntu，windows和cuckoo三个环境层层嵌套的工具，所以终于到了可以部署CApe-SandBox的时刻" class="headerlink" title="Cape SandBox是一个ubuntu，windows和cuckoo三个环境层层嵌套的工具，所以终于到了可以部署CApe SandBox的时刻"></a>Cape SandBox是一个ubuntu，windows和cuckoo三个环境层层嵌套的工具，所以终于到了可以部署CApe SandBox的时刻</h5><h5 id="由于这个工具的部署基本上花了将近整整一周的课余时间，所以并没保存中间的部署过程："><a href="#由于这个工具的部署基本上花了将近整整一周的课余时间，所以并没保存中间的部署过程：" class="headerlink" title="由于这个工具的部署基本上花了将近整整一周的课余时间，所以并没保存中间的部署过程："></a>由于这个工具的部署基本上花了将近整整一周的课余时间，所以并没保存中间的部署过程：</h5><h5 id="我的Cape虚拟机用户名即为cape"><a href="#我的Cape虚拟机用户名即为cape" class="headerlink" title="我的Cape虚拟机用户名即为cape"></a>我的Cape虚拟机用户名即为cape</h5><h5 id="下面进入部署好的cape工具"><a href="#下面进入部署好的cape工具" class="headerlink" title="下面进入部署好的cape工具"></a>下面进入部署好的cape工具</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo virtualbox</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230523225205008.png" alt="image-20230523225205008"></p>
<p><img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230523225233632.png" alt="image-20230523225233632"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/CAPEv2sudo python3 cuckoo.py</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230523225345305.png" alt="image-20230523225345305"></p>
<h5 id="cuckoo工具对应的源文件为cuckoo-py，具体代码如下"><a href="#cuckoo工具对应的源文件为cuckoo-py，具体代码如下" class="headerlink" title="cuckoo工具对应的源文件为cuckoo.py，具体代码如下"></a>cuckoo工具对应的源文件为cuckoo.py，具体代码如下</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230523225452618.png" alt="image-20230523225452618"></p>
<h5 id="第三步，-在-x2F-opt-x2F-CAPEv2-x2F-文件夹下运行-“sudo-python3-utils-x2F-process-py-p7-auto”，参数代表优先级划分，输入多个样本时，沙箱会优先运行高优先级样本。"><a href="#第三步，-在-x2F-opt-x2F-CAPEv2-x2F-文件夹下运行-“sudo-python3-utils-x2F-process-py-p7-auto”，参数代表优先级划分，输入多个样本时，沙箱会优先运行高优先级样本。" class="headerlink" title="第三步， 在 &#x2F;opt&#x2F;CAPEv2 &#x2F; 文件夹下运行 “sudo python3 utils&#x2F;process.py -p7 auto”，参数代表优先级划分，输入多个样本时，沙箱会优先运行高优先级样本。"></a>第三步， 在 &#x2F;opt&#x2F;CAPEv2 &#x2F; 文件夹下运行 “sudo python3 utils&#x2F;process.py -p7 auto”，参数代表优先级划分，输入多个样本时，沙箱会优先运行高优先级样本。</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/CAPEv2/sudo python3 utils/process.py -p7 auto</span><br></pre></td></tr></table></figure>

<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230523225530230.png" alt="image-20230523225530230"></p>
<h5 id="第四步，在-x2F-opt-x2F-CAPEv2-x2F-web-目录下-由于环境依赖的问题，必须由指向该文件夹的-shell-运行该命令-，运行-“sudo-python3-manage-py-runserver-127-0-0-1-8088”-该虚拟机的-8080-端口已被占用，端口可自己指定-。"><a href="#第四步，在-x2F-opt-x2F-CAPEv2-x2F-web-目录下-由于环境依赖的问题，必须由指向该文件夹的-shell-运行该命令-，运行-“sudo-python3-manage-py-runserver-127-0-0-1-8088”-该虚拟机的-8080-端口已被占用，端口可自己指定-。" class="headerlink" title="第四步，在 &#x2F;opt&#x2F;CAPEv2&#x2F;web 目录下 (由于环境依赖的问题，必须由指向该文件夹的 shell 运行该命令)，运行 “sudo python3 manage.py runserver 127.0.0.1:8088”(该虚拟机的 8080 端口已被占用，端口可自己指定)。"></a>第四步，在 &#x2F;opt&#x2F;CAPEv2&#x2F;web 目录下 (由于环境依赖的问题，必须由指向该文件夹的 shell 运行该命令)，运行 “sudo python3 manage.py runserver 127.0.0.1:8088”(该虚拟机的 8080 端口已被占用，端口可自己指定)。</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/CAPEv2/websudo python3 manage.py runserver 127.0.0.1:8088</span><br></pre></td></tr></table></figure>

<h5 id="该操作相当于打开前段服务器，用于加载恶意软件和呈现分析结果。"><a href="#该操作相当于打开前段服务器，用于加载恶意软件和呈现分析结果。" class="headerlink" title="该操作相当于打开前段服务器，用于加载恶意软件和呈现分析结果。"></a>该操作相当于打开前段服务器，用于加载恶意软件和呈现分析结果。</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230523225625160.png" alt="image-20230523225625160"></p>
<h5 id="对应的源文件如下："><a href="#对应的源文件如下：" class="headerlink" title="对应的源文件如下："></a>对应的源文件如下：</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230523225642329.png" alt="image-20230523225642329"></p>
<h5 id="沙箱启动成功，"><a href="#沙箱启动成功，" class="headerlink" title="沙箱启动成功，"></a>沙箱启动成功，</h5><h5 id="下面开始提交恶意代码样本到cape沙箱中进行分析"><a href="#下面开始提交恶意代码样本到cape沙箱中进行分析" class="headerlink" title="下面开始提交恶意代码样本到cape沙箱中进行分析"></a>下面开始提交恶意代码样本到cape沙箱中进行分析</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230523225818321.png" alt="image-20230523225818321"></p>
<h5 id="我提交的恶意代码样本为："><a href="#我提交的恶意代码样本为：" class="headerlink" title="我提交的恶意代码样本为："></a>我提交的恶意代码样本为：</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230523230257977.png" alt="image-20230523230257977"></p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230523230350881.png" alt="image-20230523230350881"></p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230523230404459.png" alt="image-20230523230404459"></p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230524100334712.png" alt="image-20230524100334712"></p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230524100350710.png" alt="image-20230524100350710"></p>
<h3 id="动态分析结果查看："><a href="#动态分析结果查看：" class="headerlink" title="动态分析结果查看："></a>动态分析结果查看：</h3><h5 id="首先展示快速分析的基本信息，包括机器和时间等"><a href="#首先展示快速分析的基本信息，包括机器和时间等" class="headerlink" title="首先展示快速分析的基本信息，包括机器和时间等"></a>首先展示快速分析的基本信息，包括机器和时间等</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230524100438413.png" alt="image-20230524100438413"></p>
<h5 id="下面是恶意软件动态分析的具体内容："><a href="#下面是恶意软件动态分析的具体内容：" class="headerlink" title="下面是恶意软件动态分析的具体内容："></a>下面是恶意软件动态分析的具体内容：</h5><h5 id="1、签名信息"><a href="#1、签名信息" class="headerlink" title="1、签名信息"></a>1、签名信息</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230524100505194.png" alt="image-20230524100505194"></p>
<h5 id="可以看到生成的文件，比如-malware-任务执行生成的-“taskche-exe”"><a href="#可以看到生成的文件，比如-malware-任务执行生成的-“taskche-exe”" class="headerlink" title="可以看到生成的文件，比如 malware 任务执行生成的 “taskche.exe”"></a>可以看到生成的文件，比如 malware 任务执行生成的 “taskche.exe”</h5><h5 id="DLL-载入文件如下图所示："><a href="#DLL-载入文件如下图所示：" class="headerlink" title="DLL 载入文件如下图所示："></a>DLL 载入文件如下图所示：</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230524100610699.png" alt="image-20230524100610699"></p>
<h5 id="HTTP-请求可以看到malware域名开关去连接的三个域名"><a href="#HTTP-请求可以看到malware域名开关去连接的三个域名" class="headerlink" title="HTTP 请求可以看到malware域名开关去连接的三个域名"></a>HTTP 请求可以看到malware域名开关去连接的三个域名</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230524100638123.png" alt="image-20230524100638123"></p>
<h5 id="加密和签名信息如下："><a href="#加密和签名信息如下：" class="headerlink" title="加密和签名信息如下："></a>加密和签名信息如下：</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230524100659211.png" alt="image-20230524100659211"></p>
<h5 id="2、动态运行截屏信息："><a href="#2、动态运行截屏信息：" class="headerlink" title="2、动态运行截屏信息："></a>2、动态运行截屏信息：</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230524100727278.png" alt="image-20230524100727278"></p>
<h5 id="3、下面是各种动态特征总结"><a href="#3、下面是各种动态特征总结" class="headerlink" title="3、下面是各种动态特征总结"></a>3、<strong>下面是各种动态特征总结</strong></h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230524100746513.png" alt="image-20230524100746513"></p>
<h5 id="动态-API-如下图所示："><a href="#动态-API-如下图所示：" class="headerlink" title="动态 API 如下图所示："></a>动态 API 如下图所示：</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230524100806277.png" alt="image-20230524100806277"></p>
<h5 id="注册表操作如下图所示："><a href="#注册表操作如下图所示：" class="headerlink" title="注册表操作如下图所示："></a>注册表操作如下图所示：</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230524100820223.png" alt="image-20230524100820223"></p>
<h5 id="动态行为特征如下图所示："><a href="#动态行为特征如下图所示：" class="headerlink" title="动态行为特征如下图所示："></a>动态行为特征如下图所示：</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230524100929404.png" alt="image-20230524100929404"></p>
<h5 id="该部分能看到动态-API-序列，极为重要的特征，如下图所示："><a href="#该部分能看到动态-API-序列，极为重要的特征，如下图所示：" class="headerlink" title="该部分能看到动态 API 序列，极为重要的特征，如下图所示："></a>该部分能看到动态 API 序列，极为重要的特征，如下图所示：</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230524100951701.png" alt="image-20230524100951701"></p>
<h5 id="网络分析如下图所示："><a href="#网络分析如下图所示：" class="headerlink" title="网络分析如下图所示："></a>网络分析如下图所示：</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\操作系统附加作业\image-20230524101027136.png" alt="image-20230524101027136"></p>
<h5 id="至此最终实现了对一个恶意代码样本的具体分析：最后对其进行总结"><a href="#至此最终实现了对一个恶意代码样本的具体分析：最后对其进行总结" class="headerlink" title="至此最终实现了对一个恶意代码样本的具体分析：最后对其进行总结"></a>至此最终实现了对一个恶意代码样本的具体分析：最后对其进行总结</h5><h5 id="本实验的主旨是要求我们可以使用任意的分析工具去分析任意可以得到的恶意代码样本，并且注意是动态分析，但是在进行此实验的具体过程中，我认为恶意代码分析工具Sand-Box的安装是最为重要和最为困难的，本次动态分析使用的cape-SandBox工具则是ubuntu，windows和cuckoo三个环境的层层嵌套，我在配置cape工具的同时也学到了许多操作系统的实操的知识。最后将我们在virusshare得到的恶意代码样本提交到cape工具中进行分析，该工具具有十强大的工具，对恶意代码在系统中的运行特征全部分析出来并且给出分析的总结，"><a href="#本实验的主旨是要求我们可以使用任意的分析工具去分析任意可以得到的恶意代码样本，并且注意是动态分析，但是在进行此实验的具体过程中，我认为恶意代码分析工具Sand-Box的安装是最为重要和最为困难的，本次动态分析使用的cape-SandBox工具则是ubuntu，windows和cuckoo三个环境的层层嵌套，我在配置cape工具的同时也学到了许多操作系统的实操的知识。最后将我们在virusshare得到的恶意代码样本提交到cape工具中进行分析，该工具具有十强大的工具，对恶意代码在系统中的运行特征全部分析出来并且给出分析的总结，" class="headerlink" title="本实验的主旨是要求我们可以使用任意的分析工具去分析任意可以得到的恶意代码样本，并且注意是动态分析，但是在进行此实验的具体过程中，我认为恶意代码分析工具Sand Box的安装是最为重要和最为困难的，本次动态分析使用的cape SandBox工具则是ubuntu，windows和cuckoo三个环境的层层嵌套，我在配置cape工具的同时也学到了许多操作系统的实操的知识。最后将我们在virusshare得到的恶意代码样本提交到cape工具中进行分析，该工具具有十强大的工具，对恶意代码在系统中的运行特征全部分析出来并且给出分析的总结，"></a>本实验的主旨是要求我们可以使用任意的分析工具去分析任意可以得到的恶意代码样本，并且注意是动态分析，但是在进行此实验的具体过程中，我认为恶意代码分析工具Sand Box的安装是最为重要和最为困难的，本次动态分析使用的cape SandBox工具则是ubuntu，windows和cuckoo三个环境的层层嵌套，我在配置cape工具的同时也学到了许多操作系统的实操的知识。最后将我们在virusshare得到的恶意代码样本提交到cape工具中进行分析，该工具具有十强大的工具，对恶意代码在系统中的运行特征全部分析出来并且给出分析的总结，</h5><h5 id="我在动态分析的结果中可以看到恶意代码文件的详细信息，文件的签名信息，恶意代码生成的exe文件，此文件也是该恶意代码的主要的传播机理；"><a href="#我在动态分析的结果中可以看到恶意代码文件的详细信息，文件的签名信息，恶意代码生成的exe文件，此文件也是该恶意代码的主要的传播机理；" class="headerlink" title="我在动态分析的结果中可以看到恶意代码文件的详细信息，文件的签名信息，恶意代码生成的exe文件，此文件也是该恶意代码的主要的传播机理；"></a>我在动态分析的结果中可以看到恶意代码文件的详细信息，文件的签名信息，恶意代码生成的exe文件，此文件也是该恶意代码的主要的传播机理；</h5><h5 id="然后可以看到恶意代码请求的网页域名，但是还可以发现，这些被请求的域名均以不存在了；"><a href="#然后可以看到恶意代码请求的网页域名，但是还可以发现，这些被请求的域名均以不存在了；" class="headerlink" title="然后可以看到恶意代码请求的网页域名，但是还可以发现，这些被请求的域名均以不存在了；"></a>然后可以看到恶意代码请求的网页域名，但是还可以发现，这些被请求的域名均以不存在了；</h5><h5 id="最后是恶意代码运行动态特征的总结，可以看到恶意代码对系统注册表的操作过程。"><a href="#最后是恶意代码运行动态特征的总结，可以看到恶意代码对系统注册表的操作过程。" class="headerlink" title="最后是恶意代码运行动态特征的总结，可以看到恶意代码对系统注册表的操作过程。"></a>最后是恶意代码运行动态特征的总结，可以看到恶意代码对系统注册表的操作过程。</h5><h3 id="四、沙箱规避技术调研"><a href="#四、沙箱规避技术调研" class="headerlink" title="四、沙箱规避技术调研"></a>四、沙箱规避技术调研</h3><p><strong>在进行沙箱规避技术调研时，常用的检测沙箱环境的方法包括以下几种：</strong></p>
<ol>
<li><strong>文件和注册表路径检测：沙箱环境通常会在文件系统和注册表中使用特定的路径或者命名规则，通过检测这些路径的存在与否可以判断是否处于沙箱环境。</strong></li>
<li><strong>硬件和系统信息检测：沙箱环境中的硬件和系统信息通常会有一些特定的标识或者属性，例如虚拟硬件设备、特定的处理器指令集等，通过检测这些信息可以判断是否处于沙箱环境。</strong></li>
<li><strong>网络检测：沙箱环境中的网络配置和行为通常会有所限制，例如只能访问特定的网站或者无法进行某些网络操作，通过检测网络的访问权限和行为可以判断是否处于沙箱环境。</strong></li>
<li><strong>API监视和行为分析：沙箱环境中的一些API调用可能会有特定的行为模式，例如对某些API的调用频率、参数的特定取值等，通过监视API调用并进行行为分析可以判断是否处于沙箱环境。</strong></li>
</ol>
<p><strong>Windows API HOOK是一种技术，它允许我们截获和修改应用程序对Windows API的调用。通过HOOK技术，我们可以劫持API调用，并在调用前后执行自定义的代码逻辑，从而实现对API行为的监控、修改和欺骗。</strong></p>
<p><strong>在Windows系统中，API函数通常存储在动态链接库（DLL）中，并由应用程序动态加载和调用。通过HOOK技术，我们可以修改应用程序加载的DLL，将其中的API函数指针指向我们自定义的函数，从而在API调用时执行我们的代码。</strong></p>
<p><strong>下面是我基于MinHook库实现的简单的Windows API HOOK示例，该示例截获了CreateFileW函数的调用，并返回虚假的返回值：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;MinHook.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">HANDLE</span><span class="params">(WINAPI *CreateFileW_t)</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    LPCWSTR               lpFileName,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD                 dwDesiredAccess,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD                 dwShareMode,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD                 dwCreationDisposition,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD                 dwFlagsAndAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">    HANDLE                hTemplateFile</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">HANDLE WINAPI <span class="title">MyCreateFileW</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    LPCWSTR               lpFileName,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD                 dwDesiredAccess,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD                 dwShareMode,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD                 dwCreationDisposition,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD                 dwFlagsAndAttributes,</span></span></span><br><span class="line"><span class="params"><span class="function">    HANDLE                hTemplateFile</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 返回虚假的文件句柄</span></span><br><span class="line">    <span class="keyword">return</span> INVALID_HANDLE_VALUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义原始的CreateFileW函数指针</span></span><br><span class="line">CreateFileW_t OriginalCreateFileW = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化HOOK</span></span><br><span class="line"><span class="function">BOOL <span class="title">InitHook</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化MinHook库</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">MH_Initialize</span>() != MH_OK)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建HOOK</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">MH_CreateHook</span>(&amp;CreateFileW, &amp;<span class="built_in">MyCreateFileWsreinterpret_cast</span>&lt;LPVOID*&gt;(&amp;OriginalCreateFileW)) != MH_OK)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 启用HOOK</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">MH_EnableHook</span>(&amp;CreateFileW) != MH_OK)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载HOOK</span></span><br><span class="line"><span class="function">BOOL <span class="title">Unhook</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 禁用并删除HOOK</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">MH_DisableHook</span>(&amp;CreateFileW) != MH_OK)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">MH_RemoveHook</span>(&amp;CreateFileW) != MH_OK)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 卸载MinHook库</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">MH_Uninitialize</span>() != MH_OK)</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DLL入口函数</span></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        <span class="comment">// 初始化HOOK</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">InitHook</span>())</span><br><span class="line">            <span class="keyword">return</span> FALSE;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="comment">// 卸载HOOK</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Unhook</span>())</span><br><span class="line">            <span class="keyword">return</span> FALSE;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="在上述代码中，我使用了MinHook库来实现API的HOOK。首先定义了原始的CreateFileW函数指针类型和自定义的CreateFileW函数。然后通过InitHook函数进行初始化，创建并启用HOOK。在HOOK中，我们截获CreateFileW函数，并将其指向自定义的MyCreateFileW函数。最后，在DLL的入口函数中进行HOOK的初始化和卸载。"><a href="#在上述代码中，我使用了MinHook库来实现API的HOOK。首先定义了原始的CreateFileW函数指针类型和自定义的CreateFileW函数。然后通过InitHook函数进行初始化，创建并启用HOOK。在HOOK中，我们截获CreateFileW函数，并将其指向自定义的MyCreateFileW函数。最后，在DLL的入口函数中进行HOOK的初始化和卸载。" class="headerlink" title="在上述代码中，我使用了MinHook库来实现API的HOOK。首先定义了原始的CreateFileW函数指针类型和自定义的CreateFileW函数。然后通过InitHook函数进行初始化，创建并启用HOOK。在HOOK中，我们截获CreateFileW函数，并将其指向自定义的MyCreateFileW函数。最后，在DLL的入口函数中进行HOOK的初始化和卸载。"></a>在上述代码中，我使用了MinHook库来实现API的HOOK。首先定义了原始的CreateFileW函数指针类型和自定义的CreateFileW函数。然后通过InitHook函数进行初始化，创建并启用HOOK。在HOOK中，我们截获CreateFileW函数，并将其指向自定义的MyCreateFileW函数。最后，在DLL的入口函数中进行HOOK的初始化和卸载。</h5>]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>大学大作业</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/08/03/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="数值计算方法"><a href="#数值计算方法" class="headerlink" title="数值计算方法"></a>数值计算方法</h3><h5 id="1-常用数值计算方法"><a href="#1-常用数值计算方法" class="headerlink" title="1 常用数值计算方法"></a>1 常用数值计算方法</h5><p>（1）解线性方程组的直接方法<br>• 高斯消去法（Gauss）<br>• 三角分解追赶法<br>• Jacobi迭代法<br>• Gauss-Seidel迭代法<br>• 超松弛迭代法<br>（2）非线性方程的求根方法<br>• 二分法<br>• Newton迭代法<br>• 弦截法<br>• 抛物线法<br>（3）数值积分求解</p>
<p>（4）数值微分求解</p>
<p>（5）常微分方程的数值求解<br>• Euler公式<br>• 后退的Euler法<br>• 改进的Euler法<br>• Runge-Kutta法<br>（6）插值法<br>• Lagrange一次插值法<br>• Lagrange插值多项式<br>• Newton插值<br>• Hermite插值<br>• 三次样</p>
<h5 id="2-现代智能计算方法"><a href="#2-现代智能计算方法" class="headerlink" title="2 现代智能计算方法"></a>2 现代智能计算方法</h5><h5 id="2-1-分类"><a href="#2-1-分类" class="headerlink" title="2.1 分类"></a>2.1 分类</h5><p>• 模拟退火算法<br>• <a href="https://so.csdn.net/so/search?q=%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95&spm=1001.2101.3001.7020">遗传算法</a><br>• 禁忌搜索算法<br>• 人工<a href="https://so.csdn.net/so/search?q=%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C&spm=1001.2101.3001.7020">神经网络</a><br>• 粒子群算法<br>• 深度学习</p>
<h5 id="2-2-遗传算法、"><a href="#2-2-遗传算法、" class="headerlink" title="2.2 遗传算法、"></a>2.2 遗传算法、</h5><p>核心要素<br>• 参数编码<br>• 初始种群的设定<br>• 适应度函数的设计<br>• 遗传操作设计<br>• 控制参数设定</p>
<h5 id="题目一：设计一个三角追赶法函数，求解问题L-Ux-x3D-b-要求输入L、U和b，输出x"><a href="#题目一：设计一个三角追赶法函数，求解问题L-Ux-x3D-b-要求输入L、U和b，输出x" class="headerlink" title="题目一：设计一个三角追赶法函数，求解问题L*Ux &#x3D; b,要求输入L、U和b，输出x"></a>题目一：设计一个三角追赶法函数，求解问题L*Ux &#x3D; b,要求输入L、U和b，输出x</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span> = <span class="title">fun</span><span class="params">(L,U,b)</span> </span></span><br><span class="line">U = L.*U</span><br><span class="line">n = <span class="built_in">size</span>(U) <span class="comment">% n为系数矩阵的行数</span></span><br><span class="line">a(<span class="number">1</span>)  = U(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">d(<span class="number">1</span>) = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:n<span class="number">-1</span></span><br><span class="line">    a(<span class="number">1</span>) = U(<span class="built_in">i</span>,<span class="built_in">i</span><span class="number">-1</span>)</span><br><span class="line">    d(<span class="built_in">i</span>) = U(<span class="built_in">i</span>,<span class="built_in">i</span><span class="number">-1</span>)</span><br><span class="line">    c(<span class="built_in">i</span>) = U(<span class="built_in">i</span>,<span class="built_in">i</span>+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">a(n) = U(n,n)</span><br><span class="line">d(n) = U(n,n<span class="number">-1</span>)</span><br><span class="line">c(n) = <span class="number">0</span></span><br><span class="line">t(<span class="number">1</span>) = a(<span class="number">1</span>) <span class="comment">%开始求解L，U</span></span><br><span class="line">m(<span class="number">1</span>) = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span> : n</span><br><span class="line">    m(<span class="built_in">i</span>) = b(<span class="built_in">i</span>) <span class="comment">%求得m(i)</span></span><br><span class="line">    u(<span class="built_in">i</span><span class="number">-1</span>) = c(<span class="built_in">i</span><span class="number">-1</span>)/t(<span class="built_in">i</span><span class="number">-1</span>)<span class="comment">% 求得u(i)</span></span><br><span class="line">    t(<span class="built_in">i</span>) = a(<span class="built_in">i</span>) - d(<span class="built_in">i</span>) *u(<span class="built_in">i</span><span class="number">-1</span>)<span class="comment">% 求得t(i)</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">u(n)=<span class="number">0</span></span><br><span class="line">y(<span class="number">1</span>) = b(<span class="number">1</span>)/t(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> =<span class="number">2</span>:n</span><br><span class="line">    y(<span class="built_in">i</span>) = [b(<span class="built_in">i</span>)-m(<span class="built_in">i</span>)*y(<span class="built_in">i</span><span class="number">-1</span>)]/t(<span class="built_in">i</span>);求得y(<span class="built_in">i</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">x(n) = y(n)</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=n<span class="number">-1</span>:<span class="number">-1</span>:<span class="number">1</span></span><br><span class="line">    x(<span class="built_in">i</span>) = y(<span class="built_in">i</span>) - u(<span class="built_in">i</span>)*x(<span class="built_in">i</span>+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">x =x&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="题目二：二分法求解非线性方程根的程序"><a href="#题目二：二分法求解非线性方程根的程序" class="headerlink" title="题目二：二分法求解非线性方程根的程序"></a>题目二：二分法求解非线性方程根的程序</h5><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">[x_star,index,it]</span>=<span class="title">bisect</span><span class="params">(fun,a,b)</span></span></span><br><span class="line"><span class="comment">%求解非线性计算方程的二分法，其中，fun(x)为需要求根的函数;</span></span><br><span class="line"><span class="comment">%a,b为初始区间的端点;</span></span><br><span class="line"><span class="comment">%ep为精度，当(b-a)/2&lt;ep时，算法能终止计算，</span></span><br><span class="line"><span class="comment">%缺省值为1e-5;</span></span><br><span class="line"><span class="comment">%当x_star迭代成功时，输出方程的根</span></span><br><span class="line"><span class="comment">%当x_start迭代失败时，输出两端点的值；</span></span><br><span class="line"><span class="comment">%index为指标变量，当index=1时，表明迭代成功，</span></span><br><span class="line"><span class="comment">%当index=0时，表明初始区间不是有根区间；</span></span><br><span class="line"><span class="comment">%it为迭代次数</span></span><br><span class="line"><span class="keyword">if</span> nargin&lt;<span class="number">4</span></span><br><span class="line">    ep=<span class="number">1e-5</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fa=feval(fun,a);fb=feval(fun,b);</span><br><span class="line"><span class="keyword">if</span> fa*fb&gt;<span class="number">0</span></span><br><span class="line">    x_star=[fa,fb];index=<span class="number">0</span>;it=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">k=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">abs</span>(b-a)/<span class="number">2</span>&gt;=ep</span><br><span class="line">    x=(a+b)/<span class="number">2</span>;fx=feval(fun,x);</span><br><span class="line">    <span class="keyword">if</span> fx*fa&lt;<span class="number">0</span></span><br><span class="line">        b=x;fb=fx;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        a=x;fa=fx;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    k=k+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">x_star=(a+b)/<span class="number">2</span>;index=<span class="number">1</span>;it=k;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>数据库实验四</title>
    <url>/2023/07/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E5%9B%9B/</url>
    <content><![CDATA[<h1 id="《数据库原理》实验报告4"><a href="#《数据库原理》实验报告4" class="headerlink" title="《数据库原理》实验报告4"></a>《数据库原理》实验报告4</h1><h4 id="实验内容：数据库图书馆管理系统"><a href="#实验内容：数据库图书馆管理系统" class="headerlink" title="实验内容：数据库图书馆管理系统"></a>实验内容：数据库图书馆管理系统</h4><h3 id="1-实验内容简介"><a href="#1-实验内容简介" class="headerlink" title="1  实验内容简介"></a>1  实验内容简介</h3><p>图书馆借还书系统：图书信息表支持购入同一个ISBN的书籍多本，支持按ISBN、图书名、出版社、作者、图书分类、出版年份进行书籍登记，可查询和删除（这是基本界面功能）</p>
<span id="more"></span>

<p>支持对内对外借阅；内部人员包括学生、学校职工；外部人员需登记身份证号、姓名等，需要押金；外部人员在借书数量限制2本；内部限制为5本；超期外部人员3元&#x2F;天，内部1元&#x2F;天，有超期的书籍，不让继续借新的。</p>
<h5 id="首先先对题目进行分析，题目要求设计一个图书馆的借还书系统，则分析此系统的功能有："><a href="#首先先对题目进行分析，题目要求设计一个图书馆的借还书系统，则分析此系统的功能有：" class="headerlink" title="首先先对题目进行分析，题目要求设计一个图书馆的借还书系统，则分析此系统的功能有："></a>首先先对题目进行分析，题目要求设计一个图书馆的借还书系统，则分析此系统的功能有：</h5><p>&lt;1&gt;借阅功能</p>
<p>设计此功能需要考虑几个问题：</p>
<p>读者的借阅权限问题</p>
<p>读者的借阅数量限制</p>
<p>书库中是否有借阅书籍</p>
<p>若均满足以上的限制条件，则可以借阅书籍。</p>
<p>&lt;2&gt;借阅者管理功能</p>
<p>对于借阅者的信息进行查看，添加，修改，删除并将借阅者分为不同的权限，即题目中要求的对内借阅和对外借阅，同时统计借阅者的借阅时间，对超期行为进行罚款。</p>
<h5 id="下面设计概念模型"><a href="#下面设计概念模型" class="headerlink" title="下面设计概念模型"></a>下面设计概念模型</h5><p>该数据库需要描述的信息包括以下几种：</p>
<p>1、读者信息</p>
<p>2、书籍信息</p>
<p>3、读者分类信息</p>
<p>4、读者与书籍之间的关系</p>
<h5 id="数据库详细设计"><a href="#数据库详细设计" class="headerlink" title="数据库详细设计"></a>数据库详细设计</h5><p>1、读者（借阅者）信息</p>
<p>属性：编号，姓名，联系电话，权限状况，读者类型</p>
<p>2、书籍信息</p>
<p>ISBN、图书名、出版社、作者、图书分类、出版年份</p>
<p>3、读者类型</p>
<p>读者编号，读者类型</p>
<h3 id="1-实验环境描述"><a href="#1-实验环境描述" class="headerlink" title="1 实验环境描述"></a><strong>1</strong> 实验环境描述</h3><h4 id="1-1-硬件配置"><a href="#1-1-硬件配置" class="headerlink" title="1.1 硬件配置"></a><strong>1.1</strong> 硬件配置</h4><h5 id="处理器：11代intel酷睿-i5-11400H"><a href="#处理器：11代intel酷睿-i5-11400H" class="headerlink" title="处理器：11代intel酷睿 i5-11400H;"></a>处理器：11代intel酷睿 i5-11400H;</h5><h4 id="1-2-软件配置"><a href="#1-2-软件配置" class="headerlink" title="1.2 软件配置"></a><strong>1.2</strong> 软件配置</h4><h4 id="1-2-1操作系统"><a href="#1-2-1操作系统" class="headerlink" title="1.2.1操作系统"></a><strong>1.2.1</strong>操作系统</h4><h5 id="Windows11系统"><a href="#Windows11系统" class="headerlink" title="Windows11系统"></a>Windows11系统</h5><h4 id="1-2-2-数据库软件和版本"><a href="#1-2-2-数据库软件和版本" class="headerlink" title="1.2.2 数据库软件和版本"></a><strong>1.2.2</strong> 数据库软件和版本</h4><h5 id="⼈⼤⾦仓ksql-Kingbase-V008R006C007B0012"><a href="#⼈⼤⾦仓ksql-Kingbase-V008R006C007B0012" class="headerlink" title="⼈⼤⾦仓ksql (Kingbase) V008R006C007B0012"></a>⼈⼤⾦仓ksql (Kingbase) V008R006C007B0012</h5><h3 id="3-实验步骤和抓图"><a href="#3-实验步骤和抓图" class="headerlink" title="3  实验步骤和抓图"></a>3  实验步骤和抓图</h3><h5 id="在本实验中，我只实现了书籍的增添，按书籍序号查询，指定删除书籍，实现读者信息录入的功能。"><a href="#在本实验中，我只实现了书籍的增添，按书籍序号查询，指定删除书籍，实现读者信息录入的功能。" class="headerlink" title="在本实验中，我只实现了书籍的增添，按书籍序号查询，指定删除书籍，实现读者信息录入的功能。"></a>在本实验中，我只实现了书籍的增添，按书籍序号查询，指定删除书籍，实现读者信息录入的功能。</h5><h5 id="1、创建book表"><a href="#1、创建book表" class="headerlink" title="1、创建book表"></a>1、创建book表</h5><p><img src="/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E5%9B%9B%5Cimage-20230519205129012.png"></p>
<h5 id="2、创建reader表"><a href="#2、创建reader表" class="headerlink" title="2、创建reader表"></a>2、创建reader表</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\《数据库原理》实验报告4\image-20230519205147762.png" alt="image-20230519205147762"></p>
<h5 id="下面展示PYQT5界面的书籍的增添，查询可借阅书籍，指定删除书籍，实现读者信息录入的功能。"><a href="#下面展示PYQT5界面的书籍的增添，查询可借阅书籍，指定删除书籍，实现读者信息录入的功能。" class="headerlink" title="下面展示PYQT5界面的书籍的增添，查询可借阅书籍，指定删除书籍，实现读者信息录入的功能。"></a>下面展示PYQT5界面的书籍的增添，查询可借阅书籍，指定删除书籍，实现读者信息录入的功能。</h5><h5 id="lt-1-gt-书籍的添加"><a href="#lt-1-gt-书籍的添加" class="headerlink" title="&lt;1&gt;书籍的添加"></a>&lt;1&gt;书籍的添加</h5><p>添加书籍的信息为 </p>
<p>111,ThreeBody,XiDianPublish,666</p>
<p>222,The Lonely,XiDianPublish,888</p>
<p>333,Sagapo,XiDianPublish,999</p>
<p>444,Ang,XiDianPublish,2222</p>
<p>555,SKY,XiDianPublish,5555</p>
<p>101,Polish,XiDianPublish,7777</p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\《数据库原理》实验报告4\image-20230519205302626.png" alt="image-20230519205302626"></p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\《数据库原理》实验报告4\image-20230519211149469.png" alt="image-20230519211149469"></p>
<p> <img src="C:\Z.Sagapo\myblog\source_posts\《数据库原理》实验报告4\image-20230519211251415.png" alt="image-20230519211251415"></p>
<h5 id="lt-2-gt-查询可借阅书籍"><a href="#lt-2-gt-查询可借阅书籍" class="headerlink" title="&lt;2&gt;查询可借阅书籍"></a>&lt;2&gt;查询可借阅书籍</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\《数据库原理》实验报告4\image-20230519212226120.png" alt="image-20230519212226120"></p>
<h5 id="lt-3-gt-指定删除书籍"><a href="#lt-3-gt-指定删除书籍" class="headerlink" title="&lt;3&gt;指定删除书籍"></a>&lt;3&gt;指定删除书籍</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\《数据库原理》实验报告4\image-20230519212307336.png" alt="image-20230519212307336"></p>
<h5 id="lt-4-gt-实现读者信息录入"><a href="#lt-4-gt-实现读者信息录入" class="headerlink" title="&lt;4&gt;实现读者信息录入"></a>&lt;4&gt;实现读者信息录入</h5><p><img src="C:\Z.Sagapo\myblog\source_posts\《数据库原理》实验报告4\image-20230519212359279.png" alt="image-20230519212359279"></p>
<h4 id="题目要求功能均已实现"><a href="#题目要求功能均已实现" class="headerlink" title="题目要求功能均已实现"></a>题目要求功能均已实现</h4><p> 最终PYQT5代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> psycopg2</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">lineEditDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ButtonSearchClicked</span>(<span class="params">self,gConn,PList1,PEdit1</span>):</span><br><span class="line">        PList1.clear()</span><br><span class="line">        cur = gConn.cursor()</span><br><span class="line">        </span><br><span class="line">        cur.execute(<span class="string">&quot;select * from book;&quot;</span>)</span><br><span class="line">        rows = cur.fetchall()</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">            PList1.addItem(QListWidgetItem(<span class="built_in">str</span>(row[<span class="number">0</span>]) + <span class="string">&quot;, &quot;</span> + <span class="built_in">str</span>(row[<span class="number">1</span>]) + <span class="string">&quot;, &quot;</span> + <span class="built_in">str</span>(row[<span class="number">2</span>]) + <span class="string">&quot;, &quot;</span> + <span class="built_in">str</span>(row[<span class="number">3</span>])))</span><br><span class="line">        cur.close()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">PButtonInsertClicked</span>(<span class="params">self,gConn,PList1,PEdit1</span>):</span><br><span class="line"> </span><br><span class="line">        gConn = psycopg2.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="string">&quot;54321&quot;</span>, user=<span class="string">&quot;Sagapo&quot;</span>, password = <span class="string">&quot;201914&quot;</span>, database =<span class="string">&quot;test&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> gConn:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;connected&quot;</span>)</span><br><span class="line">        cur = gConn.cursor()   </span><br><span class="line">        text = PEdit1.text()</span><br><span class="line">        word_list = text.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        tuple_text = <span class="built_in">tuple</span>(word_list)</span><br><span class="line">        <span class="built_in">print</span>(tuple_text)</span><br><span class="line">        query = <span class="string">&quot;insert into book values(%s,%s,%s,%s);&quot;</span></span><br><span class="line">        cur.execute(<span class="string">&quot;insert into book values(&quot;</span>+<span class="built_in">str</span>(tuple_text[<span class="number">0</span>])+<span class="string">&#x27;,&#x27;</span>+<span class="built_in">str</span>(tuple_text[<span class="number">1</span>])+<span class="string">&#x27;,&#x27;</span>+<span class="built_in">str</span>(tuple_text[<span class="number">2</span>])+<span class="string">&#x27;,&#x27;</span>+<span class="built_in">str</span>(tuple_text[<span class="number">3</span>])+<span class="string">&#x27;);&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">        gConn.commit()</span><br><span class="line">        cur.execute(<span class="string">&quot;select * from book;&quot;</span>)</span><br><span class="line">        rows = cur.fetchall()</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">            PList1.addItem(QListWidgetItem(<span class="built_in">str</span>(row[<span class="number">0</span>]) + <span class="string">&quot;, &quot;</span> + <span class="built_in">str</span>(row[<span class="number">1</span>]) + <span class="string">&quot;, &quot;</span> + <span class="built_in">str</span>(row[<span class="number">2</span>]) + <span class="string">&quot;, &quot;</span> + <span class="built_in">str</span>(row[<span class="number">3</span>])))</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ButtonDeleteHaveClicked</span>(<span class="params">self,gConn,PList1,PEdit1</span>):</span><br><span class="line">        selected_items = PList1.selectedItems()</span><br><span class="line">        tuple_text = []</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> selected_items:</span><br><span class="line">            <span class="built_in">print</span>(item.text())</span><br><span class="line">            text = (item.text()).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            tuple_text.append(text[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(tuple_text)</span><br><span class="line">        cur = gConn.cursor()</span><br><span class="line">        <span class="keyword">for</span> xt <span class="keyword">in</span> tuple_text:</span><br><span class="line">            cur.execute(<span class="string">&quot;delete from book where bookid = &quot;</span> + <span class="built_in">str</span>(xt)+<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">        cur.close()</span><br><span class="line">        gConn.commit()</span><br><span class="line">        selected_row = PList1.currentRow()</span><br><span class="line">        item = PList1.takeItem(selected_row)</span><br><span class="line">        <span class="keyword">del</span> item</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ButtonQuitClicked</span>(<span class="params">self,gConn,PList1,PEdit1</span>):</span><br><span class="line">        PList1.clear()</span><br><span class="line">       </span><br><span class="line">        cur = gConn.cursor()</span><br><span class="line"></span><br><span class="line">        text = PEdit1.text()</span><br><span class="line">        cur.execute(text)</span><br><span class="line">        rows = cur.fetchall()</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">            PList1.addItem(<span class="built_in">str</span>(row[<span class="number">0</span>]) + <span class="string">&quot;, &quot;</span> + <span class="built_in">str</span>(row[<span class="number">1</span>]) + <span class="string">&quot;, &quot;</span> + <span class="built_in">str</span>(row[<span class="number">2</span>]) + <span class="string">&quot;, &quot;</span> + <span class="built_in">str</span>(row[<span class="number">3</span>]))   </span><br><span class="line">        cur.close()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ButtonSignClicked</span>(<span class="params">self,gConn,PList1,PEdit1</span>):</span><br><span class="line">        PList1.clear()</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        cur = gConn.cursor()</span><br><span class="line"></span><br><span class="line">        text = PEdit1.text()</span><br><span class="line">        text = text.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        tuple_text = <span class="built_in">tuple</span>(text)</span><br><span class="line">        cur.execute(<span class="string">&quot;insert into reader values(&quot;</span> + <span class="built_in">str</span>(tuple_text[<span class="number">0</span>])+<span class="string">&#x27;,&#x27;</span>+<span class="built_in">str</span>(tuple_text[<span class="number">1</span>])+<span class="string">&#x27;);&#x27;</span>)</span><br><span class="line">        gConn.commit()</span><br><span class="line">        cur.execute(<span class="string">&quot;select * from reader;&quot;</span>)</span><br><span class="line">        rows = cur.fetchall()</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">            PList1.addItem(QListWidgetItem(<span class="built_in">str</span>(row[<span class="number">0</span>]) + <span class="string">&quot;, &quot;</span> + <span class="built_in">str</span>(row[<span class="number">1</span>])))</span><br><span class="line">        cur.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,parent=<span class="literal">None</span></span>):</span><br><span class="line">        gConn = psycopg2.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="string">&quot;54321&quot;</span>, user=<span class="string">&quot;Sagapo&quot;</span>, password = <span class="string">&quot;201914&quot;</span>, database =<span class="string">&quot;test&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> gConn:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;connected&quot;</span>)</span><br><span class="line">        <span class="built_in">super</span>(lineEditDemo, self).__init__(parent)</span><br><span class="line">        self.setWindowTitle(<span class="string">&#x27;ang\&#x27;s database&#x27;</span>)</span><br><span class="line">        self.resize(<span class="number">1840</span>, <span class="number">950</span>)  </span><br><span class="line"></span><br><span class="line">        <span class="comment">#实例化表单布局</span></span><br><span class="line">        flo=QFormLayout()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#创建4个文本输入框</span></span><br><span class="line">        PNormalLineEdit=QLineEdit()</span><br><span class="line">        PButtonSearch=QPushButton(<span class="string">&#x27;查询可借阅书籍&#x27;</span>)</span><br><span class="line">        PButtonEnter = QPushButton(<span class="string">&#x27;读者信息登记&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        PButtonInsert=QPushButton(<span class="string">&#x27;添加购进书籍&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        PButtonDeleteHave=QPushButton(<span class="string">&#x27;删除书籍&#x27;</span>)</span><br><span class="line">        PButtonQuit=QPushButton(<span class="string">&#x27;退出程序&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        PList=QListWidget()</span><br><span class="line"></span><br><span class="line">        PList.setResizeMode(<span class="number">1</span>)</span><br><span class="line">        PButtonSearch.clicked.connect(<span class="keyword">lambda</span>: self.ButtonSearchClicked(gConn,PList,PNormalLineEdit)) </span><br><span class="line">        PButtonInsert.clicked.connect(<span class="keyword">lambda</span>: self.PButtonInsertClicked(gConn,PList,PNormalLineEdit)) </span><br><span class="line">        PButtonEnter.clicked.connect(<span class="keyword">lambda</span>: self.ButtonSignClicked(gConn,PList,PNormalLineEdit))</span><br><span class="line">        PButtonDeleteHave.clicked.connect(<span class="keyword">lambda</span>: self.ButtonDeleteHaveClicked(gConn,PList,PNormalLineEdit)) </span><br><span class="line">        PButtonQuit.clicked.connect(<span class="keyword">lambda</span>: self.ButtonQuitClicked(gConn,PList,PNormalLineEdit)) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#添加到表单布局中</span></span><br><span class="line">        <span class="comment">#flo.addRow(文本名称（可以自定义），文本框)</span></span><br><span class="line">        flo.addRow(<span class="string">&#x27;如果购进新的书籍，请输入书籍的信息：&#x27;</span>,PNormalLineEdit)</span><br><span class="line">        flo.addRow(<span class="string">&#x27;请点击插入上述书籍信息&#x27;</span>,PButtonInsert)</span><br><span class="line">        flo.addRow(<span class="string">&#x27;请点击查询可供借阅的书籍&#x27;</span>,PButtonSearch)</span><br><span class="line">        flo.addRow(<span class="string">&#x27;如果您想要借阅书籍，请输入您的信息&#x27;</span>,PButtonEnter)</span><br><span class="line">        flo.addRow(<span class="string">&#x27;消息列表&#x27;</span>,PList)</span><br><span class="line">        flo.addRow(<span class="string">&#x27;请选中一行，点击删除该书籍记录&#x27;</span>,PButtonDeleteHave)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#设置setPlaceholderText()文本框浮现的文字</span></span><br><span class="line">        PNormalLineEdit.setPlaceholderText(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#setEchoMode()：设置显示效果</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#QLineEdit.Normal：正常显示所输入的字符，此为默认选项</span></span><br><span class="line">        PNormalLineEdit.setEchoMode(QLineEdit.Normal)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#设置窗口的布局</span></span><br><span class="line">        self.setLayout(flo)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">resizeEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">            self.PList.height = self.flo.height -<span class="number">20</span></span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> QApplication.instance():</span><br><span class="line">        app = QApplication(sys.argv)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        app = QApplication.instance()</span><br><span class="line">    win=lineEditDemo()</span><br><span class="line">    win.show()</span><br><span class="line"></span><br><span class="line">    sys.exit(app.exec_()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="4-作业诚信承诺"><a href="#4-作业诚信承诺" class="headerlink" title="4  作业诚信承诺"></a>4  作业诚信承诺</h1><p>本报告是我个人独立完成的，并非从网上或从其他同学及从其他来源获取得到的，报告中引用他人的成果、数据、观点均已一一注明出处。</p>
<p>​                    承诺人电子签名：</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>大学大作业</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/08/03/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h3 id="数据挖掘算法"><a href="#数据挖掘算法" class="headerlink" title="数据挖掘算法"></a>数据挖掘算法</h3><p>一系列数学建模竞赛中，常见的问题设定与模型要求有：</p>
<ol>
<li>给定一系列数据，要求进行数据降维（挑选重要数据）、数据预处理、数据特征分析、特征选择等；</li>
<li>给定一系列数据，要求根据数据训练模型，根据输入x做出预测&#x2F;分类，输出结果y；</li>
<li>在给定的范围内搜寻最优解或者最优范围&#x2F;集合。</li>
</ol>
<h5 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h5><h5 id="2021年华为杯研究生数学建模竞赛D题"><a href="#2021年华为杯研究生数学建模竞赛D题" class="headerlink" title="2021年华为杯研究生数学建模竞赛D题"></a>2021年华为杯研究生数学建模竞赛D题</h5><h4 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h4><p>在建模之前，建议根据具体题目对数据进行<strong>异常值处理</strong>（包括漂移的数据点、缺失值补全）。注意，这一步是非常重要的，很多题目会在数据里埋坑，如果没有考虑到异常数据的影响，往往对于后续的分析与建模有重大影响。对于异常值的检测，常用的方法有基础的<strong>统计分析、可视化分析、分布检验</strong>；对于检测出的异常值，常用的处理方法有<strong>直接删除、根据前后数据进行平滑修正、补充为0</strong>等。接下来还可以进行一些常规的数据特征分析，比如均值、方差、最大值最小值、不同列数据的共线性分析等。</p>
<p>很多时候题目会给出维度丰富的数据，但其中往往很多列数据是无效&#x2F;不重要的，这个时候往往题目会要求筛选出前n个重要的数据维度，用于进一步的建模等。这时候就需要进行<strong>特征选择</strong>。注意这里是在原始数据的基础上，选择最重要的n列原始数据。最常见的特征选择思路是，先<strong>剔除方差为0的列数据</strong>、对不同的列之间进行<strong>相关性检验</strong>，确保不会选择出两个蕴含相同信息的列。</p>
<p>之后，可以把所有挑选过的原始数据，进行归一化数据预处理后，放进经典的机器学习模型中进行训练，根据训练后的模型反向输出每一列数据的重要性指标。这里<strong>推荐用sklearn库中的经典模型，方便训练后输出feature_importance数据</strong>。此外，有余力的同学可以用神经网络模型，根据网络输入层的weight，来判断每一列数据的重要性。</p>
<p>此外，还有一个与特征选择概念相近但又不能等同的任务：<strong>数据降维</strong>。数据降维更多时候指的是，对于维度丰富的数据，直接把它压缩成n维数据，这里的n维数据就不再是原始数据了。常用的数据降维算法有PCA等。</p>
<h4 id="分类预测"><a href="#分类预测" class="headerlink" title="分类预测"></a>分类预测</h4><p>分类任务指的是模型根据输入的样本特征x，预测样本对应的类别y（这里的y是一个离散值，比如0，1，2）；</p>
<p>回归任务指的是模型根据输入的样本特征x，预测样本对应的分数y（这里的y是一个连续值，比如0.1，0.2）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">####3.1 决策树回归####</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line">model_DecisionTreeRegressor = tree.DecisionTreeRegressor()</span><br><span class="line"><span class="comment">####3.2 线性回归####</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> linear_model</span><br><span class="line">model_LinearRegression = linear_model.LinearRegression()</span><br><span class="line"><span class="comment">####3.3SVM 回归####</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line">model_SVR = svm.SVR()</span><br><span class="line"><span class="comment">####3.4KNN 回归####</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> neighbors</span><br><span class="line">model_KNeighborsRegressor = neighbors.KNeighborsRegressor()</span><br><span class="line"><span class="comment">####3.5 随机森林回归####</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> ensemble</span><br><span class="line">model_RandomForestRegressor = ensemble.RandomForestRegressor(n_estimators=<span class="number">500</span>)<span class="comment">#</span></span><br><span class="line">这里使用 <span class="number">20</span> 个决策树</span><br><span class="line"><span class="comment">####3.6Adaboost 回归####</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> ensemble</span><br><span class="line">model_AdaBoostRegressor = ensemble.AdaBoostRegressor(n_estimators=<span class="number">500</span>)</span><br><span class="line"><span class="comment">#这里使用 50 个决策树</span></span><br><span class="line"><span class="comment">####3.7GBRT 回归####</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> ensemble</span><br><span class="line">model_GradientBoostingRegressor=ensemble.GradientBoostingRegressor(n_estimators=<span class="number">50</span></span><br><span class="line"><span class="number">0</span>)</span><br><span class="line"><span class="comment">#这里使用 100 个决策树</span></span><br><span class="line"><span class="comment">####3.8Bagging 回归####</span></span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> BaggingRegressor</span><br><span class="line">model_BaggingRegressor = BaggingRegressor()</span><br><span class="line"><span class="comment">####3.9ExtraTree 极端随机树回归####</span></span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> ExtraTreeRegressor</span><br><span class="line">model_ExtraTreeRegressor = ExtraTreeRegressor()</span><br></pre></td></tr></table></figure>





<h4 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a>优化算法</h4><p>数学建模中常见的优化算法有：遗传算法、模拟退火算法、蚁群算法、粒子群算法等</p>
<p>基于以上传统优化算法，可以根据具体问题设定带约束的优化算法求解。比如2021年华为杯的D题最后一问，优化目标有两个，则在定义优化算法目标函数时，加入一个惩罚项即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">schaffer</span>(<span class="params">p</span>):</span><br><span class="line">  p = p.reshape(<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">  <span class="comment"># ADMET 约束</span></span><br><span class="line">  admet = <span class="built_in">int</span>(cla_model1.predict(p)[<span class="number">0</span>]==<span class="number">1</span>) + <span class="built_in">int</span>(cla_model2.predict(p)[<span class="number">0</span>]==<span class="number">1</span>) + </span><br><span class="line">  <span class="built_in">int</span>(cla_model3.predict(p)[<span class="number">0</span>]==<span class="number">0</span>) + \</span><br><span class="line">  <span class="built_in">int</span>(cla_model4.predict(p)[<span class="number">0</span>]==<span class="number">1</span>) + <span class="built_in">int</span>(cla_model5.predict(p)[<span class="number">0</span>]==<span class="number">0</span>)</span><br><span class="line">  <span class="comment"># ERA 活性值</span></span><br><span class="line">  era = reg_model.predict(p)[<span class="number">0</span>]</span><br><span class="line">  <span class="comment"># 综合优化目标：ERA + ADMET 约束</span></span><br><span class="line">  res = -era + <span class="built_in">int</span>(admet&lt;<span class="number">3</span>)*<span class="number">1e5</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"><span class="comment"># 遗传算法实现</span></span><br><span class="line">low_bound = data.<span class="built_in">min</span>(axis=<span class="number">0</span>)</span><br><span class="line">high_bound = data.<span class="built_in">max</span>(axis=<span class="number">0</span>)</span><br><span class="line">ga = GA(func=schaffer, n_dim=<span class="number">20</span>, size_pop=<span class="number">50</span>, max_iter=<span class="number">600</span>, prob_mut=<span class="number">0.001</span>, </span><br><span class="line">lb=low_bound, ub=high_bound, precision=<span class="number">1e-7</span>)</span><br><span class="line">best_x, best_y = ga.run()</span><br><span class="line">Y_history = pd.DataFrame(ga.all_history_Y)</span><br><span class="line"><span class="comment"># 绘图。红点代表每一个 iteration 中种群里每一个个体的 y 值。</span></span><br><span class="line"><span class="comment"># 100000 的值都是不满足 admet 至少三个为优的性质。直接忽略。</span></span><br><span class="line"><span class="comment"># 蓝色曲线为 ERA 活性值，越高越好。</span></span><br><span class="line">fig, ax = plt.subplots(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">ax[<span class="number">0</span>].plot(Y_history.index, Y_history.values, <span class="string">&#x27;.&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line"><span class="comment"># Y_history.min(axis=1).cummin().plot(kind=&#x27;line&#x27;)</span></span><br><span class="line"><span class="built_in">abs</span>(Y_history.<span class="built_in">min</span>(axis=<span class="number">1</span>)).plot(kind=<span class="string">&#x27;line&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>数模</title>
    <url>/2023/07/13/%E6%95%B0%E6%A8%A1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/08/03/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E9%A2%84%E6%B5%8B/</url>
    <content><![CDATA[<h3 id="时间序列预测"><a href="#时间序列预测" class="headerlink" title="时间序列预测"></a>时间序列预测</h3><p>ARIMA时间序列预测模型</p>
<p>资金流入流出预测</p>
<p>题目如下：</p>
<p>使用的数据主要包含四个部分，分别为用户基本信息数据、用户申购赎回数据、收益率表和银行间拆借利率表。下面分别介绍四组数据。</p>
<h4 id="1-用户信息表"><a href="#1-用户信息表" class="headerlink" title="1.用户信息表"></a>1.用户信息表</h4><p>用户信息表： user_profile_table 。 我们总共随机抽取了约 3 万用户，其中部分用户在 2014 年 9 月份第一次出现，这部分用户只在测试数据中 。因此用户信息表是约 2.8 万 个用户的基本数据，在原始数据的基础上处理后，主要包含了用户的性别、城市和星座。具体的字段如下表 1 ：</p>
<p> 表1用户信息表</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>类型</th>
<th>含义</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>user_id</td>
<td>bigint</td>
<td>用户 ID</td>
<td>1234</td>
</tr>
<tr>
<td>Sex</td>
<td>bigint</td>
<td>用户性别（ 1 ：男， 0 ：女 ）</td>
<td>0</td>
</tr>
<tr>
<td>City</td>
<td>bigint</td>
<td>所在城市</td>
<td>6081949</td>
</tr>
<tr>
<td>constellation</td>
<td>string</td>
<td>星座</td>
<td>射手座</td>
</tr>
</tbody></table>
<h4 id="2-用户申购赎回数据表"><a href="#2-用户申购赎回数据表" class="headerlink" title="2. 用户申购赎回数据表"></a>2. 用户申购赎回数据表</h4><p>用户申购赎回数据表： user_balance_table 。里面有 20130701 至 20140831 申购和赎回信息、以及所有的子类目信息， 数据经过脱敏处理。脱敏之后的数据，基本保持了原数据趋势。数据主要包括用户操作时间和操作记录，其中操作记录包括申购和赎回两个部分。金额的单位是分，即 0.01 元人民币。 如果用户今日消费总量为0，即consume_amt&#x3D;0，则四个字类目为空。</p>
<p> 表格 2 ：用户申购赎回数据</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>类型</th>
<th>含义</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>user_id</td>
<td>bigint</td>
<td>用户 id</td>
<td>1234</td>
</tr>
<tr>
<td>report_date</td>
<td>string</td>
<td>日期</td>
<td>20140407</td>
</tr>
<tr>
<td>tBalance</td>
<td>bigint</td>
<td>今日余额</td>
<td>109004</td>
</tr>
<tr>
<td>yBalance</td>
<td>bigint</td>
<td>昨日余额</td>
<td>97389</td>
</tr>
<tr>
<td>total_purchase_amt</td>
<td>bigint</td>
<td>今日总购买量 &#x3D; 直接购买 + 收益</td>
<td>21876</td>
</tr>
<tr>
<td>direct_purchase_amt</td>
<td>bigint</td>
<td>今日直接购买量</td>
<td>21863</td>
</tr>
<tr>
<td>purchase_bal_amt</td>
<td>bigint</td>
<td>今日支付宝余额购买量</td>
<td>0</td>
</tr>
<tr>
<td>purchase_bank_amt</td>
<td>bigint</td>
<td>今日银行卡购买量</td>
<td>21863</td>
</tr>
<tr>
<td>total_redeem_amt</td>
<td>bigint</td>
<td>今日总赎回量 &#x3D; 消费 + 转出</td>
<td>10261</td>
</tr>
<tr>
<td>consume_amt</td>
<td>bigint</td>
<td>今日消费总量</td>
<td>0</td>
</tr>
<tr>
<td>transfer_amt</td>
<td>bigint</td>
<td>今日转出总量</td>
<td>10261</td>
</tr>
<tr>
<td>tftobal_amt</td>
<td>bigint</td>
<td>今日转出到支付宝余额总量</td>
<td>0</td>
</tr>
<tr>
<td>tftocard_amt</td>
<td>bigint</td>
<td>今日转出到银行卡总量</td>
<td>10261</td>
</tr>
<tr>
<td>share_amt</td>
<td>bigint</td>
<td>今日收益</td>
<td>13</td>
</tr>
<tr>
<td>category1</td>
<td>bigint</td>
<td>今日类目 1 消费总额</td>
<td>0</td>
</tr>
<tr>
<td>category2</td>
<td>bigint</td>
<td>今日类目 2 消费总额</td>
<td>0</td>
</tr>
<tr>
<td>category3</td>
<td>bigint</td>
<td>今日类目 3 消费总额</td>
<td>0</td>
</tr>
<tr>
<td>category4</td>
<td>bigint</td>
<td>今日类目 4 消费总额</td>
<td>0</td>
</tr>
</tbody></table>
<p>注 1 ：上述的数据都是经过脱敏处理的，收益为重新计算得到的，计算方法按照简化后的计算方式处理，具体计算方式在下节余额宝收益计算方式中描述。</p>
<p>注 2 ：脱敏后的数据保证了今日余额 &#x3D; 昨日余额 + 今日申购 - 今日赎回，不会出现负值。</p>
<h4 id="3-收益率表"><a href="#3-收益率表" class="headerlink" title="3.收益率表"></a>3.收益率表</h4><p>收益表为余额宝在 14 个月内的收益率表： mfd_day_share_interest 。具体字段如表格 3 中所示</p>
<p> 表格 3 收益率表</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>类型</th>
<th>含义</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>mfd_date</td>
<td>string</td>
<td>日期</td>
<td>20140102</td>
</tr>
<tr>
<td>mfd_daily_yield</td>
<td>double</td>
<td>万份收益，即 1 万块钱的收益。</td>
<td>1.5787</td>
</tr>
<tr>
<td>mfd_7daily_yield</td>
<td>double</td>
<td>七日年化收益率（ % ）</td>
<td>6.307</td>
</tr>
</tbody></table>
<h4 id="4-上海银行间同业拆放利率（Shibor）表"><a href="#4-上海银行间同业拆放利率（Shibor）表" class="headerlink" title="4.上海银行间同业拆放利率（Shibor）表"></a>4.上海银行间同业拆放利率（Shibor）表</h4><p>银行间拆借利率表是 14 个月期间银行之间的拆借利率（皆为年化利率）： mfd_bank_shibor 。具体字段如下表格 4 所示：<br> 表格 4 银行间拆借利率表</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>类型</th>
<th>含义</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>mfd_date</td>
<td>String</td>
<td>日期</td>
<td>20140102</td>
</tr>
<tr>
<td>Interest_<strong>O_N</strong></td>
<td>Double</td>
<td>隔夜利率（%）</td>
<td>2.8</td>
</tr>
<tr>
<td>Interest_<strong>1_W</strong></td>
<td>Double</td>
<td>1周利率（%）</td>
<td>4.25</td>
</tr>
<tr>
<td>Interest_<strong>2_W</strong></td>
<td>Double</td>
<td>2周利率（%）</td>
<td>4.9</td>
</tr>
<tr>
<td>Interest_<strong>1_M</strong></td>
<td>Double</td>
<td>1个月利率（%）</td>
<td>5.04</td>
</tr>
<tr>
<td>Interest_<strong>3_M</strong></td>
<td>Double</td>
<td>3个月利率（%）</td>
<td>4.91</td>
</tr>
<tr>
<td>Interest_<strong>6_M</strong></td>
<td>Double</td>
<td>6个月利率（%）</td>
<td>4.79</td>
</tr>
<tr>
<td>Interest_<strong>9_M</strong></td>
<td>Double</td>
<td>9个月利率（%）</td>
<td>4.76</td>
</tr>
<tr>
<td>Interest_<strong>1_Y</strong></td>
<td>Double</td>
<td>1年利率（%）</td>
<td>4.78</td>
</tr>
</tbody></table>
<h3 id="题目分析和模型构建"><a href="#题目分析和模型构建" class="headerlink" title="题目分析和模型构建"></a>题目分析和模型构建</h3><p>生成 ARIMA 模型的基本步骤：</p>
<ol>
<li>对序列绘图，进行 ADF 检验，观察序列是否平稳；对于非平稳时间序列要先进行 d 阶差分，转化为平稳时间序列；</li>
<li>经过第一步处理，已经得到平稳时间序列。要对平稳时间序列分别求得其自相关系数（ACF）和偏自相关系数（PACF），通过对自相关图和偏自相关图的分析，得到最佳的阶数p、q；</li>
<li>由以上得到的d、q、p ，得到 ARIMA 模型。然后开始对得到的模型进行模型检验。</li>
</ol>
<p>步骤：</p>
<p>1、首先查看每天的申购金额的趋势：</p>
<p>python代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">user_balance = pd.read_csv(<span class="string">&#x27;./user_balance_table.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df_tmp = user_balance.groupby([<span class="string">&#x27;report_date&#x27;</span>])[<span class="string">&#x27;total_purchase_amt&#x27;</span>, <span class="string">&#x27;total_redeem_amt&#x27;</span>].<span class="built_in">sum</span>()</span><br><span class="line">df_tmp.reset_index(inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">df_tmp[<span class="string">&#x27;report_date&#x27;</span>] = pd.to_datetime(df_tmp[<span class="string">&#x27;report_date&#x27;</span>], <span class="built_in">format</span>=<span class="string">&#x27;%Y%m%d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df_tmp.index = df_tmp[<span class="string">&#x27;report_date&#x27;</span>]</span><br><span class="line"></span><br><span class="line">total_purchase_amt = plt.figure(figsize=(<span class="number">10</span>, <span class="number">4</span>))</span><br><span class="line">ax = total_purchase_amt.add_subplot(<span class="number">111</span>)</span><br><span class="line">ax.<span class="built_in">set</span>(title=<span class="string">&#x27;Total_Purchase_Amt&#x27;</span>,</span><br><span class="line">       ylabel=<span class="string">&#x27;Unit (yuan)&#x27;</span>, xlabel=<span class="string">&#x27;Date&#x27;</span>)</span><br><span class="line">plt.plot(df_tmp[<span class="string">&#x27;report_date&#x27;</span>], df_tmp[<span class="string">&#x27;total_purchase_amt&#x27;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230803113120116.png" alt="image-20230803113120116"  />

<p>结果如上图所示</p>
<p>从上图中可以看出，从2013-07<del>2014-04，余额宝每日的申购金额经历了一个较大的波动过程，从2014-04开始，趋向于稳定的震荡（均值近似为常数）。<strong>ARIMA 模型是通过寻找历史数据之间的自相关性，来预测未来（假设未来将重复历史的走势），要求序列必须是平稳的。</strong>因此我们取2014-04-01</del>2014-07-31的数据作为训练集，将2014-08-01~2014-08-10的数据作为测试集。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_purchase_seq</span>():</span><br><span class="line">    dateparse = <span class="keyword">lambda</span> dates: pd.to_datetime.strptime(dates, <span class="string">&#x27;%Y%m%d&#x27;</span>)</span><br><span class="line">    user_balance = pd.read_csv(<span class="string">&#x27;model/user_balance_table.csv&#x27;</span>, parse_dates=[<span class="string">&#x27;report_date&#x27;</span>],</span><br><span class="line">                               index_col=<span class="string">&#x27;report_date&#x27;</span>, date_parser=dateparse)</span><br><span class="line"></span><br><span class="line">    df = user_balance.groupby([<span class="string">&#x27;report_date&#x27;</span>])[<span class="string">&#x27;total_purchase_amt&#x27;</span>].<span class="built_in">sum</span>()</span><br><span class="line">    purchase_seq = pd.Series(df, name=<span class="string">&#x27;value&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    purchase_seq_train = purchase_seq[<span class="string">&#x27;2014-04-01&#x27;</span>:<span class="string">&#x27;2014-07-31&#x27;</span>]</span><br><span class="line">    purchase_seq_test = purchase_seq[<span class="string">&#x27;2014-08-01&#x27;</span>:<span class="string">&#x27;2014-08-10&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    purchase_seq_train.to_csv(path=<span class="string">&#x27;model/purchase_seq_train.csv&#x27;</span>, header=<span class="literal">True</span>)</span><br><span class="line">    purchase_seq_test.to_csv(path=<span class="string">&#x27;model/purchase_seq_test.csv&#x27;</span>, header=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">generate_purchase_seq()</span><br></pre></td></tr></table></figure>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">from</span> statsmodels.tsa.arima_model <span class="keyword">import</span> ARIMA</span><br><span class="line"><span class="keyword">from</span> statsmodels.tsa.seasonal <span class="keyword">import</span> seasonal_decompose</span><br><span class="line"><span class="keyword">from</span> statsmodels.tsa.stattools <span class="keyword">import</span> adfuller <span class="keyword">as</span> ADF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">diff</span>(<span class="params">timeseries</span>):</span><br><span class="line">    timeseries_diff1 = timeseries.diff(<span class="number">1</span>)</span><br><span class="line">    timeseries_diff2 = timeseries_diff1.diff(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    timeseries_diff1 = timeseries_diff1.fillna(<span class="number">0</span>)</span><br><span class="line">    timeseries_diff2 = timeseries_diff2.fillna(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    timeseries_adf = ADF(timeseries[<span class="string">&#x27;value&#x27;</span>].tolist())</span><br><span class="line">    timeseries_diff1_adf = ADF(timeseries_diff1[<span class="string">&#x27;value&#x27;</span>].tolist())</span><br><span class="line">    timeseries_diff2_adf = ADF(timeseries_diff2[<span class="string">&#x27;value&#x27;</span>].tolist())</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;timeseries_adf : &#x27;</span>, timeseries_adf)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;timeseries_diff1_adf : &#x27;</span>, timeseries_diff1_adf)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;timeseries_diff2_adf : &#x27;</span>, timeseries_diff2_adf)</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">    plt.plot(timeseries, label=<span class="string">&#x27;Original&#x27;</span>, color=<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line">    plt.plot(timeseries_diff1, label=<span class="string">&#x27;Diff1&#x27;</span>, color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    plt.plot(timeseries_diff2, label=<span class="string">&#x27;Diff2&#x27;</span>, color=<span class="string">&#x27;purple&#x27;</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dateparse = <span class="keyword">lambda</span> dates: pd.datetime.strptime(dates, <span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">purchase_seq_train = pd.read_csv(<span class="string">&#x27;./purchase_seq_train.csv&#x27;</span>, parse_dates=[<span class="string">&#x27;report_date&#x27;</span>],</span><br><span class="line">                                 index_col=<span class="string">&#x27;report_date&#x27;</span>, date_parser=dateparse)</span><br><span class="line"></span><br><span class="line">diff(purchase_seq_train)</span><br></pre></td></tr></table></figure>

<img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230803113707819.png" alt="image-20230803113707819" style="zoom:50%;" />





<p>从结果来看，要想使得序列变得平稳，需要进行一阶差分。我们对序列进行一阶差分，并查看差分后序列的 ACF、PACF：</p>
<p>从序列 ACF 、PACF 的图中没有发现明显的拖尾或截尾，说明对于这样的序列，并不适合用ARIMA 模型来拟合。如何用 ARIMA 模型来拟合这样的曲线呢？<strong>这里我们将先通过对时间序列分解（STL），再采用 ARIMA 模型来拟合趋势序列与残差序列。</strong></p>
<p>对原序列分解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> statsmodels.api <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">from</span> statsmodels.tsa.arima_model <span class="keyword">import</span> ARIMA</span><br><span class="line"><span class="keyword">from</span> statsmodels.tsa.seasonal <span class="keyword">import</span> seasonal_decompose</span><br><span class="line"><span class="keyword">from</span> statsmodels.tsa.stattools <span class="keyword">import</span> adfuller <span class="keyword">as</span> ADF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decomposing</span>(<span class="params">timeseries</span>):</span><br><span class="line">    decomposition = seasonal_decompose(timeseries)</span><br><span class="line">    trend = decomposition.trend</span><br><span class="line">    seasonal = decomposition.seasonal</span><br><span class="line">    residual = decomposition.resid</span><br><span class="line"></span><br><span class="line">    plt.figure(figsize=(<span class="number">16</span>, <span class="number">12</span>))</span><br><span class="line">    plt.subplot(<span class="number">411</span>)</span><br><span class="line">    plt.plot(timeseries, label=<span class="string">&#x27;Original&#x27;</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">    plt.subplot(<span class="number">412</span>)</span><br><span class="line">    plt.plot(trend, label=<span class="string">&#x27;Trend&#x27;</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">    plt.subplot(<span class="number">413</span>)</span><br><span class="line">    plt.plot(seasonal, label=<span class="string">&#x27;Seasonarity&#x27;</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">    plt.subplot(<span class="number">414</span>)</span><br><span class="line">    plt.plot(residual, label=<span class="string">&#x27;Residual&#x27;</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">&#x27;best&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dateparse = <span class="keyword">lambda</span> dates: pd.datetime.strptime(dates, <span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line">purchase_seq_train = pd.read_csv(<span class="string">&#x27;./purchase_seq_train.csv&#x27;</span>, parse_dates=[<span class="string">&#x27;report_date&#x27;</span>],</span><br><span class="line">                                 index_col=<span class="string">&#x27;report_date&#x27;</span>, date_parser=dateparse)</span><br><span class="line"></span><br><span class="line">decomposing(purchase_seq_train)</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230803113820226.png" alt="image-20230803113820226"></p>
<p>从上图中可以看到，原序列有明显的周期性，而且是以七天为一个周期（可以将具体的数值打印出来）。因此我们只对趋势序列和残差序列去拟合，同时认为这样的周期性会延伸至2014-08-01~2014-08-10的测试集上。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/16/%E6%96%B9%E6%A1%88%E7%AE%80%E8%BF%B0/</url>
    <content><![CDATA[<h4 id="结论：两个方案可以合并。"><a href="#结论：两个方案可以合并。" class="headerlink" title="结论：两个方案可以合并。"></a>结论：两个方案可以合并。</h4><h5 id="首先在执行n叉树检索操作时："><a href="#首先在执行n叉树检索操作时：" class="headerlink" title="首先在执行n叉树检索操作时："></a>首先在执行n叉树检索操作时：</h5><p>我们对每个节点均设置了一个编号，这个编号以O(n)的时间复杂度执行path-oram的写回操作，</p>
<h5 id="在执行虚实块方案检索操作时："><a href="#在执行虚实块方案检索操作时：" class="headerlink" title="在执行虚实块方案检索操作时："></a>在执行虚实块方案检索操作时：</h5><p>我们对于每个节点均设置了判断其虚实块的方案，首先是由于目前创建的树中，在一个节点中只有一半的节点是满的（这里的节点为满指的是该节点存储了irtree中规定的maxsize的分支，并且这些分支都是实际的），剩下的节点均为不满的，（不满是指，该节点存储的分支中实际分支的个数小于maxsize，剩下的被虚分支填充），所以这会导致写回速度能够加快将近50%左右。</p>
<p>但是刚开始的理解是应该是n叉树检索会更快，但是实际测试比虚实块方案更慢，这其中的原因是，在初始方案中，我设置了父亲节点来进行写回操作，其实这个操作的时间复杂度也为o（n），修改之后的n叉树检索方案其实真实的时间复杂度也为o（n），但是这个方案有一个缺点，那就是必须将整棵树补充为满n叉树，注意：（在这里，我们需要区分两个概念：满n叉树和满树不是一个概念：在我们设置的rtree中，满树指的是每一个节点的分支个数均为maxsize，而满n叉树指的是不仅分支个数均为maxsize，并且整棵树还要重新补充节点，并且随着我们设置的maxsize的增大，这个新补充节点的个数的空间复杂度是o（2^n)），</p>
<p>在清楚这个概念之后，我们来解释为什么在将maxsize设置为8之后，会导致满n叉树的检索速率大幅度下降的原因，那就是整棵树的虚结点的个数过多，这不仅产生了大量的存储消耗，并且让查询过程中对于虚结点和虚分支的判断消耗时间大大增加。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/25/%E6%A6%82/</url>
    <content><![CDATA[<h5 id="工作日程安排："><a href="#工作日程安排：" class="headerlink" title="工作日程安排："></a>工作日程安排：</h5><p>根据上述工作分解结构与估算的工期时间，我们在项目软件project中制定了四个模块的工期安排，以及对应的前置任务，我们设置每人每天的工时均为8小时，并对某些任务设置了相应的前置任务</p>
<p>根据后续ppt的甘特图，我们可以确定任务之间的先后顺序，从前到后依次是：需求分析、方案设计、系统实现、系统测试、系统上线。 有些任务我们设置了同步进行，如系统接口设计和配套硬件设计可以同时进行， 以提高物理设计阶段的效率。</p>
<h5 id="资源分配"><a href="#资源分配" class="headerlink" title="资源分配"></a>资源分配</h5><p>由设计的资源工作表可知，该项目的材料成本为软件开发时所用到的服务器费用以及网页端运行费用；关于员工主要分为前端开发，后端开发以及系统运行以及维护人员；关于人员的管理以及住宿伙食安排也需要支出资金。</p>
<p>同时我们根据国内外的前端、后端以及运维人员和产品经理的工资和加班费用进行了调查、最终确定了本系统的工资成本。</p>
<p>分工：</p>
<p>组长：刘泽森</p>
<p>后端开发，产品经理、运营维护</p>
<p>王可儿：运营维护、产品营销、需求调查</p>
<p>谭尚谋：系统测试、前端开发、需求调查</p>
<p>王剑宇：方案设计、性能分析、成本规划</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/09/07/%E6%A8%A1%E5%9E%8B%E5%BB%BA%E7%AB%8B%E4%B8%8E%E6%B1%82%E8%A7%A3/</url>
    <content><![CDATA[<h4 id="五、模型建立与求解"><a href="#五、模型建立与求解" class="headerlink" title="五、模型建立与求解"></a>五、模型建立与求解</h4><p>5.1、问题一</p>
<p>5.1.1模型的准备：</p>
<p>5.1.1.1 镜场和镜面坐标系的建立</p>
<p>以镜场中心为坐标原点，以正东方向为x轴正方向，以正北方向为y轴正方向，以垂直地面向上为z轴建立空间直角坐标系：如图：</p>
<p>以镜面中心为坐标原点，以与地面平行方向为x轴方向，以镜面法向为z轴，以垂直于x和z轴所在平面方向为y轴，建立镜面的空间直角坐标系，如图所示：</p>
<p>5.1.1.3 法向直接辐射辐照度</p>
<p>5.1.1.4 定日镜的光学效率</p>
<p>5.1.1.5 定日镜场的输出热功率</p>
<p>5.1.2 模型的建立</p>
<p>因为定日镜场的热功率并不是单个定日镜的功率的简单叠加，因此在计算定日镜的热功率时需要根据每个定日镜的位置关系来确定目标定日镜与邻近定日镜之间的关系。</p>
<p>阴影遮挡效率的计算</p>
<p>采用光线追迹法计算定日镜的阴影遮挡效率。</p>
<p>在地面坐标系中，入射光线的方向余弦可以写为：</p>
<p>公式1：</p>
<p>阴影遮挡效率为：</p>
<p>阴影遮挡损失包括</p>
<p>1、A定日镜被B定日镜遮挡的阴影损失</p>
<p>2、A定日镜反射光线被B定日镜遮挡损失</p>
<p>3、吸收塔的阴影损失</p>
<p>定日镜之间的阴影遮挡损失，我们在两块任意的定日镜A与B之间进行分析，设A镜面坐标系上一光线入射点坐标为H1（x1,y1,0),设该光线落入B镜面坐标系中的坐标，镜面坐标系A到B的关系变换矩阵为T</p>
<p>公式1</p>
<p>设光线在镜面A坐标系的向量坐标为H_A</p>
<p>则在镜场坐标系中的向量坐标为H_0  &#x3D; T * H_A</p>
<p>H_0在镜面B坐标系中的向量坐标为H_B &#x3D; H_0*T;</p>
<p>则可以解的H_2坐标为：</p>
<p>判断H_2是否在B镜面中，若在镜面中，则视为遮挡，则镜面A的镜面阴影遮挡损失为 遮挡面积&#x2F;镜面面积</p>
<p>吸收塔的阴影损失计算</p>
<p>我们根据给定的经纬度计算每个月份21号每一个时间段的太阳高度角为alpha,我们计算得到吸收塔对于定日镜产生遮挡影响的太阳高度角阈值为β，当α大于β时，吸收塔对于定日镜没有遮挡影响，α&lt;β时，吸收塔对于定日镜有影响，我们计算得到了吸收塔对于定日镜的遮挡模型。</p>
<p>当α&lt;β时，我们计算吸收塔对于定日镜的遮挡面积</p>
<p>设当日日期为m月d日，2023年春分为3月21日，计算太阳赤纬角为</p>
<p>根据太阳赤纬角以及太阳时角可以计算得到太阳高度角，</p>
<p>则遮挡范围为：</p>
<p>5.1.2模型的建立</p>
<p>5.1.3模型的求解</p>
<p>5.2问题二</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/08/03/%E6%AC%A7%E5%8D%A1%E5%9B%BE%E5%92%8C%E5%93%88%E5%AF%86%E5%B0%94%E9%A1%BF%E5%9B%BE%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h3 id="欧卡图和哈密尔顿图的应用"><a href="#欧卡图和哈密尔顿图的应用" class="headerlink" title="欧卡图和哈密尔顿图的应用"></a>欧卡图和哈密尔顿图的应用</h3><h4 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h4><h5 id="1-1-Euler图"><a href="#1-1-Euler图" class="headerlink" title="1.1.Euler图"></a>1.1.Euler图</h5><p>定义 经过<img src="https://math.jianshu.com/math?formula=G" alt="G">的每条边的迹叫做<img src="https://math.jianshu.com/math?formula=G" alt="G">的Euler迹；闭的Euler迹叫做<strong>Euler回路</strong>或E回路；含Euler回路的图叫做<strong>Euler图</strong></p>
<p><strong>定理1</strong> 1.<img src="https://math.jianshu.com/math?formula=G" alt="G">是Euler图的充分必要条件是<img src="https://math.jianshu.com/math?formula=G" alt="G">联通且每个顶点都是偶次顶点。<br>2.<img src="https://math.jianshu.com/math?formula=G" alt="G">是Euler图的充分必要条件是<img src="https://math.jianshu.com/math?formula=G" alt="G">联通且<br><img src="https://math.jianshu.com/math?formula=G=%5Cbigcup_%7Bi=1%7D%5E%7Bd%7D%20C_%7Bi%7D" alt="G=\bigcup_{i=1}^{d} C_{i}">，<img src="https://math.jianshu.com/math?formula=C_%7Bi%7D" alt="C_{i}">是圈，<br><img src="https://math.jianshu.com/math?formula=E%5Cleft(C_%7Bi%7D%5Cright)%20%5Ccap%20E%5Cleft(C_%7Bj%7D%5Cright)=%5CPhi(i%20%5Cneq%20j)" alt="E\left(C_{i}\right) \cap E\left(C_{j}\right)=\Phi(i \neq j)"><br>3.<img src="https://math.jianshu.com/math?formula=G" alt="G">中有Euler迹的充要条件是<img src="https://math.jianshu.com/math?formula=G" alt="G">联通且至多有两个顶点。</p>
<h5 id="1-2-Hamilton图"><a href="#1-2-Hamilton图" class="headerlink" title="1.2.Hamilton图"></a>1.2.Hamilton图</h5><p>定义 包含<img src="https://math.jianshu.com/math?formula=G" alt="G">的每个顶点的轨叫做Hamilton轨；闭的Hamilton轨叫做Hamilton圈或H圈；含Hamilton圈的图叫做<strong>Hamilton图</strong>。</p>
<h5 id="1-3-Euler图和Hamilton图的区别"><a href="#1-3-Euler图和Hamilton图的区别" class="headerlink" title="1.3.Euler图和Hamilton图的区别"></a>1.3.Euler图和Hamilton图的区别</h5><p>都是含有一个圈，但是Euler图的关键词是“边”，它要经过该图中的每一条边。而Hamilton图的关键词是”顶点”只要经过每个顶点就行了，也就是说，Euler图的要求更高。</p>
<h5 id="2-Euler回路的Fleury算法"><a href="#2-Euler回路的Fleury算法" class="headerlink" title="2.Euler回路的Fleury算法"></a>2.Euler回路的Fleury算法</h5><p>1.<img src="https://math.jianshu.com/math?formula=%5Cforall%20v_%7B0%7D%20%5Cin%20V(G)" alt="\forall v_{0} \in V(G)">，令<img src="https://math.jianshu.com/math?formula=W_%7B0%7D=v_%7B0%7D" alt="W_{0}=v_{0}">。<br> 2.假设迹<img src="https://math.jianshu.com/math?formula=W_%7Bi%7D=v_%7B0%7D%20e_%7B1%7D%20v_%7B1%7D%20%5Ccdots%20e_%7Bi%7D%20v_%7Bi%7D" alt="W_{i}=v_{0} e_{1} v_{1} \cdots e_{i} v_{i}">已经选定，那么按下列方法从<img src="https://math.jianshu.com/math?formula=E-%5Cleft%5C%7Be_%7B1%7D,%20%5Ccdots,%20e_%7Bi%7D%5Cright%5C%7D" alt="E-\left\{e_{1}, \cdots, e_{i}\right\}">中选取边<img src="https://math.jianshu.com/math?formula=e_%7Bi+1%7D" alt="e_{i+1}">:<br> (1)<img src="https://math.jianshu.com/math?formula=e_%7Bi+1%7D" alt="e_{i+1}">和<img src="https://math.jianshu.com/math?formula=v_%7Bi%7D" alt="v_{i}">相关联；<br> (2)除非没有别的边可选择，否则<img src="https://math.jianshu.com/math?formula=e_%7Bi+1%7D" alt="e_{i+1}">不能是<img src="https://math.jianshu.com/math?formula=G_%7Bi%7D=G-%5Cleft%5C%7Be_%7B1%7D,%20%5Ccdots,%20e_%7Bi%7D%5Cright%5C%7D" alt="G_{i}=G-\left\{e_{1}, \cdots, e_{i}\right\}">的割边（<strong>割边</strong>是一条删除后使连通图不再联通的边）。<br> 3.当第2步不能再执行时，算法停止。</p>
<h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><h5 id="邮递员问题"><a href="#邮递员问题" class="headerlink" title="邮递员问题"></a>邮递员问题</h5><p>一位邮递员从邮局选好邮件去投递，然后返回邮局，当然他必须经过他负责投递的每条街道至少一次，为他设计一条投递路线，使得他<strong>行程最短</strong>。</p>
<p>上述中国邮递员问题的数学模型是：在一个赋权连通图上求一个含所有边的回路，且使此<strong>回路的权最小</strong>。</p>
<p>显然，若此连通赋权图是 Euler 图，则可用 Fleury 算法求 Euler 回路，此回路即为所求。</p>
<p>若是非Euler图，则有以下算法：</p>
<p>设<img src="https://math.jianshu.com/math?formula=G" alt="G">是联通赋权图<br> 1.求<img src="https://math.jianshu.com/math?formula=V_%7B0%7D=%5C%7Bv%20%7C%20v%20%5Cin%20V(G),%20d(v)=1(%5Cbmod%202)%5C%7D" alt="V_{0}=\{v | v \in V(G), d(v)=1(\bmod 2)\}"><br> 2.对每对顶点<img src="https://math.jianshu.com/math?formula=u,%20v%20%5Cin%20V_%7B0%7D" alt="u, v \in V_{0}">，求<img src="https://math.jianshu.com/math?formula=d(u,v)" alt="d(u,v)">（<img src="https://math.jianshu.com/math?formula=d(u,v)" alt="d(u,v)">是<img src="https://math.jianshu.com/math?formula=u" alt="u">和<img src="https://math.jianshu.com/math?formula=v" alt="v">的距离，可用最短路问题中的算法来求出）<br> 3.构造完全赋权图<img src="https://math.jianshu.com/math?formula=K_%7B%5Cleft.%5Cright%7C_%7BV_%7B0%7D%7D%20%7C%7D" alt="K_{\left.\right|_{V_{0}} |}">，以<img src="https://math.jianshu.com/math?formula=V_%7B0%7D" alt="V_{0}">为顶点集，以<img src="https://math.jianshu.com/math?formula=d(u,v)" alt="d(u,v)">为边<img src="https://math.jianshu.com/math?formula=uv" alt="uv">的权。<br> 4.求<img src="https://math.jianshu.com/math?formula=K_%7B%5Cleft%7CV_%7B0%7D%5Cright%7C%7D" alt="K_{\left|V_{0}\right|}">中的最小完美对集<img src="https://math.jianshu.com/math?formula=M" alt="M">。<br> 5.求<img src="https://math.jianshu.com/math?formula=M" alt="M">中边的端点之间的在<img src="https://math.jianshu.com/math?formula=G" alt="G">中的最短轨。<br> 6.在5中求得的每条最短轨上每条边添加一条等权的所谓“倍边”（即共端点共权的边）。<br> 7.在6中所得的图中求Euler回路即是邮递员问题的解。</p>
<h5 id="旅行商问题"><a href="#旅行商问题" class="headerlink" title="旅行商问题"></a>旅行商问题</h5><p>一名推销员准备前往若干城市推销产品，然后回到他的出发地。如何为他设计一条最短的旅行路线（从驻地出发，经过每个城市恰好一次，最后返回驻地）？这个问题称为旅行商问题。用图论的术语说，就是在一个赋权完全图中，找出一个有最小权的Hamilton 圈。称这种圈为最优圈。与最短路问题及连线问题相反，目前还<strong>没有求解旅行商问题的有效算法</strong>。所以希望有一个方法以获得相当好（但不一定最优）的解。</p>
<p>一个可行的方法是首先求一个Hamilton圈C，然后适当修改C得到具有更小权的另一个Hamilton圈，修改的方法叫做<strong>改良圈算法</strong>。</p>
<blockquote>
<p>设初始圈<img src="https://math.jianshu.com/math?formula=C=v_%7B1%7D%20v_%7B2%7D%20%5Ccdots%20v_%7Bn%7D%20v_%7B1%7D" alt="C=v_{1} v_{2} \cdots v_{n} v_{1}"><br>1.对于<img src="https://math.jianshu.com/math?formula=1%3Ci+1%3Cj%3Cn" alt="1&lt;i+1&lt;j&lt;n">，构造新的Hamilton图：<br><img src="https://math.jianshu.com/math?formula=C_%7By%7D=v_%7B1%7D%20v_%7B2%7D%20%5Ccdots%20v_%7Bi%7D%20v_%7Bj%7D%20v_%7Bj-1%7D%20v_%7Bj-2%7D%20%5Ccdots%20v_%7Bi+1%7D%20v_%7Bj+1%7D%20v_%7Bj+2%7D%20%5Ccdots%20v_%7Bn%7D%20v_%7B1%7D" alt="C_{y}=v_{1} v_{2} \cdots v_{i} v_{j} v_{j-1} v_{j-2} \cdots v_{i+1} v_{j+1} v_{j+2} \cdots v_{n} v_{1}"><br>它是由C中<strong>删去边<img src="https://math.jianshu.com/math?formula=v_%7Bi%7D%20v_%7Bi+1%7D" alt="v_{i} v_{i+1}">和<img src="https://math.jianshu.com/math?formula=v_%7Bj%7D%20v_%7Bj+1%7D" alt="v_{j} v_{j+1}">，添加边<img src="https://math.jianshu.com/math?formula=v_%7Bi%7D%20v_%7Bj%7D" alt="v_{i} v_{j}">和<img src="https://math.jianshu.com/math?formula=v_%7Bi+1%7D%20v_%7Bj+1%7D" alt="v_{i+1} v_{j+1}">得到的</strong>。若<img src="https://math.jianshu.com/math?formula=w%5Cleft(v_%7Bi%7D%20v_%7Bj%7D%5Cright)+w%5Cleft(v_%7Bi+1%7D%20v_%7Bj+1%7D%5Cright)%3Cw%5Cleft(v_%7Bi%7D%20v_%7Bi+1%7D%5Cright)+w%5Cleft(v_%7Bj%7D%20v_%7Bj+1%7D%5Cright)" alt="w\left(v_{i} v_{j}\right)+w\left(v_{i+1} v_{j+1}\right)&lt;w\left(v_{i} v_{i+1}\right)+w\left(v_{j} v_{j+1}\right)">则以<img src="https://math.jianshu.com/math?formula=C_%7Bi%20j%7D" alt="C_{i j}">代替<img src="https://math.jianshu.com/math?formula=C" alt="C">，<img src="https://math.jianshu.com/math?formula=C_%7Bi%20j%7D" alt="C_{i j}">称为圈<img src="https://math.jianshu.com/math?formula=C" alt="C">的改良圈。<br>2.转1，直到无法进行，停止。</p>
</blockquote>
<p>这个算法得到的结果几乎肯定不是最优的，为了得到更高的精确度，可以选择不同的初始圈，重复几次算法，以求得较准确的结果。</p>
<p>从北京（Pe）乘飞机到东京(T)、纽约(N)、墨西哥城(M)、伦敦(L)、巴黎(Pa)<br>五城市做旅游，每城市恰去一次再回北京，应如何安排旅游线，使旅程最短？各城市之<br>间的航线距离如表。</p>
<table>
<thead>
<tr>
<th></th>
<th>伦敦(L)</th>
<th>墨西哥(M)</th>
<th>纽约(N)</th>
<th>巴黎(Pa)</th>
<th>北京(Pe)</th>
<th>东京(T)</th>
</tr>
</thead>
<tbody><tr>
<td>伦敦(L)</td>
<td></td>
<td>56</td>
<td>35</td>
<td>21</td>
<td>51</td>
<td>60</td>
</tr>
<tr>
<td>墨西哥(M)</td>
<td>56</td>
<td></td>
<td>21</td>
<td>57</td>
<td>78</td>
<td>70</td>
</tr>
<tr>
<td>纽约(N)</td>
<td>35</td>
<td>21</td>
<td></td>
<td>36</td>
<td>68</td>
<td>68</td>
</tr>
<tr>
<td>巴黎(Pa)</td>
<td>21</td>
<td>57</td>
<td>36</td>
<td></td>
<td>51</td>
<td>61</td>
</tr>
<tr>
<td>北京(Pe)</td>
<td>51</td>
<td>78</td>
<td>68</td>
<td>51</td>
<td></td>
<td>13</td>
</tr>
<tr>
<td>东京(T)</td>
<td>60</td>
<td>70</td>
<td>68</td>
<td>61</td>
<td>13</td>
<td></td>
</tr>
</tbody></table>
<p>利用改良圈算法编写Matlab程序如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span></span></span><br><span class="line">clc,clear</span><br><span class="line"><span class="keyword">global</span> a</span><br><span class="line">a=<span class="built_in">zeros</span>(<span class="number">6</span>);</span><br><span class="line">a(<span class="number">1</span>,<span class="number">2</span>)=<span class="number">56</span>;a(<span class="number">1</span>,<span class="number">3</span>)=<span class="number">35</span>;a(<span class="number">1</span>,<span class="number">4</span>)=<span class="number">21</span>;a(<span class="number">1</span>,<span class="number">5</span>)=<span class="number">51</span>;a(<span class="number">1</span>,<span class="number">6</span>)=<span class="number">60</span>;</span><br><span class="line">a(<span class="number">2</span>,<span class="number">3</span>)=<span class="number">21</span>;a(<span class="number">2</span>,<span class="number">4</span>)=<span class="number">57</span>;a(<span class="number">2</span>,<span class="number">5</span>)=<span class="number">78</span>;a(<span class="number">2</span>,<span class="number">6</span>)=<span class="number">70</span>;</span><br><span class="line">a(<span class="number">3</span>,<span class="number">4</span>)=<span class="number">36</span>;a(<span class="number">3</span>,<span class="number">5</span>)=<span class="number">68</span>;a(<span class="number">3</span>,<span class="number">6</span>)=<span class="number">68</span>; a(<span class="number">4</span>,<span class="number">5</span>)=<span class="number">51</span>;a(<span class="number">4</span>,<span class="number">6</span>)=<span class="number">61</span>;</span><br><span class="line">a(<span class="number">5</span>,<span class="number">6</span>)=<span class="number">13</span>; a=a+a&#x27;; L=<span class="built_in">size</span>(a,<span class="number">1</span>);</span><br><span class="line">c1=[<span class="number">5</span> <span class="number">1</span>:<span class="number">4</span> <span class="number">6</span>];</span><br><span class="line">[circle,long]=modifycircle(c1,L);</span><br><span class="line">c2=[<span class="number">5</span> <span class="number">6</span> <span class="number">1</span>:<span class="number">4</span>];<span class="comment">%改变初始圈，该算法的最后一个顶点不动</span></span><br><span class="line">[circle2,long2]=modifycircle(c2,L);</span><br><span class="line"><span class="keyword">if</span> long2&lt;long</span><br><span class="line">    long=long2;</span><br><span class="line">    circle=circle2;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">circle,long</span><br><span class="line"><span class="comment">%*******************************************</span></span><br><span class="line"><span class="comment">%修改圈的子函数</span></span><br><span class="line"><span class="comment">%*******************************************</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[circle,long]</span>=<span class="title">modifycircle</span><span class="params">(c1,L)</span>;</span></span><br><span class="line"><span class="keyword">global</span> a</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> flag&gt;<span class="number">0</span></span><br><span class="line">    flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> m=<span class="number">1</span>:L<span class="number">-3</span></span><br><span class="line">        <span class="keyword">for</span> n=m+<span class="number">2</span>:L<span class="number">-1</span></span><br><span class="line">            <span class="keyword">if</span> a(c1(m),c1(n))+a(c1(m+<span class="number">1</span>),c1(n+<span class="number">1</span>))&lt;...</span><br><span class="line">            a(c1(m),c1(m+<span class="number">1</span>))+a(c1(n),c1(n+<span class="number">1</span>))</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                c1(m+<span class="number">1</span>:n)=c1(n:<span class="number">-1</span>:m+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">long=a(c1(<span class="number">1</span>),c1(L));</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:L<span class="number">-1</span></span><br><span class="line">    long=long+a(c1(<span class="built_in">i</span>),c1(<span class="built_in">i</span>+<span class="number">1</span>));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">circle=c1;</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/08/03/%E7%81%B0%E8%89%B2%E9%A2%84%E6%B5%8B%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="灰色预测模型"><a href="#灰色预测模型" class="headerlink" title="灰色预测模型"></a>灰色预测模型</h3><p>灰色预测模型（Gray Forecast Model）是一种基于小样本数据进行预测的模型。灰色预测模型所需建模信息少，运算方便，建模精度高，在各种预测领域都有着广泛的应用，是处理小样本预测问题的有效工具。</p>
<ol start="2">
<li>灰色模型介绍<br>灰 色 预 测 模 型 \color{red}灰色预测模型灰色预测模型（Gray Forecast Model）是通过少量的、不完全的信息，建立数学模型并做出预测的一种预测方法。当我们应用运筹学的思想方法解决实际问题，制定发展战略和政策、进行重大问题的决策时，都必须对未来进行科学的预测。预测是根据客观事物的过去和现在的发展规律，借助于科学的方法对其未来的发展趋势和状况进行描述和分析，并形成科学的假设和判断。<br>灰色系统理论是研究解决灰色系统分析、建模、预测、决策和控制的理论。灰色预测是对灰色系统所做的预测。目前常用的一些预测方法（如回归分析等），需要较大的样本.若样本较小，常造成较大误差，使预测目标失效。灰色预测模型所需建模信息少，运算方便，建模精度高，在各种预测领域都有着广泛的应用，是处理小样本预测问题的有效工具。<br>灰色系统理论是由华中理工大学邓聚龙教授于1982年提出并加以发展的。二十几年来，引起了不少国内外学者的关注，得到了长足的发展。目前，在我国已经成为社会、经济、科学技术在等诸多领域进行预测、决策、评估、规划控制、系统分析与建模的重要方法之一。特别是它对时间序列短、统计数据少、信息不完全系统的分析与建模，具有独特的功效，因此得到了广泛的应用。<br>灰色系统是黑箱概念的一种推广。我们把既含有已知信息又含有未知信息的系统称为灰色系统。作为两个极端，我们将称信息完全未确定的系统为黑色系统；称信息完全确定的系统为白色系统。区别白色系统与黑色系统的重要标志是系统各因素之间是否具有确定的关系。</li>
<li>精度检验等级参照表<br>模型精度等级	均方差比值C<br>1级（好）	C&lt;&#x3D;0.35<br>2级（合格）	0.35&lt;C&lt;&#x3D;0.5<br>3级（勉强）	0.5&lt;C&lt;&#x3D;0.65<br>4级（不合格）	0.65&lt;C</li>
</ol>
<p>代码为：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[]</span>=<span class="title">greymodel</span><span class="params">(y)</span></span></span><br><span class="line"><span class="comment">% 本程序主要用来计算根据灰色理论建立的模型的预测值。</span></span><br><span class="line"><span class="comment">% 应用的数学模型是 GM(1,1)。</span></span><br><span class="line"><span class="comment">% 原始数据的处理方法是一次累加法。</span></span><br><span class="line">y=input(<span class="string">&#x27;请输入数据 &#x27;</span>);</span><br><span class="line">n=<span class="built_in">length</span>(y);</span><br><span class="line">yy=<span class="built_in">ones</span>(n,<span class="number">1</span>);</span><br><span class="line">yy(<span class="number">1</span>)=y(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:n</span><br><span class="line">    yy(<span class="built_in">i</span>)=yy(<span class="built_in">i</span><span class="number">-1</span>)+y(<span class="built_in">i</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">B=<span class="built_in">ones</span>(n<span class="number">-1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:(n<span class="number">-1</span>)</span><br><span class="line">    B(<span class="built_in">i</span>,<span class="number">1</span>)=-(yy(<span class="built_in">i</span>)+yy(<span class="built_in">i</span>+<span class="number">1</span>))/<span class="number">2</span>;</span><br><span class="line">    B(<span class="built_in">i</span>,<span class="number">2</span>)=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">BT=B&#x27;;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:n<span class="number">-1</span></span><br><span class="line">    YN(<span class="built_in">j</span>)=y(<span class="built_in">j</span>+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">YN=YN&#x27;;</span><br><span class="line">A=inv(BT*B)*BT*YN;</span><br><span class="line">a=A(<span class="number">1</span>);</span><br><span class="line">u=A(<span class="number">2</span>);</span><br><span class="line">t=u/a;</span><br><span class="line"><span class="built_in">i</span>=<span class="number">1</span>:n+<span class="number">2</span>;</span><br><span class="line">yys(<span class="built_in">i</span>+<span class="number">1</span>)=(y(<span class="number">1</span>)-t).*<span class="built_in">exp</span>(-a.*<span class="built_in">i</span>)+t;</span><br><span class="line">yys(<span class="number">1</span>)=y(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">j</span>=n+<span class="number">2</span>:<span class="number">-1</span>:<span class="number">2</span></span><br><span class="line">    ys(<span class="built_in">j</span>)=yys(<span class="built_in">j</span>)-yys(<span class="built_in">j</span><span class="number">-1</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">x=<span class="number">1</span>:n;</span><br><span class="line">xs=<span class="number">2</span>:n+<span class="number">2</span>;</span><br><span class="line">yn=ys(<span class="number">2</span>:n+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">&#x27;^r&#x27;</span>,xs,yn,<span class="string">&#x27;*-b&#x27;</span>);</span><br><span class="line">det=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">sum1=<span class="number">0</span>;</span><br><span class="line">sumpe=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n</span><br><span class="line">    sumpe=sumpe+y(<span class="built_in">i</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">pe=sumpe/n;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:n;</span><br><span class="line">    sum1=sum1+(y(<span class="built_in">i</span>)-pe).^<span class="number">2</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">s1=<span class="built_in">sqrt</span>(sum1/n);</span><br><span class="line">sumce=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:n</span><br><span class="line">    sumce=sumce+(y(<span class="built_in">i</span>)-yn(<span class="built_in">i</span>));</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">ce=sumce/(n<span class="number">-1</span>);</span><br><span class="line">sum2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:n;</span><br><span class="line">    sum2=sum2+(y(<span class="built_in">i</span>)-yn(<span class="built_in">i</span>)-ce).^<span class="number">2</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">s2=<span class="built_in">sqrt</span>(sum2/(n<span class="number">-1</span>));</span><br><span class="line">c=(s2)/(s1);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;后验差比值为：&#x27;</span>,num2str(c)]);</span><br><span class="line"><span class="keyword">if</span> c&lt;<span class="number">0.35</span></span><br><span class="line">    <span class="built_in">disp</span>(<span class="string">&#x27;系统预测精度好&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> c&lt;<span class="number">0.5</span></span><br><span class="line">        <span class="built_in">disp</span>(<span class="string">&#x27;系统预测精度合格&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> c&lt;<span class="number">0.65</span></span><br><span class="line">            <span class="built_in">disp</span>(<span class="string">&#x27;系统预测精度勉强&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">disp</span>(<span class="string">&#x27;系统预测精度不合格&#x27;</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;下个拟合值为 &#x27;</span>,num2str(ys(n+<span class="number">1</span>))]);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;再下个拟合值为&#x27;</span>,num2str(ys(n+<span class="number">2</span>))]);</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>题目：</p>
<p>现在有2000年-2010年某市总人口，现在用灰色方程模型来做。</p>
<img src="https://mmbiz.qpic.cn/mmbiz_png/bwomSosbSNicrlBlpcaTbQA02eWdYCPvLFOWvTAZOwxFibFDaceAC0RGhBECfehfW16v0df74yViaPWib9Jrqj2y5w/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom:80%;" />

<p>第一步，对原始数据（X^(0) ）做一次累加生成处理，得到一次累加序列X^(1) </p>
<img src="https://mmbiz.qpic.cn/mmbiz_png/bwomSosbSNicrlBlpcaTbQA02eWdYCPvLvLbVEN8ltaWXe401ElncPFDgBxRF00XIvUnI53xf5YFgBJ7xafCOGw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom:80%;" />

<img src="https://mmbiz.qpic.cn/mmbiz_png/bwomSosbSNicrlBlpcaTbQA02eWdYCPvLcMCabyJA35iarKYM9icc75TymdzWRKN57uIA148GGRruDWtj17Cic1QqQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom:80%;" />

<p>第一个方程中，X^(0)  (1)代表原始数据的第一个数1013.4，k代表时间，从1开始，即2000年为1，依次累加。里面未知参数为a和u，也就是需要求这两个的值，下面就是求解的拆分步骤。</p>
<img src="https://mmbiz.qpic.cn/mmbiz_png/bwomSosbSNicrlBlpcaTbQA02eWdYCPvLj05ulib3xnzKDnpwt00s6r8iayWRrZWMf2Cw4QBVXTMCkjzM1NQBdsEw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom:80%;" />

<img src="https://mmbiz.qpic.cn/mmbiz_png/bwomSosbSNicrlBlpcaTbQA02eWdYCPvL1BEtjuGIEMQibgicB7bia3CIs495Nc1zDbNL1icMtyUibMRVLgWA9KbZFbA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom:80%;" />

<img src="https://mmbiz.qpic.cn/mmbiz_png/bwomSosbSNibTrETpZr4bws6iaibQHaUP9ibLWG5s7Hw892fzYibjjb42fHWXW6QHkJVNh7diaxMNicib6vxj4sbNoosHw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom:80%;" />

<p>所以，将求出来的数都代入这个公式</p>
<img src="https://mmbiz.qpic.cn/mmbiz_png/bwomSosbSNicrlBlpcaTbQA02eWdYCPvLFOWvTAZOwxFibFDaceAC0RGhBECfehfW16v0df74yViaPWib9Jrqj2y5w/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom:80%;" />

<p>得到方程</p>
<img src="https://mmbiz.qpic.cn/mmbiz_png/bwomSosbSNicrlBlpcaTbQA02eWdYCPvLNJ3zeq9wXp7eRAicicVcAwNwWygeE7tsM42vt15BKdpEB3NTfNkF71zw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom:80%;" />

<img src="https://mmbiz.qpic.cn/mmbiz_png/bwomSosbSNicrlBlpcaTbQA02eWdYCPvLlW3fs9x1tYZexzPH97Pq0LJ0CAmkUsfRjfJte23LVH5V2xBngcSOqw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom:80%;" />

<p>在EXCLE里再进行计算，记得按shift+4，u&#x2F;a等一些数是位置固定的。</p>
<img src="https://mmbiz.qpic.cn/mmbiz_png/bwomSosbSNicrlBlpcaTbQA02eWdYCPvLoCk8uT4Iz3cpk8w4ppStr6gActGZY4ww7r0u5U9uxMiaAcicgsr0PvhA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom:80%;" />

<p>这个预测的值是对累加值的预测，需要还原到原始数据的预测值，就是后一个数减去前一个数。第一个数保持不变。这样算出来可以看到从0到10跟2000年至2010年的常住人口数基本上差距大不，还算可以。</p>
<img src="https://mmbiz.qpic.cn/mmbiz_png/bwomSosbSNicrlBlpcaTbQA02eWdYCPvLc5MYLF6z0ujNlcFkONPNBia8icrXia2Et93n6iaiaIXyTibDeSX2EJO1RMsA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom:80%;" />]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/08/03/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/</url>
    <content><![CDATA[<h3 id="特征提取即，从多个数据中提取最能预测因变量的少数几个变量。"><a href="#特征提取即，从多个数据中提取最能预测因变量的少数几个变量。" class="headerlink" title="特征提取即，从多个数据中提取最能预测因变量的少数几个变量。"></a>特征提取即，从多个数据中提取最能预测因变量的少数几个变量。</h3><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li>线性相关：pearson、 spearman、 kendall</li>
<li>非线性相关：距离协方差、灰相关</li>
<li>其他特征选择方法：RFE（递归特征消除）、PCA（主成分分析）</li>
</ul>
<h5 id="距离协方差编写："><a href="#距离协方差编写：" class="headerlink" title="距离协方差编写："></a>距离协方差编写：</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.spatial.distance <span class="keyword">import</span> pdist, squareform</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">distcorr</span>(<span class="params">X, Y</span>):</span><br><span class="line">    X = np.atleast_1d(X)</span><br><span class="line">    Y = np.atleast_1d(Y)</span><br><span class="line">    <span class="keyword">if</span> np.prod(X.shape) == <span class="built_in">len</span>(X):</span><br><span class="line">        X = X[:, <span class="literal">None</span>]</span><br><span class="line">    <span class="keyword">if</span> np.prod(Y.shape) == <span class="built_in">len</span>(Y):</span><br><span class="line">        Y = Y[:, <span class="literal">None</span>]</span><br><span class="line">    X = np.atleast_2d(X)</span><br><span class="line">    Y = np.atleast_2d(Y)</span><br><span class="line">    n = X.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> Y.shape[<span class="number">0</span>] != X.shape[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;Number of samples must match&#x27;</span>)</span><br><span class="line">    a = squareform(pdist(X))</span><br><span class="line">    b = squareform(pdist(Y))</span><br><span class="line">    A = a - a.mean(axis=<span class="number">0</span>)[<span class="literal">None</span>, :] - a.mean(axis=<span class="number">1</span>)[:, <span class="literal">None</span>] + a.mean()</span><br><span class="line">    B = b - b.mean(axis=<span class="number">0</span>)[<span class="literal">None</span>, :] - b.mean(axis=<span class="number">1</span>)[:, <span class="literal">None</span>] + b.mean()</span><br><span class="line">    </span><br><span class="line">    dcov2_xy = (A * B).<span class="built_in">sum</span>() / <span class="built_in">float</span>(n * n)</span><br><span class="line">    dcov2_xx = (A * A).<span class="built_in">sum</span>() / <span class="built_in">float</span>(n * n)</span><br><span class="line">    dcov2_yy = (B * B).<span class="built_in">sum</span>() / <span class="built_in">float</span>(n * n)</span><br><span class="line">    dcor = np.sqrt(dcov2_xy) / np.sqrt(np.sqrt(dcov2_xx) * np.sqrt(dcov2_yy))</span><br><span class="line">    <span class="keyword">return</span> dcor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面代码可以将相关转为DataFrame，便于进一步的分析</span></span><br><span class="line">dcorr = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> names:</span><br><span class="line">    dcorr.append([distcorr(X.loc[i, :].to_list(), Y), i]) </span><br><span class="line"></span><br><span class="line">ans_dcorr = pd.DataFrame(columns=[<span class="string">&#x27;pIC50&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dcorr:</span><br><span class="line">    ans_dcorr.loc[i[<span class="number">1</span>]] = i[<span class="number">0</span>]</span><br><span class="line">ans_dcorr</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="灰关联"><a href="#灰关联" class="headerlink" title="灰关联"></a>灰关联</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GRA_ONE</span>(<span class="params">DataFrame,m=<span class="number">0</span></span>):</span><br><span class="line">    gray= DataFrame</span><br><span class="line">    <span class="comment">#读取为df格式</span></span><br><span class="line">    gray=(gray - gray.<span class="built_in">min</span>()) / (gray.<span class="built_in">max</span>() - gray.<span class="built_in">min</span>())</span><br><span class="line">    <span class="comment">#标准化</span></span><br><span class="line">    std=gray.iloc[:,m]<span class="comment">#为标准要素</span></span><br><span class="line">    ce=gray.iloc[:,<span class="number">0</span>:]<span class="comment">#为比较要素</span></span><br><span class="line">    n=ce.shape[<span class="number">0</span>]</span><br><span class="line">    m=ce.shape[<span class="number">1</span>]<span class="comment">#计算行列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#与标准要素比较，相减</span></span><br><span class="line">    a=zeros([m,n])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            a[i,j]=<span class="built_in">abs</span>(ce.iloc[j,i]-std[j])</span><br><span class="line"></span><br><span class="line">    <span class="comment">#取出矩阵中最大值与最小值</span></span><br><span class="line">    c=amax(a)</span><br><span class="line">    d=amin(a)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#计算值</span></span><br><span class="line">    result=zeros([m,n])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            result[i,j]=(d+<span class="number">0.5</span>*c)/(a[i,j]+<span class="number">0.5</span>*c)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#求均值，得到灰色关联值</span></span><br><span class="line">    result2=zeros(m)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            result2[i]=mean(result[i,:])</span><br><span class="line">    RT=pd.DataFrame(result2)</span><br><span class="line">    <span class="keyword">return</span> RT</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GRA</span>(<span class="params">DataFrame</span>):</span><br><span class="line">    list_columns = [<span class="built_in">str</span>(s) <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(DataFrame.columns)) <span class="keyword">if</span> s <span class="keyword">not</span> <span class="keyword">in</span> [<span class="literal">None</span>]]</span><br><span class="line">    df_local = pd.DataFrame(columns=list_columns)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(DataFrame.columns)):</span><br><span class="line">        df_local.iloc[:,i] = GRA_ONE(DataFrame,m=i)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> df_local</span><br><span class="line"></span><br><span class="line">gray = GRA_ONE(dataframe)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="RFE"><a href="#RFE" class="headerlink" title="RFE"></a>RFE</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> RFECV</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression, Ridge, Lasso</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cal_RFE</span>(<span class="params">X, Y, names</span>):</span><br><span class="line">    X = X.T</span><br><span class="line"> <span class="comment"># use linear regression as the model</span></span><br><span class="line">    lr = LinearRegression()</span><br><span class="line"> <span class="comment"># rank all features, i.e continue the elimination until the last one</span></span><br><span class="line">    rfe = RFECV(lr, step=<span class="number">1</span>, cv=<span class="number">5</span>)</span><br><span class="line">    rfe.fit(X, Y)</span><br><span class="line">    res_lr = <span class="built_in">list</span>(<span class="built_in">zip</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">round</span>(x, <span class="number">4</span>), rfe.ranking_), names))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Features sorted by their rank:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(res_lr)</span><br><span class="line"> <span class="comment"># use lasso as the model</span></span><br><span class="line">    lr = Lasso()</span><br><span class="line"> <span class="comment"># # rank all features, i.e continue the elimination until the last one</span></span><br><span class="line">    rfe = RFECV(lr, step=<span class="number">1</span>, cv=<span class="number">5</span>)</span><br><span class="line">    rfe.fit(X, Y)</span><br><span class="line">    res_la = <span class="built_in">list</span>(<span class="built_in">zip</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">round</span>(x, <span class="number">4</span>), rfe.ranking_), names))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Features sorted by their rank:&quot;</span>)</span><br><span class="line"><span class="comment">#     print(res_la)</span></span><br><span class="line">    <span class="keyword">return</span> res_lr ,res_la</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Split the data into input and target</span></span><br><span class="line">X = md_ea_dropY.T.copy()</span><br><span class="line">Y = (md_ea_train.loc[:, <span class="string">&#x27;pIC50&#x27;</span>] * <span class="number">1000</span>).astype(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">res_lr, res_la = cal_RFE(X, Y, md_ea_dropY.columns.values.tolist())</span><br><span class="line"></span><br><span class="line">ans_res_lr = pd.DataFrame(columns=[<span class="string">&#x27;pIC50&#x27;</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res_lr:</span><br><span class="line">    ans_res_lr.loc[i[<span class="number">1</span>]] = i[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">ans_res_la = pd.DataFrame(columns=[<span class="string">&#x27;pIC50&#x27;</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res_la:</span><br><span class="line">    ans_res_la.loc[i[<span class="number">1</span>]] = i[<span class="number">0</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="PCA"><a href="#PCA" class="headerlink" title="PCA"></a>PCA</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将数据写入 excel 文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_write_excel</span>(<span class="params">data, filename, writer=<span class="literal">None</span></span>):</span><br><span class="line">    data = pd.DataFrame(data)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> writer:</span><br><span class="line">        writer = pd.ExcelWriter(filename + <span class="string">&#x27;1.xlsx&#x27;</span>)</span><br><span class="line">        data.to_excel(writer, float_format=<span class="string">&#x27;%.5f&#x27;</span>, sheet_name=filename)</span><br><span class="line">        writer.save()</span><br><span class="line">        writer.close()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data.to_excel(writer, float_format=<span class="string">&#x27;%.5f&#x27;</span>, sheet_name=filename)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cal_PCA</span>(<span class="params">X</span>):</span><br><span class="line">     <span class="comment"># 20个主成分</span></span><br><span class="line">    pca = PCA(n_components=<span class="number">20</span>)</span><br><span class="line">     <span class="comment"># 降维后的数据</span></span><br><span class="line">    data_low = pca.fit_transform(X)</span><br><span class="line">     <span class="comment"># 降维后近似恢复的数据</span></span><br><span class="line">    data_restore = pca.inverse_transform(data_low)</span><br><span class="line">    writer = pd.ExcelWriter(<span class="string">r&#x27;data\pca1.xlsx&#x27;</span>)</span><br><span class="line">    data_write_excel(data_low, <span class="string">&#x27;low&#x27;</span>, writer=writer)</span><br><span class="line">    data_write_excel(data_restore, <span class="string">&#x27;restore&#x27;</span>, writer=writer)</span><br><span class="line">     <span class="comment"># 主成分贡献率</span></span><br><span class="line">    data_write_excel(pca.explained_variance_ratio_, <span class="string">&#x27;ratio&#x27;</span>, writer=writer)</span><br><span class="line">     <span class="comment"># 主成分方差</span></span><br><span class="line">    data_write_excel(pca.explained_variance_, <span class="string">&#x27;variance&#x27;</span>, writer=writer)</span><br><span class="line">     <span class="comment"># 主成分在各个变量的负载</span></span><br><span class="line">    data_write_excel(pca.components_.T, <span class="string">&#x27;component&#x27;</span>, writer=writer)</span><br><span class="line">     <span class="comment"># 主成分个数</span></span><br><span class="line">    <span class="built_in">print</span>(pca.n_components_, <span class="string">&#x27; n_components&#x27;</span>)</span><br><span class="line">    writer.save()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scale</span>(<span class="params">data</span>):</span><br><span class="line">    minmax = MinMaxScaler()</span><br><span class="line">    data = minmax.fit_transform(data)</span><br><span class="line">    <span class="comment"># print(input_reframed)</span></span><br><span class="line">    <span class="built_in">print</span>(minmax.scale_)</span><br><span class="line">    <span class="built_in">print</span>(minmax.min_)</span><br><span class="line">    <span class="keyword">return</span> data, minmax.scale_[-<span class="number">1</span>], minmax.min_[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">X = md_ea_dropY.copy()</span><br><span class="line">cal_PCA(X)</span><br><span class="line"></span><br><span class="line">comp = pd.read_excel(<span class="string">r&#x27;data\pca1.xlsx&#x27;</span>, sheet_name=<span class="string">&quot;component&quot;</span>)</span><br><span class="line">comp1, inscale_, inmin_ = scale(comp.<span class="built_in">abs</span>())</span><br><span class="line">ratio = pd.read_excel(<span class="string">r&#x27;data\pca1.xlsx&#x27;</span>, sheet_name=<span class="string">&quot;ratio&quot;</span>).iloc[:, <span class="number">1</span>].to_numpy()</span><br><span class="line">pca1 = np.<span class="built_in">abs</span>(comp1[..., <span class="number">1</span>]) * ratio[<span class="number">0</span>] + \</span><br><span class="line">np.<span class="built_in">abs</span>(comp1[..., <span class="number">2</span>]) * ratio[<span class="number">1</span>] + \</span><br><span class="line">np.<span class="built_in">abs</span>(comp1[..., <span class="number">3</span>]) * ratio[<span class="number">2</span>] + \</span><br><span class="line">np.<span class="built_in">abs</span>(comp1[..., <span class="number">4</span>]) * ratio[<span class="number">3</span>] + \</span><br><span class="line">np.<span class="built_in">abs</span>(comp1[..., <span class="number">5</span>]) * ratio[<span class="number">4</span>] + \</span><br><span class="line">np.<span class="built_in">abs</span>(comp1[..., <span class="number">6</span>]) * ratio[<span class="number">5</span>] + \</span><br><span class="line">np.<span class="built_in">abs</span>(comp1[..., <span class="number">7</span>]) * ratio[<span class="number">6</span>] + \</span><br><span class="line">np.<span class="built_in">abs</span>(comp1[..., <span class="number">8</span>]) * ratio[<span class="number">7</span>] + \</span><br><span class="line">np.<span class="built_in">abs</span>(comp1[..., <span class="number">9</span>]) * ratio[<span class="number">8</span>] + \</span><br><span class="line">np.<span class="built_in">abs</span>(comp1[..., <span class="number">10</span>]) * ratio[<span class="number">9</span>] + \</span><br><span class="line">np.<span class="built_in">abs</span>(comp1[..., <span class="number">11</span>]) * ratio[<span class="number">10</span>] + \</span><br><span class="line">np.<span class="built_in">abs</span>(comp1[..., <span class="number">12</span>]) * ratio[<span class="number">11</span>] + \</span><br><span class="line">np.<span class="built_in">abs</span>(comp1[..., <span class="number">13</span>]) * ratio[<span class="number">12</span>] + \</span><br><span class="line">np.<span class="built_in">abs</span>(comp1[..., <span class="number">14</span>]) * ratio[<span class="number">13</span>] + \</span><br><span class="line">np.<span class="built_in">abs</span>(comp1[..., <span class="number">15</span>]) * ratio[<span class="number">14</span>] + \</span><br><span class="line">np.<span class="built_in">abs</span>(comp1[..., <span class="number">16</span>]) * ratio[<span class="number">15</span>] + \</span><br><span class="line">np.<span class="built_in">abs</span>(comp1[..., <span class="number">17</span>]) * ratio[<span class="number">16</span>] + \</span><br><span class="line">np.<span class="built_in">abs</span>(comp1[..., <span class="number">18</span>]) * ratio[<span class="number">17</span>] + \</span><br><span class="line">np.<span class="built_in">abs</span>(comp1[..., <span class="number">19</span>]) * ratio[<span class="number">18</span>] + \</span><br><span class="line">np.<span class="built_in">abs</span>(comp1[..., <span class="number">20</span>]) * ratio[<span class="number">19</span>]</span><br><span class="line"></span><br><span class="line">pca11, inscale_, inmin_ = scale(pca1.reshape(-<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿到不同变量的重要程度</span></span><br><span class="line">ans_pca = pd.DataFrame(columns=[<span class="string">&#x27;pIC50&#x27;</span>])</span><br><span class="line">names_pca = (md_ea_dropY.columns.to_list())</span><br><span class="line">             </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(pca11.shape[<span class="number">0</span>]):</span><br><span class="line">    ans_pca.loc[names_pca[i]] = pca11[i]</span><br><span class="line">    </span><br><span class="line">ans_pca</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>第一次组会</title>
    <url>/2022/12/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%BB%84%E4%BC%9A/</url>
    <content><![CDATA[<h1 id="呜呜呜呜呜呜呜呜呜呜呜"><a href="#呜呜呜呜呜呜呜呜呜呜呜" class="headerlink" title="呜呜呜呜呜呜呜呜呜呜呜"></a>呜呜呜呜呜呜呜呜呜呜呜</h1><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><h5 id="level1："><a href="#level1：" class="headerlink" title="level1："></a>level1：</h5><p>第一眼威尔逊定理，第二眼，草，不是，给出了p，则有：<br>$$<br>e &#x3D; 1*(p-210)!mod p<br>$$<br>则有设第二个返回值为x，<br>$$<br>x &#x3D; (m^e)mod p\<br>m &#x3D; x*e^(-1)mod p<br>$$<br>e为一个小于p的数，则有e一定和p互素，所以存在关于p的唯一逆元</p>
<p>已知e，则求出m</p>
<h5 id="level2："><a href="#level2：" class="headerlink" title="level2："></a>level2：</h5><p>$$<br>x &#x3D; (127<em>m+555)modp\<br>(x-555) &#x3D; (127</em>m)mod p\<br>m &#x3D; (x-555)*(127^(-1))mod p<br>$$</p>
<p>还需要判断一下127是否与p互素，显然互素。</p>
<h5 id="level3："><a href="#level3：" class="headerlink" title="level3："></a>level3：</h5><p>crt-rsa</p>
<p>已知<br>$$<br>m1 &#x3D; m\ mod \ p\<br> m2&#x3D; m\ mod\ q<br>$$<br>则由于p，q互素，则存在唯一一个m满足上述方程<br>$$<br>m &#x3D; inv(q)*q <em>m1+inv(p)<em>p</em>m2\ mod \ （p</em>q)<br>$$<br>其中inv(p)为p关于q的逆，inv(q)同理。</p>
<h5 id="level4："><a href="#level4：" class="headerlink" title="level4："></a>level4：</h5><p>解方程？还妹看懂&#x2F;&#x2F;(发现这是数论中二次同余式的知识，还没学到，直接进行临时补习，先去补习了)</p>
<p>$$<br>x &#x3D; (m^2 +3<em>m+5)\ mod\ p\<br>3 &#x3D; p mod4\<br>p &#x3D; 4</em>k+3\<br>(x-11&#x2F;4) &#x3D; (m+3&#x2F;2)^2\ mod \ p\<br>(4x-11) &#x3D; (2m+3)^2\ mod \ p\<br>$$</p>
<p> 此时 p为已知，x为已知，下面进行解方程</p>
<p>设x &#x3D; 2m+3，n &#x3D; 4x-11<br>$$<br>n &#x3D; x^2\ mod \ p\<br>x^2 - n &#x3D; mp\<br>(x^2-n)^k &#x3D; (mp)^k\<br>设w^2 &#x3D; n\<br>则有(x+w)^k(x-w)^k &#x3D; (mp)^k\<br>进行二项式展开\<br>\ \  \ \ \ \ \ \ \ \ \ \ \ (x+w)^k  &#x3D; …\ &#x3D; t+uw(打不出来呜呜呜)\<br>(x-w)^k &#x3D; …\ &#x3D; t-uw\<br>$$<br>所以原式等价于<br>$$<br>t^2 - u^2n &#x3D; (mp)^k\<br>t^2 - u^2n &#x3D; 0 \ mod \ p\<br>t^2 &#x3D; u^2n\ mod \ p\<br>由于gcd(p,u) &#x3D; 1(证明过程好长)\<br>n &#x3D; t^2*inv(u^2) \ mod \ p\<br>$$<br>在本题中k &#x3D; 1带入</p>
<p>最后得到<br>$$<br>x^2 &#x3D; t^2inv(u)^2\ mod \ p\<br>x1 &#x3D; t*inv(u)\ mod\ p\<br>x2 &#x3D; (p-x1)\ mod \ p<br>\<br>$$<br>代码(偷懒只写了k &#x3D; 1 的代码，其实口算就能算出来，有时间一定补完整的)</p>
<p>（二次剩余的证明好难好难，数论书的证明过程看不懂，，，，，，）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime()</span><br><span class="line">x = <span class="number">2</span>*m+<span class="number">3</span></span><br><span class="line">n  = <span class="number">4</span>*x - <span class="number">11</span></span><br><span class="line"></span><br><span class="line">w = <span class="built_in">pow</span>(n,<span class="number">1</span>/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">k = <span class="number">1</span></span><br><span class="line">t = x</span><br><span class="line">u = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">inv_u = inverse(u,p)</span><br><span class="line">x1 = t*inv_u%p</span><br><span class="line">x2 = (p-x1)%p</span><br><span class="line"></span><br><span class="line">m = (x-<span class="number">3</span>)/<span class="number">2</span></span><br></pre></td></tr></table></figure>



<h2 id="第二题：Rabin加解密"><a href="#第二题：Rabin加解密" class="headerlink" title="第二题：Rabin加解密"></a>第二题：Rabin加解密</h2><p>选取两个大的不同素数p和q，两个都同余3模4</p>
<p>计算n &#x3D; P*q</p>
<p>p,q作为私钥，n作为公钥</p>
<h5 id="加密过程：对于明文m-m-lt-n-和密文c，c-x3D-m-2-mod-n"><a href="#加密过程：对于明文m-m-lt-n-和密文c，c-x3D-m-2-mod-n" class="headerlink" title="加密过程：对于明文m(m&lt;n)和密文c，c &#x3D; m^2 mod n"></a>加密过程：对于明文m(m&lt;n)和密文c，c &#x3D; m^2 mod n</h5><h5 id="解密过程"><a href="#解密过程" class="headerlink" title="解密过程:"></a>解密过程:</h5><h5 id="lt-1-gt-根据费马小定理计算m在模p和q时的平方根（有时间再来补上费马小定理对于此方程的证明过程）"><a href="#lt-1-gt-根据费马小定理计算m在模p和q时的平方根（有时间再来补上费马小定理对于此方程的证明过程）" class="headerlink" title="&lt;1&gt;根据费马小定理计算m在模p和q时的平方根（有时间再来补上费马小定理对于此方程的证明过程）"></a>&lt;1&gt;根据费马小定理计算m在模p和q时的平方根（有时间再来补上费马小定理对于此方程的证明过程）</h5><p>p &#x3D; 4*k +1, 4|p+1</p>
<p>对于c&#x3D;m^2 mod p 来说，c是模p的二次剩余</p>
<p>即有：c^((p-1)&#x2F;2) &#x3D; 1 mod p</p>
<p>带入有<br>$$<br>m^2 &#x3D; c(mod p)&#x3D;c^((p-1)&#x2F;2)*c (mod p)-c((p+1)&#x2F;2)modp<br>$$<br>则对于上述方程开方得到<br>$$<br>m1 &#x3D; c((p+1)&#x2F;4)mod \<br>m2 &#x3D; (p-c^((p+1)&#x2F;4))mod p\<br>$$<br>对于q同理</p>
<p>所以我们得到下述方程<br>$$<br>m1 &#x3D; c^(1&#x2F;4 \ * (p+1)) \ mod\ p\<br>m1 &#x3D; c(1&#x2F;4\ *(q+1))\ mod q<br>$$</p>
<p>从m1,m2以及m3,m4中分别选出一个方程，共有4种情况分别用中国剩余定理，则可得到四个关于m的解</p>
<p>here is 代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c1=<span class="built_in">pow</span>(c,(p+<span class="number">1</span>)/<span class="number">4</span>,p)</span><br><span class="line">c2=<span class="built_in">pow</span>(c,(q+<span class="number">1</span>)/<span class="number">4</span>,q)</span><br><span class="line">c3=p-c1</span><br><span class="line">c4=q-c2</span><br><span class="line">t1=gmpy2.invert(p,q)<span class="comment">#p的模q逆元</span></span><br><span class="line">t2=gmpy2.invert(q,p)<span class="comment">#q的模p逆元</span></span><br><span class="line"></span><br><span class="line">m1=(q*c1*t2+p*c2*t1)%n</span><br><span class="line">m2=(q*c1*t2+p*c4*t1)%n <span class="comment"># or m2=n-m1</span></span><br><span class="line">m3=(q*c3*t2+p*c2*t1)%n</span><br><span class="line">m4=(q*c3*t2+p*c4*t1)%n <span class="comment"># or m4=n-m3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span>(m1,m2,m3,m4):</span><br><span class="line">    m = <span class="string">&#x27;%x&#x27;</span> % i</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(m)%<span class="number">2</span>==<span class="number">1</span>:</span><br><span class="line">        m=<span class="string">&#x27;0&#x27;</span>+m </span><br><span class="line">    <span class="built_in">print</span>(m.decode())   </span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="第三题：RSA"><a href="#第三题：RSA" class="headerlink" title="第三题：RSA"></a>第三题：RSA</h2><p>strongprime：如果p是一个strongprime，则有p+1以及p-1至少有一个大素数因子。</p>
<p>虽然还不清楚这个限制在这个题目中的作用。。。</p>
<p>n1为三个大素数的乘积，则有<br>$$<br>phi(n1) &#x3D; (p-1)<em>(p-1)</em>(q-1)<br>$$<br>接下来就是rsa的解密过程，<br>$$<br>e1*inv(e1)&#x3D;1 mod\ phi(n1)\<br>m[0] &#x3D; pow(c1,inv(e1),n1)<br>$$<br>后面为一个共模攻击，gcd(65537,4007) &#x3D; 1,(待补共模攻击的证明过程)。。。</p>
<p>然后对n2进行分解，则此时有：<br>$$<br>n2 &#x3D; p<em>q\<br>phi(n2)&#x3D;(p-1)</em>(q-1)<br>$$<br>共模攻击推导<br>$$<br>gcd(e1,e2) &#x3D; 1<br>$$<br>由扩展欧几里得公式<br>$$<br>e1<em>s1+e2</em>s2 &#x3D; 1\ \ (设s1为正，s2为负)\<br>c1 &#x3D; pow(m,e1,n2)\ \ c2 &#x3D; pow(m,e2,n2)\\<br>pow(c1,s1)*pow(c2,s2)mod\ n2 &#x3D; (pow(pow(m,e1,n2),s1))<em>pow(pow(m,e2,n2),s2)mod\ n2\<br>&#x3D;pow(m,e1</em>s1)<em>pow(m,e2</em>s2)mod \ n\<br>&#x3D;pow(m,e1s1+e2s2)mod\ n\<br>&#x3D;pow(m,1)mod\ n<br>&#x3D;m mod\ n\<br>最后得到\<br>pow(c1,s1)*pow(c2,s2) &#x3D; m<br>\<br>$$<br>只能感慨一下牛逼，呜呜呜</p>
<p>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">s,s1,s2 = gcdext(e1,e2)</span><br><span class="line">m[<span class="number">1</span>] = <span class="built_in">pow</span>(c1,s1,n2)*<span class="built_in">pow</span>(c2,s2,n2)%n2</span><br></pre></td></tr></table></figure>

<p>虽然但是，仍然没有看懂这行代码…</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = [bytes_to_long(plaintext[len_p//<span class="number">2</span>*i:len_p//<span class="number">2</span>*(i+<span class="number">1</span>)]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">len_p//<span class="number">2</span>*i:len_p//<span class="number">2</span>*(i+<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>结束！数论好玩喵。（呜呜呜，数论一点也不好玩）</p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>绿盟实习</title>
    <url>/2023/07/07/%E7%BB%BF%E7%9B%9F%E5%AE%9E%E4%B9%A0/</url>
    <content><![CDATA[<h5 id="windows登陆密码加密方式"><a href="#windows登陆密码加密方式" class="headerlink" title="windows登陆密码加密方式"></a>windows登陆密码加密方式</h5><p>windows登录密码的加密方式为NTML方式，对应的hashcat加密ID为1000，并且题目要求为字典解密，不要求掩码解密以及其他方法的解密，所以本题目的重点相当于考察对于python的subprocess模块的使用。</p>
<span id="more"></span>

<p>所以命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.\hashcat -m 1000 -a 0 <span class="built_in">hash</span>文件 解密字典</span><br></pre></td></tr></table></figure>

<p>同时，我们想把解密的过程调用和解密结果保存，则设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">capture = <span class="literal">true</span>,text = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>这两个参数中，capture会捕获子进程的输出结果，text会将结果以文本的形式输出。</p>
<p>下面将子进程运行过程中的所有的输出都进行捕获并打印到指定文件中并进行输出。</p>
<p>命令为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> .\hashcat -m 1000 -a 0 hash文件 解密字典 | tee 输出文件路径</span><br></pre></td></tr></table></figure>



<h5 id="linux登录密码加密方式"><a href="#linux登录密码加密方式" class="headerlink" title="linux登录密码加密方式"></a>linux登录密码加密方式</h5><p>sha-512：hashcat解密ID为1800</p>
<p>当使用MongoDB进行身份验证时，可以选择两种不同的算法：SCRAM-SHA-1和SCRAM-SHA-256。这些算法用于生成和验证MongoDB用户的凭据。</p>
<ol>
<li>SCRAM-SHA-1（Salted Challenge Response Authentication Mechanism）：这是一种基于哈希函数SHA-1的认证机制。在使用该算法时，MongoDB服务器会生成一个随机的挑战字符串（challenge），并将其发送给客户端。客户端使用用户提供的密码以及盐值（salt）和迭代次数（iteration count）来计算出一个响应字符串（response）。然后，将响应字符串发送回服务器进行验证。服务器使用存储的密码哈希和用户的盐值和迭代次数来计算预期的响应字符串，以验证用户的凭据。</li>
<li>SCRAM-SHA-256（Salted Challenge Response Authentication Mechanism）：这是一种基于哈希函数SHA-256的认证机制。它与SCRAM-SHA-1类似，但使用更强大的哈希函数来提供更高的安全性。在使用该算法时，服务器生成一个随机的挑战字符串，并将其发送给客户端。客户端使用用户提供的密码、盐值和迭代次数来计算出一个响应字符串，并将其发送回服务器进行验证。服务器使用存储的密码哈希和用户的盐值和迭代次数来计算预期的响应字符串，以验证用户的凭据。</li>
</ol>
<p>hash哈希加密算法ID</p>
<p>scram-sha-1：24100</p>
<p>scram-sha-256：24200</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">encrypted_file, password_dict</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        </span><br><span class="line">        hashcat_cmd = [<span class="string">&#x27;hashcat&#x27;</span>, <span class="string">&#x27;-m&#x27;</span>, <span class="string">&#x27;1400&#x27;</span>, <span class="string">&#x27;-a&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, encrypted_file, password_dict]</span><br><span class="line"></span><br><span class="line">        subprocess.run(hashcat_cmd, check=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;调用hashcat时出现错误:&#x27;</span>, e)</span><br><span class="line"></span><br><span class="line">encrypted_file = <span class="string">&#x27;passwords.txt&#x27;</span></span><br><span class="line">password_dict = <span class="string">&#x27;rules.txt&#x27;</span> </span><br><span class="line">start(encrypted_file, password_dict)</span><br></pre></td></tr></table></figure>

<p>d033e22ae348aeb5660fc2140aec35850c4da997 </p>
<p><img src="C:\Z.Sagapo\myblog\source_posts\绿盟实习\image-20230712164447818.png" alt="image-20230712164447818"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.\hashcat -m 100 -a 3 --force d033e22ae348aeb5660fc2140aec35850c4da997 ?l?l?l?l?l</span><br></pre></td></tr></table></figure>

<p>破解结果为admin</p>
<p>下面使用字典对scram-sha-1以及scram-sha-256进行破解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> shlex</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseBruteForce</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line">        self.tmp_files = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line"><span class="comment">#user_info即为加密之后的哈希密文，password_</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_command</span>(<span class="params">self,encrypted_ID,encrypted_file, password_dictory, out_file</span>):</span><br><span class="line">        command = <span class="string">f&quot;hashcat --force -m <span class="subst">&#123;encrypted_ID&#125;</span> -a 0 <span class="subst">&#123;encrypted_file&#125;</span> <span class="subst">&#123;password_dictory&#125;</span> -o <span class="subst">&#123;out_file&#125;</span> --potfile-disable --logfile-disable&quot;</span>  <span class="comment"># noqa: E501</span></span><br><span class="line">        <span class="keyword">return</span> shlex.split(command)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_result</span>(<span class="params">self, out_file</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(out_file, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> out_fd:</span><br><span class="line">            data = out_fd.read()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            temp_list = data.split()</span><br><span class="line">            password = temp_list[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">return</span> password</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mnogo_Sha_ID_Force</span>(<span class="title class_ inherited__">BaseBruteForce</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">self</span>):</span><br><span class="line">        password_dictory = self.kwargs.get(<span class="string">&quot;password_dictory&quot;</span>)</span><br><span class="line">        out_file = self.kwargs.get(<span class="string">&quot;out_file&quot;</span>)</span><br><span class="line">        encrypted_file = self.kwargs.get(<span class="string">&quot;encrypted_file&quot;</span>)</span><br><span class="line">        encrypted_ID = self.kwargs.get(<span class="string">&quot;ID&quot;</span>)</span><br><span class="line">        encrypted_file = tempfile.mkstemp(suffix=<span class="string">&#x27;hash&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        command = self.build_command(self,encrypted_ID,encrypted_file,password_dictory,out_file)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 使用subprocess调用命令</span></span><br><span class="line">            output = subprocess.Popen(command,stdout=subprocess.PIPE,stderr=subprocess.PIPE)</span><br><span class="line">            output.wait()</span><br><span class="line"></span><br><span class="line">            self.tmp_files.append(out_file)</span><br><span class="line">            password = self.parse_result(out_file)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> password:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(out_file,<span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> temp_out:</span><br><span class="line">                    temp_out.write(<span class="string">&quot;&#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(password))</span><br><span class="line">                   </span><br><span class="line">        <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="comment"># 处理调用过程中的错误</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Error:&quot;</span>, e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>编译原理上机报告</title>
    <url>/2022/12/21/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E4%B8%8A%E6%9C%BA%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<h1 id="编译原理上机实验报告"><a href="#编译原理上机实验报告" class="headerlink" title="编译原理上机实验报告"></a>编译原理上机实验报告</h1><h3 id="一、-上机题目：简单函数绘图语言解释器"><a href="#一、-上机题目：简单函数绘图语言解释器" class="headerlink" title="一、 上机题目：简单函数绘图语言解释器"></a>一、 上机题目：简单函数绘图语言解释器</h3><h4 id="1-1题目简述"><a href="#1-1题目简述" class="headerlink" title="1.1题目简述"></a>1.1题目简述</h4><p>题目：为函数绘图语言编写一个解释器</p>
<p>解释器接受用绘图语言编写的源程序，经语法和语义分析之后，将源程序所规定的图形显示在显示屏</p>
<p>（或窗口）中。</p>
<p>目的：通过自己动手编写解释器，掌握语言翻译特别是语言识别的基本方法。</p>
<span id="more"></span>

<h5 id="lt-1-gt-实现简单的函数绘图语句"><a href="#lt-1-gt-实现简单的函数绘图语句" class="headerlink" title="&lt;1&gt;实现简单的函数绘图语句"></a>&lt;1&gt;实现简单的函数绘图语句</h5><p>循环绘图（FOR-DRAW）</p>
<p>比例设置（SCALE）</p>
<p>角度旋转（ROT）</p>
<p>坐标平移（ORIGIN）</p>
<p>注释</p>
<h5 id="lt-2-gt-屏幕的坐标系"><a href="#lt-2-gt-屏幕的坐标系" class="headerlink" title="&lt;2&gt;屏幕的坐标系"></a>&lt;2&gt;屏幕的坐标系</h5><p>左上角为原点</p>
<p>X方向从左向右增长</p>
<p>Y方向从上到下增长</p>
<h5 id="lt-3-gt-函数绘图源程序"><a href="#lt-3-gt-函数绘图源程序" class="headerlink" title="&lt;3&gt;函数绘图源程序"></a>&lt;3&gt;函数绘图源程序</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">origin is (100,300);</span><br><span class="line">rot is 0;</span><br><span class="line">scale is (1,1);</span><br><span class="line">for T from 0 to 200 step 1 draw (t,0);</span><br><span class="line">								--横坐标的轨迹</span><br><span class="line">for T from 0 to 150 step 1 draw (0,-t);</span><br><span class="line">for T from 0 to 120 step 1 draw (t,-t);</span><br><span class="line">									--f(t) = t 的轨迹</span><br></pre></td></tr></table></figure>

<h4 id="1-2语句的语法和语义"><a href="#1-2语句的语法和语义" class="headerlink" title="1.2语句的语法和语义"></a>1.2语句的语法和语义</h4><p>语句满足下述规则</p>
<h5 id="lt-1-gt-各类语句可以按任意次序书写，且语句以分号结尾，源程序中的语句以他们出现的先后顺处理。"><a href="#lt-1-gt-各类语句可以按任意次序书写，且语句以分号结尾，源程序中的语句以他们出现的先后顺处理。" class="headerlink" title="&lt;1&gt;各类语句可以按任意次序书写，且语句以分号结尾，源程序中的语句以他们出现的先后顺处理。"></a>&lt;1&gt;各类语句可以按任意次序书写，且语句以分号结尾，源程序中的语句以他们出现的先后顺处理。</h5><h5 id="lt-2-gt-ORIGIN-ROT和SCALE语句只能影响其后的绘图语句，且循环最后出现的语句有效的原则。"><a href="#lt-2-gt-ORIGIN-ROT和SCALE语句只能影响其后的绘图语句，且循环最后出现的语句有效的原则。" class="headerlink" title="&lt;2&gt;ORIGIN,ROT和SCALE语句只能影响其后的绘图语句，且循环最后出现的语句有效的原则。"></a>&lt;2&gt;ORIGIN,ROT和SCALE语句只能影响其后的绘图语句，且循环最后出现的语句有效的原则。</h5><h5 id="lt-3-gt-无论ORIGIN，ROT和SCALE语句出现的顺序如何，图像的变换顺序总是：比例变换——旋转变换——平移变换。"><a href="#lt-3-gt-无论ORIGIN，ROT和SCALE语句出现的顺序如何，图像的变换顺序总是：比例变换——旋转变换——平移变换。" class="headerlink" title="&lt;3&gt;无论ORIGIN，ROT和SCALE语句出现的顺序如何，图像的变换顺序总是：比例变换——旋转变换——平移变换。"></a>&lt;3&gt;无论ORIGIN，ROT和SCALE语句出现的顺序如何，图像的变换顺序总是：比例变换——旋转变换——平移变换。</h5><h5 id="lt-4-gt-语言对大小写不敏感，即for，For，FOR等均被认为是同一个语句。"><a href="#lt-4-gt-语言对大小写不敏感，即for，For，FOR等均被认为是同一个语句。" class="headerlink" title="&lt;4&gt;语言对大小写不敏感，即for，For，FOR等均被认为是同一个语句。"></a>&lt;4&gt;语言对大小写不敏感，即for，For，FOR等均被认为是同一个语句。</h5><h5 id="lt-5-gt-语句表达式中的数字为双精度类型，旋转角度以弧度为单位且逆时针旋转，平移单位为点。"><a href="#lt-5-gt-语句表达式中的数字为双精度类型，旋转角度以弧度为单位且逆时针旋转，平移单位为点。" class="headerlink" title="&lt;5&gt;语句表达式中的数字为双精度类型，旋转角度以弧度为单位且逆时针旋转，平移单位为点。"></a>&lt;5&gt;语句表达式中的数字为双精度类型，旋转角度以弧度为单位且逆时针旋转，平移单位为点。</h5><h4 id="1-2-1-循环绘图语句具体解释"><a href="#1-2-1-循环绘图语句具体解释" class="headerlink" title="1.2.1 循环绘图语句具体解释"></a>1.2.1 循环绘图语句具体解释</h4><h5 id="语法为"><a href="#语法为" class="headerlink" title="语法为"></a>语法为</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for t from 起点 to 终点 step 步长 draw(横坐标，纵坐标)；</span><br></pre></td></tr></table></figure>

<h5 id="语义为"><a href="#语义为" class="headerlink" title="语义为"></a>语义为</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">另T从起点到终点，每次改变一个步长，绘制出由给定坐标所规定的点的路线痕迹；</span><br></pre></td></tr></table></figure>

<h5 id="举例为"><a href="#举例为" class="headerlink" title="举例为"></a>举例为</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for t from 0 to 2*pi step pi/90 draw (cos(t),sin(t));</span><br></pre></td></tr></table></figure>

<p>该语句的具体含义为绘制出一个单位圆，从0到2*pi，以pi&#x2F;60为一个步长</p>
<h4 id="1-2-2比例设置语句"><a href="#1-2-2比例设置语句" class="headerlink" title="1.2.2比例设置语句"></a>1.2.2比例设置语句</h4><h5 id="语法为-1"><a href="#语法为-1" class="headerlink" title="语法为"></a>语法为</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scale is (横坐标比例系数，纵坐标比例系数);</span><br></pre></td></tr></table></figure>

<h5 id="语义为-1"><a href="#语义为-1" class="headerlink" title="语义为"></a>语义为</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">设置纵坐标以及横坐标的比例，并分别按照比例因子进行缩放。</span><br></pre></td></tr></table></figure>

<h4 id="1-2-3坐标平移语句"><a href="#1-2-3坐标平移语句" class="headerlink" title="1.2.3坐标平移语句"></a>1.2.3坐标平移语句</h4><h5 id="语法为-2"><a href="#语法为-2" class="headerlink" title="语法为"></a>语法为</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">origin is (横坐标，纵坐标);</span><br></pre></td></tr></table></figure>

<h5 id="语义为-2"><a href="#语义为-2" class="headerlink" title="语义为"></a>语义为</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将坐标系的原点平移到横坐标和纵坐标规定的点处。</span><br></pre></td></tr></table></figure>

<h4 id="1-2-4角度旋转语句"><a href="#1-2-4角度旋转语句" class="headerlink" title="1.2.4角度旋转语句"></a>1.2.4角度旋转语句</h4><h5 id="语法为-3"><a href="#语法为-3" class="headerlink" title="语法为"></a>语法为</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rot is 具体角度;</span><br></pre></td></tr></table></figure>

<h5 id="语义为-3"><a href="#语义为-3" class="headerlink" title="语义为"></a>语义为</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">逆时针旋转角度所规定的弧度值，具体计算公式为：</span><br><span class="line">	●旋转后X=旋转前XCOS(角度)+旋转前YSIN(角度)</span><br><span class="line">	●旋转后Y=旋转前YCOS(角度)-旋转前XSIN(角度)</span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="1-3记号的语法和语义"><a href="#1-3记号的语法和语义" class="headerlink" title="1.3记号的语法和语义"></a>1.3记号的语法和语义</h3><p>记号的种类有：常数，参数，函数，保留字，运算符、分隔符。</p>
<h5 id="lt-1-gt-常数"><a href="#lt-1-gt-常数" class="headerlink" title="&lt;1&gt;常数"></a>&lt;1&gt;常数</h5><p>常数字面量和标识符形式的常量名均称为常数。字面量的形式为普通的数值，如果没有小数部分，可以</p>
<p>省略小数点。例如2、2.、2.0都是合法的常数。 标识符PI、E也是常数，它们分别代表圆周率和自然对数</p>
<p>的底。常数不能有符号位，如-1和+2不是常数而是（一元运算的）表达式。</p>
<h5 id="lt-2-gt-参数"><a href="#lt-2-gt-参数" class="headerlink" title="&lt;2&gt;参数"></a>&lt;2&gt;参数</h5><p>本作图语言中唯一的、已经被定义好的变量名T被称为参数，它也是一个表达式。</p>
<p>除了预留参数 T 之外本作图语言还支持自定义参数。</p>
<h5 id="lt-3-gt-函数"><a href="#lt-3-gt-函数" class="headerlink" title="&lt;3&gt;函数"></a>&lt;3&gt;函数</h5><p>目前已经编写的函数有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sin;</span><br><span class="line">cos;</span><br><span class="line">tan;</span><br><span class="line">sqrt;</span><br><span class="line">exp;</span><br><span class="line">ln;</span><br></pre></td></tr></table></figure>

<h5 id="lt-4-gt-保留字（标识符）"><a href="#lt-4-gt-保留字（标识符）" class="headerlink" title="&lt;4&gt;保留字（标识符）"></a>&lt;4&gt;保留字（标识符）</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ORIGIN;SCALE;IS;TO;STEP;FROM;DRAW;FOR;</span><br></pre></td></tr></table></figure>

<h5 id="lt-5-gt-运算符"><a href="#lt-5-gt-运算符" class="headerlink" title="&lt;5&gt;运算符"></a>&lt;5&gt;运算符</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PLUS(+);MINUS(-);MUL(*);DIV(/);POWER(^);</span><br></pre></td></tr></table></figure>

<h5 id="lt-6-gt-分隔符"><a href="#lt-6-gt-分隔符" class="headerlink" title="&lt;6&gt;分隔符"></a>&lt;6&gt;分隔符</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SEMICO(;) L_brackt(() R_bracke()) COMMA(,)</span><br></pre></td></tr></table></figure>



<h2 id="二：开发环境以及配置"><a href="#二：开发环境以及配置" class="headerlink" title="二：开发环境以及配置"></a>二：开发环境以及配置</h2><p>使用c++进行主要类以及相应库的编写，利用cmake进行整个项目的构建，整个项目中使用与平台无关的标准库函数，最终生成python代码利用tkinker进行绘图。</p>
<h2 id="三：解决思路与关键类"><a href="#三：解决思路与关键类" class="headerlink" title="三：解决思路与关键类"></a>三：解决思路与关键类</h2><h4 id="1：结构设计"><a href="#1：结构设计" class="headerlink" title="1：结构设计"></a>1：结构设计</h4><p>此编译器采用一次扫描，以语法分析器为核心，语法分析器是通过词法分析器从代码源文件中读入与分析词素，通过递归下降分析生成对应的抽象语法树（Abstract Syntax Tree），并检测代码中的语法错误。</p>
<p>语法分析器在生成抽象语法树后将其传递给语义分析器，由语义分析器进行语义分析，生成最终的可执行代码，最终生成python代码使用tkinter库进行绘图。</p>
<img src="C:\Z.Sagapo\myblog\source\_posts\编译原理上机报告\image-20221115190847886.png"  />

<h4 id="2：词法分析器"><a href="#2：词法分析器" class="headerlink" title="2：词法分析器"></a>2：词法分析器</h4><h5 id="lt-1-gt-词法分析器的主要功能"><a href="#lt-1-gt-词法分析器的主要功能" class="headerlink" title="&lt;1&gt;词法分析器的主要功能"></a>&lt;1&gt;词法分析器的主要功能</h5><p>​	词法分析器的主要功能为识别输入序列，并为语法分析器提供记号</p>
<p>​	过滤掉源程序中的空白字符、注释等编译无关字符</p>
<p>​	输出**记号供语法分析器使用</p>
<p>​	识别非法输出，将其标记为错误记号</p>
<h5 id="lt-2-gt-记号定义"><a href="#lt-2-gt-记号定义" class="headerlink" title="&lt;2&gt;记号定义"></a>&lt;2&gt;记号定义</h5><p>在此解释器中，记号定义为如下形式</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">token</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">token_type</span> type;</span><br><span class="line">    <span class="type">char</span> *lexme;</span><br><span class="line">    <span class="type">double</span> val;</span><br><span class="line">    <span class="built_in">double</span> (*func_ptr)(<span class="type">double</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>其中的token_type为各种类型，即为记号种类，具体定义如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">token_type</span></span><br><span class="line">&#123;</span><br><span class="line">    ORIGIN,SCALE,ROT,IS,TO,FROM,FOR,DRAW,T,</span><br><span class="line">    </span><br><span class="line">    SEMICO,L_brackt,R_bracke,COMMA,</span><br><span class="line">    </span><br><span class="line">    PLUS,MINUS,MUL,DIV,POWER,</span><br><span class="line">    </span><br><span class="line">    FUNC,</span><br><span class="line">    </span><br><span class="line">    CONST_ID,</span><br><span class="line">    </span><br><span class="line">	NONTOKEN,</span><br><span class="line">    </span><br><span class="line">    ERRORTOKEN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="lt-3-gt-词法分析的主要流程"><a href="#lt-3-gt-词法分析的主要流程" class="headerlink" title="&lt;3&gt;词法分析的主要流程"></a>&lt;3&gt;词法分析的主要流程</h5><p>选取有限自动机来实现语法分词器</p>
<p>​	●清除前导空白字符</p>
<p>​	●获取第一个非空白字符进行判断</p>
<p>​	●若第一个非空白字符为字母则不断读取单个字符到缓冲区直到遇到非数字或非字母字符，将之放回</p>
<p>输入流，缓冲区内存留字符作为一个记号，查询符号表并返回对应的记号（若符号表中不存在则视</p>
<p>为新的变量，追加到符号表中）</p>
<p>​	●若第一个非空白字符为数字则不断读取单个字符到缓冲区直到遇到非数字字符（若遇到小数点符号</p>
<p>. 则重复读取单个字符到缓冲区直到遇到非数字字符），将之放回输入流，通过 atof() 将缓冲</p>
<p>​	●区内字符转换为浮点值赋给一个新的数字记号并返回</p>
<p>​	●若第一个非空白字符为其他分隔字符则进行针对性的模式匹配</p>
<p>​	●其余则为非法字符，进行报错</p>
<h4 id="3：语法分析器"><a href="#3：语法分析器" class="headerlink" title="3：语法分析器"></a>3：语法分析器</h4><h5 id="适合递归下降分析算法如下："><a href="#适合递归下降分析算法如下：" class="headerlink" title="适合递归下降分析算法如下："></a>适合递归下降分析算法如下：</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Express on → Term    PLUS   MINUS  Term  </span><br><span class="line">Term → Factor &#123; (MUL | DIV) Factor &#125;</span><br><span class="line">Factor → PLUS Factor | MINUS Factor | Component</span><br><span class="line">Component → Atom [POWER Component]</span><br><span class="line">Atom → CONST_ID</span><br><span class="line">| T</span><br><span class="line">| FUNC L_BRACKET Expression R_BRACKET</span><br><span class="line">| L_BRACKET Expression R_BRACKET</span><br></pre></td></tr></table></figure>

<h5 id="其中语法树的数据结构为："><a href="#其中语法树的数据结构为：" class="headerlink" title="其中语法树的数据结构为："></a>其中语法树的数据结构为：</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span>  <span class="title class_">expr_node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">token_type</span> opcode;</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="comment">// tree node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">expr_node</span> *left;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">expr_node</span> *right;</span><br><span class="line">&#125;case_operator; <span class="comment">// the node is a operator</span></span><br><span class="line"><span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">expr_node</span> *child;</span><br><span class="line"><span class="built_in">double</span> (*func_ptr)(<span class="type">double</span>);</span><br><span class="line">&#125;case_func; <span class="comment">// the node is a call of function</span></span><br><span class="line"><span class="type">double</span> case_const; <span class="comment">// the node is a const value (right</span></span><br><span class="line">val)</span><br><span class="line"><span class="type">double</span> *case_param; <span class="comment">// the node is a param (left</span></span><br><span class="line">val)</span><br><span class="line">&#125;content;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="4-语义分析器"><a href="#4-语义分析器" class="headerlink" title="4:语义分析器"></a>4:语义分析器</h4><h5 id="辅助语义函数为："><a href="#辅助语义函数为：" class="headerlink" title="辅助语义函数为："></a>辅助语义函数为：</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">get_expr_val</span><span class="params">(<span class="keyword">struct</span> expr_node *tree)</span> ：计算表达式的值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_coordinate</span><span class="params">(<span class="keyword">struct</span> expr_node *exp_x, <span class="keyword">struct</span> expr_node *exp_y, <span class="type">double</span></span></span></span><br><span class="line"><span class="params"><span class="function">&amp;x, <span class="type">double</span> &amp;y)</span> ：获得一个点的坐标</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw_loop</span><span class="params">(<span class="keyword">struct</span> token *param, <span class="type">double</span> start, <span class="type">double</span> end, <span class="type">double</span> step,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">struct</span> expr_node *exp_x, <span class="keyword">struct</span> expr_node *exp_y)</span> ：由语法树绘制该表达式中所有的点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw_pixel</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y, <span class="type">double</span> step)</span> ：核心绘图函数，生成绘制一个点的python 代码</span></span><br></pre></td></tr></table></figure>



<h2 id="四-实验结果以及测试截图"><a href="#四-实验结果以及测试截图" class="headerlink" title="四:实验结果以及测试截图"></a>四:实验结果以及测试截图</h2><p>测试代码为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">rot is <span class="number">0</span>;</span><br><span class="line"><span class="function">origin <span class="title">is</span> <span class="params">(<span class="number">50</span>, <span class="number">400</span>)</span></span>;</span><br><span class="line"><span class="function">scale <span class="title">is</span> <span class="params">(<span class="number">2</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> T from <span class="number">0</span> to <span class="number">300</span> step <span class="number">0.01</span> <span class="built_in">draw</span> (t, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> T from <span class="number">0</span> to <span class="number">300</span> step <span class="number">0.01</span> <span class="built_in">draw</span> (<span class="number">0</span>, -t);</span><br><span class="line"><span class="keyword">for</span> T from <span class="number">0</span> to <span class="number">300</span> step <span class="number">0.01</span> <span class="built_in">draw</span> (t, -t);</span><br><span class="line"><span class="function">scale <span class="title">is</span> <span class="params">(<span class="number">2</span>, <span class="number">0.1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> T from <span class="number">0</span> to <span class="number">55</span> step <span class="number">0.01</span> <span class="built_in">draw</span> (t, -(t*t));</span><br><span class="line"><span class="function">scale <span class="title">is</span> <span class="params">(<span class="number">10</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> T from <span class="number">0</span> to <span class="number">60</span> step <span class="number">0.01</span> <span class="built_in">draw</span> (t, -<span class="built_in">sqrt</span>(t));</span><br><span class="line"><span class="function">scale <span class="title">is</span> <span class="params">(<span class="number">20</span>, <span class="number">0.1</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> T from <span class="number">0</span> to <span class="number">8</span> step <span class="number">0.01</span> <span class="built_in">draw</span> (t, -<span class="built_in">exp</span>(t));</span><br><span class="line"><span class="function">scale <span class="title">is</span> <span class="params">(<span class="number">2</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> T from <span class="number">0</span> to <span class="number">300</span> step <span class="number">0.01</span> <span class="built_in">draw</span> (t, -<span class="built_in">ln</span>(t));</span><br></pre></td></tr></table></figure>



<p>测试结果为：</p>
<img src="C:\Z.Sagapo\myblog\source\_posts\编译原理上机报告\image-20221114172645315.png" alt="image-20221114172645315" style="zoom: 67%;" />



<h2 id="五：心得体会"><a href="#五：心得体会" class="headerlink" title="五：心得体会"></a>五：心得体会</h2><p>从刚开始枯燥无聊的编译原理课程，到为了完成大作业的一步步学习，体会到了独立完成整个编译器的过程，让我从更深的层次上了解了代码的编译过程，同时独立完成一个“传说中”的编译器满满的成就感。</p>
<p>遇到了太多的困难，从一个个库的编写（第一次自己手动编写一个自己需要的库），到编写完毕之后的运行失败，再到学长的引导下，把自己的各个文件用cmake系统的构建起来，以便后续的使用，最后到写入python文件的路径问题，从毫无头绪到一步步的完成，对我自己的能力提升很有帮助，不仅体现在这门课上面，更体现在自己对于计算机编译的理解和运行上面。</p>
]]></content>
      <categories>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>大学大作业</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/08/03/%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h3 id="聚类算法"><a href="#聚类算法" class="headerlink" title="聚类算法"></a>聚类算法</h3><p>聚类是一个将<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E9%9B%86%E5%88%92%E5%88%86&spm=1001.2101.3001.7020">数据集划分</a>为若干组（class）或类（cluster）的的过程，并使得同一个组内的数据对象具有较高的相识度；而不同组中的数据对象是不相似的。</p>
<p>1、相似或不相似是基于数据描述属性的取值来确定的，通常利用各数据对象间的<strong>距离</strong>来表示。<br>2、剧烈分析尤其是和用来探讨样本间的相互关联关系从而对一个样本结构做一个初步的评价。</p>
<h5 id="kmeans优缺点分析"><a href="#kmeans优缺点分析" class="headerlink" title="kmeans优缺点分析"></a>kmeans优缺点分析</h5><ul>
<li><p>优点：</p>
</li>
<li><ul>
<li>算法简单，快捷。</li>
<li>处理大数据集的效率较高。</li>
</ul>
</li>
<li><p>缺点</p>
</li>
<li><ul>
<li>必须先确定要生成的类别的数量。</li>
<li>对选择的初值较为敏感。</li>
<li>容易被噪声干扰。</li>
</ul>
</li>
</ul>
<h5 id="改进方法-Kmeans"><a href="#改进方法-Kmeans" class="headerlink" title="改进方法 Kmeans++"></a>改进方法 Kmeans++</h5><ul>
<li><p><strong>可以解决 Kmeans 的第二和第三个问题。</strong></p>
</li>
<li><p><strong>改进体现在 k 个初值的选取上。</strong></p>
</li>
<li><p>流程：</p>
</li>
<li><ul>
<li>随机选取一个样本作为第一个聚类中心。</li>
<li>计算每个样本点到所有的聚类中心的距离，并且按照距离远近进行概率的设定，距离越远，概率越大。</li>
<li>按照轮盘法(按照选取概率的大小进行抽取)的规则进行下一个聚类中心的选择，直到完成 k 个聚类中心的选择。</li>
</ul>
</li>
</ul>
<p>题目：</p>
<p><img src="https://img-blog.csdnimg.cn/2eeeb636969143faa96554879d0dfc69.png" alt="请添加图片描述"></p>
<p>代码为</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"> a=[<span class="number">7.9</span> <span class="number">39.77</span> <span class="number">8.49</span> <span class="number">12.94</span> <span class="number">19.27</span> <span class="number">11.05</span> <span class="number">2.04</span> <span class="number">13.29</span></span><br><span class="line"><span class="number">7.68</span> <span class="number">50.37</span> <span class="number">11.35</span> <span class="number">13.3</span> <span class="number">19.25</span> <span class="number">14.59</span> <span class="number">2.75</span> <span class="number">14.87</span></span><br><span class="line"><span class="number">9.42</span> <span class="number">27.93</span> <span class="number">8.2</span> <span class="number">8.14</span> <span class="number">16.17</span> <span class="number">9.42</span> <span class="number">1.55</span> <span class="number">9.76</span></span><br><span class="line"><span class="number">9.16</span> <span class="number">27.98</span> <span class="number">9.01</span> <span class="number">9.32</span> <span class="number">15.99</span> <span class="number">9.1</span> <span class="number">1.82</span> <span class="number">11.35</span></span><br><span class="line"><span class="number">10.06</span> <span class="number">28.64</span> <span class="number">10.52</span> <span class="number">10.05</span> <span class="number">16.18</span> <span class="number">8.39</span> <span class="number">1.96</span> <span class="number">10.81</span>];</span><br><span class="line">d1=pdist(a);				<span class="comment">% 此时计算出各行之间的欧氏距离，</span></span><br><span class="line">D= squareform(d1)			<span class="comment">% 注意此时d1必须是一个行向量，结果是实对称矩阵</span></span><br><span class="line">S=<span class="built_in">tril</span>(squareform (d1))		<span class="comment">% 得到书中的三角阵</span></span><br><span class="line"></span><br><span class="line">同理：</span><br><span class="line">d2=pdist(a,<span class="string">&#x27;cityblock&#x27;</span>);	<span class="comment">% 此时计算出各行之间的绝对距离，</span></span><br><span class="line">S2=<span class="built_in">tril</span>(squareform(d2))</span><br><span class="line"></span><br><span class="line">d3=pdist(a,<span class="string">&#x27;minkowski&#x27;</span>,<span class="number">3</span>);	<span class="comment">% 此时计算出各行之间的明氏距离，</span></span><br><span class="line">S3=<span class="built_in">tril</span>(squareform(d3))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">d1 =</span><br><span class="line"></span><br><span class="line">   <span class="number">11.6726</span>   <span class="number">13.8054</span>   <span class="number">13.1278</span>   <span class="number">12.7983</span>   <span class="number">24.6353</span>   <span class="number">24.0591</span>   <span class="number">23.5389</span>    <span class="number">2.2033</span>    <span class="number">3.5037</span>    <span class="number">2.2159</span></span><br><span class="line"></span><br><span class="line">D =</span><br><span class="line"></span><br><span class="line">         <span class="number">0</span>   <span class="number">11.6726</span>   <span class="number">13.8054</span>   <span class="number">13.1278</span>   <span class="number">12.7983</span></span><br><span class="line">   <span class="number">11.6726</span>         <span class="number">0</span>   <span class="number">24.6353</span>   <span class="number">24.0591</span>   <span class="number">23.5389</span></span><br><span class="line">   <span class="number">13.8054</span>   <span class="number">24.6353</span>         <span class="number">0</span>    <span class="number">2.2033</span>    <span class="number">3.5037</span></span><br><span class="line">   <span class="number">13.1278</span>   <span class="number">24.0591</span>    <span class="number">2.2033</span>         <span class="number">0</span>    <span class="number">2.2159</span></span><br><span class="line">   <span class="number">12.7983</span>   <span class="number">23.5389</span>    <span class="number">3.5037</span>    <span class="number">2.2159</span>         <span class="number">0</span></span><br><span class="line"></span><br><span class="line">S =</span><br><span class="line"></span><br><span class="line">         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span></span><br><span class="line">   <span class="number">11.6726</span>         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span></span><br><span class="line">   <span class="number">13.8054</span>   <span class="number">24.6353</span>         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span></span><br><span class="line">   <span class="number">13.1278</span>   <span class="number">24.0591</span>    <span class="number">2.2033</span>         <span class="number">0</span>         <span class="number">0</span></span><br><span class="line">   <span class="number">12.7983</span>   <span class="number">23.5389</span>    <span class="number">3.5037</span>    <span class="number">2.2159</span>         <span class="number">0</span></span><br><span class="line"></span><br><span class="line">d2 =</span><br><span class="line"></span><br><span class="line">   <span class="number">19.8900</span>   <span class="number">27.2000</span>   <span class="number">24.5800</span>   <span class="number">26.5200</span>   <span class="number">47.0500</span>   <span class="number">43.3900</span>   <span class="number">42.3100</span>    <span class="number">4.6600</span>    <span class="number">8.0800</span>    <span class="number">5.3800</span></span><br><span class="line"></span><br><span class="line">S2 =</span><br><span class="line"></span><br><span class="line">         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span></span><br><span class="line">   <span class="number">19.8900</span>         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span></span><br><span class="line">   <span class="number">27.2000</span>   <span class="number">47.0500</span>         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span></span><br><span class="line">   <span class="number">24.5800</span>   <span class="number">43.3900</span>    <span class="number">4.6600</span>         <span class="number">0</span>         <span class="number">0</span></span><br><span class="line">   <span class="number">26.5200</span>   <span class="number">42.3100</span>    <span class="number">8.0800</span>    <span class="number">5.3800</span>         <span class="number">0</span></span><br><span class="line"></span><br><span class="line">d3 =</span><br><span class="line"></span><br><span class="line">   <span class="number">10.8098</span>   <span class="number">12.2808</span>   <span class="number">12.0241</span>   <span class="number">11.4086</span>   <span class="number">22.7511</span>   <span class="number">22.6032</span>   <span class="number">21.9971</span>    <span class="number">1.8440</span>    <span class="number">2.8187</span>    <span class="number">1.7515</span></span><br><span class="line"></span><br><span class="line">S3 =</span><br><span class="line"></span><br><span class="line">         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span></span><br><span class="line">   <span class="number">10.8098</span>         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span></span><br><span class="line">   <span class="number">12.2808</span>   <span class="number">22.7511</span>         <span class="number">0</span>         <span class="number">0</span>         <span class="number">0</span></span><br><span class="line">   <span class="number">12.0241</span>   <span class="number">22.6032</span>    <span class="number">1.8440</span>         <span class="number">0</span>         <span class="number">0</span></span><br><span class="line">   <span class="number">11.4086</span>   <span class="number">21.9971</span>    <span class="number">2.8187</span>    <span class="number">1.7515</span>         <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="变量间的相似度量——相似系数"><a href="#变量间的相似度量——相似系数" class="headerlink" title="变量间的相似度量——相似系数"></a>变量间的相似度量——相似系数</h5><img src="https://img-blog.csdnimg.cn/d610a0525ce848ed89a6c86587bafa6f.png" alt="请添加图片描述" style="zoom: 80%;" />



<img src="https://img-blog.csdnimg.cn/fcffbc8dae2442ebbc0c4ff7a1d367c0.png" alt="在这里插入图片描述" style="zoom:80%;" />

<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">R=corrcoef(a);		<span class="comment">%指标之间的相关系数</span></span><br><span class="line">a1=normc(a);		<span class="comment">%将a的各列转化为单位向量</span></span><br><span class="line">J=a1&#x27;*a1			<span class="comment">%计算a中各列之间的夹角余弦</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>结果如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">R =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.0000</span>   <span class="number">-0.8946</span>   <span class="number">-0.1555</span>   <span class="number">-0.8466</span>   <span class="number">-0.9320</span>   <span class="number">-0.8810</span>   <span class="number">-0.7005</span>   <span class="number">-0.8989</span></span><br><span class="line">   <span class="number">-0.8946</span>    <span class="number">1.0000</span>    <span class="number">0.5475</span>    <span class="number">0.9103</span>    <span class="number">0.9246</span>    <span class="number">0.9730</span>    <span class="number">0.9210</span>    <span class="number">0.9572</span></span><br><span class="line">   <span class="number">-0.1555</span>    <span class="number">0.5475</span>    <span class="number">1.0000</span>    <span class="number">0.4758</span>    <span class="number">0.2748</span>    <span class="number">0.5145</span>    <span class="number">0.8134</span>    <span class="number">0.5404</span></span><br><span class="line">   <span class="number">-0.8466</span>    <span class="number">0.9103</span>    <span class="number">0.4758</span>    <span class="number">1.0000</span>    <span class="number">0.9500</span>    <span class="number">0.7955</span>    <span class="number">0.8526</span>    <span class="number">0.9545</span></span><br><span class="line">   <span class="number">-0.9320</span>    <span class="number">0.9246</span>    <span class="number">0.2748</span>    <span class="number">0.9500</span>    <span class="number">1.0000</span>    <span class="number">0.8456</span>    <span class="number">0.7534</span>    <span class="number">0.9096</span></span><br><span class="line">   <span class="number">-0.8810</span>    <span class="number">0.9730</span>    <span class="number">0.5145</span>    <span class="number">0.7955</span>    <span class="number">0.8456</span>    <span class="number">1.0000</span>    <span class="number">0.8826</span>    <span class="number">0.9006</span></span><br><span class="line">   <span class="number">-0.7005</span>    <span class="number">0.9210</span>    <span class="number">0.8134</span>    <span class="number">0.8526</span>    <span class="number">0.7534</span>    <span class="number">0.8826</span>    <span class="number">1.0000</span>    <span class="number">0.9231</span></span><br><span class="line">   <span class="number">-0.8989</span>    <span class="number">0.9572</span>    <span class="number">0.5404</span>    <span class="number">0.9545</span>    <span class="number">0.9096</span>    <span class="number">0.9006</span>    <span class="number">0.9231</span>    <span class="number">1.0000</span></span><br><span class="line"></span><br><span class="line">a1 =</span><br><span class="line"></span><br><span class="line">    <span class="number">0.3974</span>    <span class="number">0.4932</span>    <span class="number">0.3959</span>    <span class="number">0.5290</span>    <span class="number">0.4941</span>    <span class="number">0.4601</span>    <span class="number">0.4422</span>    <span class="number">0.4890</span></span><br><span class="line">    <span class="number">0.3863</span>    <span class="number">0.6247</span>    <span class="number">0.5292</span>    <span class="number">0.5437</span>    <span class="number">0.4936</span>    <span class="number">0.6074</span>    <span class="number">0.5961</span>    <span class="number">0.5471</span></span><br><span class="line">    <span class="number">0.4738</span>    <span class="number">0.3464</span>    <span class="number">0.3823</span>    <span class="number">0.3327</span>    <span class="number">0.4146</span>    <span class="number">0.3922</span>    <span class="number">0.3360</span>    <span class="number">0.3591</span></span><br><span class="line">    <span class="number">0.4608</span>    <span class="number">0.3470</span>    <span class="number">0.4201</span>    <span class="number">0.3810</span>    <span class="number">0.4100</span>    <span class="number">0.3789</span>    <span class="number">0.3945</span>    <span class="number">0.4176</span></span><br><span class="line">    <span class="number">0.5060</span>    <span class="number">0.3552</span>    <span class="number">0.4905</span>    <span class="number">0.4108</span>    <span class="number">0.4149</span>    <span class="number">0.3493</span>    <span class="number">0.4249</span>    <span class="number">0.3977</span></span><br><span class="line"></span><br><span class="line">J =</span><br><span class="line"></span><br><span class="line">    <span class="number">1.0000</span>    <span class="number">0.9410</span>    <span class="number">0.9847</span>    <span class="number">0.9613</span>    <span class="number">0.9824</span>    <span class="number">0.9546</span>    <span class="number">0.9620</span>    <span class="number">0.9695</span></span><br><span class="line">    <span class="number">0.9410</span>    <span class="number">1.0000</span>    <span class="number">0.9782</span>    <span class="number">0.9939</span>    <span class="number">0.9853</span>    <span class="number">0.9977</span>    <span class="number">0.9947</span>    <span class="number">0.9935</span></span><br><span class="line">    <span class="number">0.9847</span>    <span class="number">0.9782</span>    <span class="number">1.0000</span>    <span class="number">0.9859</span>    <span class="number">0.9911</span>    <span class="number">0.9840</span>    <span class="number">0.9931</span>    <span class="number">0.9909</span></span><br><span class="line">    <span class="number">0.9613</span>    <span class="number">0.9939</span>    <span class="number">0.9859</span>    <span class="number">1.0000</span>    <span class="number">0.9944</span>    <span class="number">0.9919</span>    <span class="number">0.9947</span>    <span class="number">0.9981</span></span><br><span class="line">    <span class="number">0.9824</span>    <span class="number">0.9853</span>    <span class="number">0.9911</span>    <span class="number">0.9944</span>    <span class="number">1.0000</span>    <span class="number">0.9901</span>    <span class="number">0.9901</span>    <span class="number">0.9968</span></span><br><span class="line">    <span class="number">0.9546</span>    <span class="number">0.9977</span>    <span class="number">0.9840</span>    <span class="number">0.9919</span>    <span class="number">0.9901</span>    <span class="number">1.0000</span>    <span class="number">0.9952</span>    <span class="number">0.9953</span></span><br><span class="line">    <span class="number">0.9620</span>    <span class="number">0.9947</span>    <span class="number">0.9931</span>    <span class="number">0.9947</span>    <span class="number">0.9901</span>    <span class="number">0.9952</span>    <span class="number">1.0000</span>    <span class="number">0.9968</span></span><br><span class="line">    <span class="number">0.9695</span>    <span class="number">0.9935</span>    <span class="number">0.9909</span>    <span class="number">0.9981</span>    <span class="number">0.9968</span>    <span class="number">0.9953</span>    <span class="number">0.9968</span>    <span class="number">1.0000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/08/03/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%A8%A1%E6%8B%9F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h3 id="蒙特卡洛模拟算法"><a href="#蒙特卡洛模拟算法" class="headerlink" title="蒙特卡洛模拟算法"></a>蒙特卡洛模拟算法</h3><p>概览<br>蒙特卡罗方法又称统计模拟法、随机抽样技术，是一种随机模拟方法，以概率和统计理论方法为基础的一种计算方法，是使用随机数（或伪随机数）来解决很多计算问题的方法。将所求解的问题同一定的概率模型相联系，用电子计算机实现统计模拟或抽样，以获得问题的近似解。为象征性地表明这一方法的概率统计特征，故借用赌城蒙特卡罗命名。</p>
<p>引例<br>为了求得圆周率π值，在十九世纪后期，有很多人作了这样的试验：将长为2l的一根针任意投到地面上，用针与一组相间距离为2a（ l＜a）的平行线相交的频率代替概率P，再利用准确的关系式：</p>
<img src="https://img-blog.csdnimg.cn/20200814151539347.png#pic_center" alt="在这里插入图片描述" style="zoom:80%;" />

<img src="https://img-blog.csdnimg.cn/20200814151522861.png#pic_center" alt="在这里插入图片描述" style="zoom:80%;" />

<p>当所求问题的解是某个事件的概率，或者是某个随机变量的数学期望，或者是与概率，数学期望有关的量时，通过某种试验的方法，得出该事件发生的概率，或者该随机变量若干个具体观察值的算术平均值，通过它得到问题的解。<br>当随机变量的取值仅为1或0时，它的数学期望就是某个事件的概率。或者说，某种事件的概率也是随机变量（仅取值为1或0）的数学期望。</p>
<h5 id="优点：（可以求解复杂图形的积分、定积分，多维数据也可以很快收敛）"><a href="#优点：（可以求解复杂图形的积分、定积分，多维数据也可以很快收敛）" class="headerlink" title="优点：（可以求解复杂图形的积分、定积分，多维数据也可以很快收敛）"></a>优点：（可以求解复杂图形的积分、定积分，多维数据也可以很快收敛）</h5><p>1、能够比较逼真地描述具有随机性质的事物的特点及物理实验过程<br>2、受几何条件限制小<br>3、收敛速度与问题的维数无关<br>4、具有同时计算多个方案与多个未知量的能力<br>5、误差容易确定<br>6、程序结构简单，易于实现</p>
<h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><p>1收敛速度慢<br>2误差具有概率性<br>3在粒子输运问题中，计算结果与系统大小有关</p>
<p>所以在使用蒙特卡罗方法时，要“扬长避短”，只对问题中难以用解析（或数值）方法处理的部分，使用蒙特卡罗方法计算，对那些能用解析（或数值）方法处理的部分，应当尽量使用解析方法。</p>
<h5 id="主要应用范围："><a href="#主要应用范围：" class="headerlink" title="主要应用范围："></a>主要应用范围：</h5><p>粒子输运问题（实验物理，反应堆物理）<br>统计物理<br>典型数学问题<br>真空技术<br>激光技术<br>医学<br>生物<br>探矿等</p>
<h5 id="蒙特卡洛方法步骤如下："><a href="#蒙特卡洛方法步骤如下：" class="headerlink" title="蒙特卡洛方法步骤如下："></a><a href="https://so.csdn.net/so/search?q=%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B&spm=1001.2101.3001.7020">蒙特卡洛</a>方法步骤如下：</h5><p>1在区间[a,b]上利用计算机均匀产生n个随机数x1,x2…xn，使用matlab软件的unifrnd命令实现。</p>
<p>2计算每一个随机数想对应的被积函数值f(x1),f(x2),f(xn)</p>
<p>计算被积函数值的平均值。</p>
<h5 id="题目一："><a href="#题目一：" class="headerlink" title="题目一："></a>题目一：</h5><p>求π的值。</p>
<p>正方形内部有一个相切的圆，它们的面积之比是π&#x2F;4。现在，在这个正方形内部，随机产生1000000个点（即1000000个坐标对 (x, y)），计算它们与中心点的距离，从而判断是否落在圆的内部。如果这些点均匀分布，那么圆内的点应该占到所有点的 π&#x2F;4，因此将这个比值乘以4，就是π的值。</p>
<p>代码为：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">N=<span class="number">1000000</span>;    <span class="comment">%随机点的数目</span></span><br><span class="line">x=<span class="built_in">rand</span>(N,<span class="number">1</span>);  <span class="comment">%rand 生成均匀分布的伪随机数。分布在（0~1）之间</span></span><br><span class="line">y=<span class="built_in">rand</span>(N,<span class="number">1</span>);  <span class="comment">%矩阵的维数为N×1</span></span><br><span class="line">count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:N</span><br><span class="line">   <span class="keyword">if</span> (x(<span class="built_in">i</span>)^<span class="number">2</span>+y(<span class="built_in">i</span>)^<span class="number">2</span>&lt;=<span class="number">1</span>)</span><br><span class="line">     count=count+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">PI=<span class="number">4</span>*count/N</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="题目二："><a href="#题目二：" class="headerlink" title="题目二："></a>题目二：</h5><p>计算积分</p>
<p>计算函数 y &#x3D; x^2 在 [0, 1] 区间的积分，就是求出红色曲线下面的面积。这个函数在 (1,1) 点的取值为1，所以整个红色区域在一个面积为1的正方形里面。在该正方形内部，产生大量随机点，可以计算出有多少点落在红色区域（判断条件 y &lt; x^2）。这个比重就是所要求的积分值。</p>
<p>代码为：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear</span><br><span class="line">clc</span><br><span class="line">N=<span class="number">10000</span>;  </span><br><span class="line">x=<span class="built_in">rand</span>(N,<span class="number">1</span>); </span><br><span class="line">y=<span class="built_in">rand</span>(N,<span class="number">1</span>);</span><br><span class="line">count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:N</span><br><span class="line">   <span class="keyword">if</span> (y(<span class="built_in">i</span>)&lt;=x(<span class="built_in">i</span>)^<span class="number">2</span>)</span><br><span class="line">     count=count+<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">result=count/N</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/08/04/%E8%AE%BA%E6%96%87/</url>
    <content><![CDATA[<p>这段代码定义了一个名为<code>ObliviousRTree</code>的C++类模板，它表示一个带有范围查询和k最近邻查询功能的R树。这个R树使用Oblivious RAM (ORAM)技术来保护数据的隐私和安全性。代码中使用了模板参数<code>T</code>，用于指定底层的ORAM实现，可以是<code>ORAM</code>类或其子类。</p>
<p>让我们逐段解释代码：</p>
<ol>
<li>头文件保护：<code>#ifndef OBLIVIOUS_RTREE_H</code>和<code>#define OBLIVIOUS_RTREE_H</code>用于防止头文件被重复包含。</li>
<li>包含头文件：<code>#include</code>指令包含了一些必要的C++标准库和其他头文件。</li>
<li>结构体定义：<ul>
<li><code>RTreeEntry</code>：表示R树节点的数据项。它包含一个<code>blockID</code>用于标识节点在ORAM中的位置，以及一个<code>MBR</code>（Minimum Bounding Rectangle，最小外接矩形）用于表示节点的范围。</li>
<li><code>kNNUtil</code>：用于k最近邻查询的辅助结构体，它包含了一个布尔值<code>isData</code>表示该项是数据还是非叶子节点、一个<code>dis</code>表示距离以及一个<code>payload</code>指针用于保存数据或节点信息。</li>
</ul>
</li>
<li>类模板定义：<code>ObliviousRTree</code>是一个类模板，它有一个类型参数<code>T</code>，用于指定ORAM的实现类。类中包含了一些成员函数和数据成员用于构建和查询R树。</li>
<li>构造函数：<ul>
<li>第一个构造函数用于从输入文件中加载点数据并构建R树，并将其存储到ORAM中。</li>
<li>第二个构造函数用于从已经构建好的ORAM中加载R树。</li>
</ul>
</li>
<li>成员函数：<ul>
<li><code>getServerSize()</code>, <code>getClientSize()</code>, <code>getCommSize()</code>, <code>resetCommSize()</code>: 获取或重置ORAM的各种尺寸和通信开销。</li>
<li><code>getCacheHitRate()</code>, <code>getAccidentHitRate()</code>, <code>getHitCount()</code>, <code>getAccidentHitCount()</code>, <code>resetCacheHitRate()</code>: 获取或重置ORAM的缓存命中率和访问次数。</li>
<li><code>kNN()</code>: 执行k最近邻查询。</li>
<li><code>range()</code>: 执行范围查询。</li>
</ul>
</li>
<li>私有数据成员：<ul>
<li><code>rootID</code>和<code>rootMBR</code>：R树的根节点ID和范围。</li>
<li><code>n_points</code>：数据点的数量。</li>
<li><code>batch_no</code>和<code>batch_hit_count</code>：批次号和批次命中次数，用于统计批量查询中的性能。</li>
<li><code>fcache</code>和<code>trace</code>：用于追踪缓存和查询情况的文件句柄和标志。</li>
<li><code>timestamp</code>：用于记录时间戳。</li>
<li><code>oram</code>：ORAM实例，用于存储R树。</li>
</ul>
</li>
</ol>
<p>Rtree和path-Oram的结合，实质上就是我们把数据存到rtree这棵树中，并且仍然只是在叶子节点存储数据，我们在建立rtree树的过程中，从用户提供的数据文件中能够获得n数目的数据块，第一点，用户的输入为：数据块的id，数据块的位置，这是常老师的处理，我们的处理则需要根据数据块文件的信息提取出数据块的关键字，将其一同存储在数据块的数据结构中。</p>
<p>将这些数据块存储在叶子节点中，首先，我们根据么一个叶子节点能够存储的数据块的数量计算出我们需要的叶子节点的数量，</p>
<p>注意：这里为什么要计算数量，因为我们都忽略了一个点，那就是叶子节点里存储的是数据，但是非叶子节点存储的指向其孩子节点的分支条目，这个分支条目和数据块的大小是不一样的，如果我们将rtree的每一个节点都规定为同样的大小，那么我们就可以根据这个大小计算出叶子节点的最大存储量和内部节点的最大存储量。</p>
<p>下面详细讲述建树过程，老师这里的建树方法其实采用了和我在github里见到的所有代码都不同的建树方法。</p>
<p>首先我们能够确定数据点的数量以及数据点的位置，然后我们可以计算出在最底层即叶子层一共需要多少个叶子节点，这些节点里存储数据</p>
<p>然后我们能够根据叶子节点的数量向上一步步合并节点，直到节点为1为止，此时这个节点就是rtree的根节点，</p>
<p>在建树的过程中，我们设置了两个映射结构：</p>
<p>第一个映射结构存储了每一个数据块。</p>
<p>第二个映射结构存储了rtree的每一个节点。</p>
<p>然后开始介绍rtree和oram结合的knn查询过程以及正常的range查询过程。</p>
<p>对于查询过程：</p>
<p>查询过程是完全遵循pathoram的，但是采用的查询方式，是我们提供要查询的数据块的ID，而不是这个数据块的信息，</p>
<p>然后我觉得老师这个代码的优化在于，就是我们将数据块查询之后，再寻找路径的过程也是要包含在查询过程当中的，所以老师的优化是在于查询完毕之后的路径找回，他采用了rtree的结构，能够在将路径上的数据块插回的速度加快。</p>
]]></content>
  </entry>
  <entry>
    <title>3Path-oram</title>
    <url>/2023/06/23/%E8%AE%BA%E6%96%87%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="3Path-oram和r树的应用"><a href="#3Path-oram和r树的应用" class="headerlink" title="3Path-oram和r树的应用"></a>3Path-oram和r树的应用</h3><p>1、framework：框架</p>
<p>2、<a href="http://www.jos.org.cn/html/2018/9/5591.htm">http://www.jos.org.cn/html/2018/9/5591.htm</a></p>
<p>r树：三维的树，地图查找之类的应用</p>
<p>3、在r树应用中：使用语言模型和概率排序函数来计算查询结果的文本相关性，在本论文中，对于r树的拓展应用相当于是对于地图的查找：同时根据查找的关键词和r树中的临近位置进行查找以加快查找速度</p>
<p>4、解决oram的问题：第一个问题：带宽，这里的消耗是在查找时发生的，但是path-oram已经为我们较好的解决了这个问题，在此基础上，我们只需进一步探讨如何更快的对读出的数据进行修改和写回，这就涉及到r树的应用。</p>
<p>5、对于r树的应用方面分为了LKT和RKT，其中LKT是对于在位置是一个定点的查询，RKT是对于位置信息是一个区域的查询。</p>
<span id="more"></span>

<p>其中将查询函数的权值大小设置为两个信息量的相加，第一个信息为位置差距，即两个点之间的欧拉函数，另一个信息量为对于关键词的搜索查找密度，并设置一个变量alpha对两个变量的权重进行平衡。LKT的相关变量D和P的计算是显然的，但是RKT的变量值计算可以分为两种不同的情况，分别为RKTe和RKTu，RKTe将D作为一个点和一个区域中所有点的欧几里得距离的最小值即为<br>$$<br>D _  RKTe &#x3D; min(LKT)<br>$$<br>RKTu中D为这些所有欧几里得距离的并集，这是一个距离的集合,即为<br>$$<br>D _ RKTu &#x3D; Union(LKT)<br>$$<br><strong>倒排索引</strong>(<strong>Inverted</strong> <strong>Index</strong>)：倒排索引是实现“单词-文档矩阵”的一种具体存储形式，通过倒排索引，可以根据单词快速获取包含这个单词的文档列表。倒排索引主要由两个部分组成：“单词词典”和“倒排文件”。</p>
<p>​    <strong>单词词典：</strong>搜索引擎的通常索引单位是单词，单词词典是由文档集合中出现过的所有单词构成的字符串集合，单词词典内每条索引项记载单词本身的一些信息以及指向“倒排列表”的指针。</p>
<p>​    **倒排列表(PostingList)**：倒排列表记载了出现过某个单词的所有文档的文档列表及单词在该文档中出现的位置信息，每条记录称为一个倒排项(Posting)。根据倒排列表，即可获知哪些文档包含某个单词。</p>
<p>   <strong>倒排文件(Inverted File)：</strong>所有单词的倒排列表往往顺序地存储在磁盘的某个文件里，这个文件即被称之为倒排文件，倒排文件是存储倒排索引的物理文件。</p>
<h5 id="top-k的概念："><a href="#top-k的概念：" class="headerlink" title="top-k的概念："></a>top-k的概念：</h5><p>文章：<a href="https://zhuanlan.zhihu.com/p/76734219">https://zhuanlan.zhihu.com/p/76734219</a></p>
<p>简而言之就是从n个数据项中根据一定的规则找到k的最大的数据项。</p>
<p>这个涉及到排序算法，所以该算法的时间复杂度主要由排序算法的时间复杂度决定。</p>
<p><strong>改进方法</strong>：只对前k个最大的数据项进行排序即可，则利用冒泡排序就可以很好的解决这个问题</p>
<p><strong>倒排文件索引文本相关性的计算方法</strong>：<a href="https://zhuanlan.zhihu.com/p/91603911">https://zhuanlan.zhihu.com/p/91603911</a></p>
<p>在对于path-oram的具体实现中，我们的方案是同时存在位置和文本查询的，其中空间查询我们先保持用一个自己拟造的数据数据表示，文本查询采用文本相似性的相关计算方法进行计算，在存储节点时，我们会将每一个节点初始化为包含空间信息和文本信息的节点，文本信息是由一堆的关键字组成的，并且我们的查询请求对于文本的输入也是一系列的关键字，</p>
<p><img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230724215255789.png" alt="image-20230724215255789"></p>
<p>空间文本距离计算的相关公式：</p>
<p>使用倒置文件计算文本的相似性，使用Rtree计算空间的相似性</p>
<p>第一种方法：</p>
<p>只使用倒置文件的优化</p>
<p>首先不考虑空间距离参数，只使用倒置文件的计算方法计算出查询结果的各个分数，然后产生一个根据文本相似度分数排序的列表，根据空间距离对这个表进行循环遍历找出最佳的查询结果。</p>
<p>数据结构的设置：</p>
<p>首先是IRtree的数据结构：1、一般节点：每个节点是由多个分支组成的，这是一个分支数组，节点的倒置文件，整个节点对应的矩形范围</p>
<p>2、节点中的分支的结构：每个分支包括：指向其孩子节点的索引，该分支存储的数据，每一个索引对应的矩形范围即空间参数，该索引的文本参数即为关键字，这些文本参数存储在一个伪文件中，在这个伪文件中，包含了所有的该分支的子节点所具有的关键字，其中每一个关键字的权重为子节点中所有的分支该关键字权重最大值。</p>
<p>3、倒置文件的结构：包含一个完成的词汇表，这个词汇表中包含所有的关键字，其中每一个关键字映射到一个列表中，倒置文件中的关键字映射到一个个的关键字的ID中，这个ID是一个int的数字，我们只在B+树中存储这个数字ID即可完成对于伪文件的存储。</p>
<p>4、这个列表的结构为：每一个元素由包含此关键字的元素和该关键字在此元素中的权重组成。</p>
<p>5、对于根节点和叶子节点：其中根节点是没有父节点的但是存在倒置文件和伪文件，叶子节点中没有必要存储伪文件，只需直接在其中存储关键字即可。</p>
<p>数据结构结束。</p>
<p>6、伪文件的结构：每一个除叶子节点外的分支结构都会有一个伪文件，这个伪文件存储了当前分支所具有的所有的关键字以及关键字的权重。	</p>
<p>然后就是对这个树的查询策略：</p>
<p>7、综上所述：我们当前需要单独维护三个结构：1、原本的rtree树，2、每一个节点的倒置文件结构  3、每一个节点的虚实条目判断结构。</p>
<p>8、使用B+树存储每一个节点所对应的倒置文件，这就等价于我们的节点中存储一个指向其倒置文件的索引指针，这个指针指向B+树的根节点。	</p>
<p>9、我最后才发现，伪文件并不是一个文件也不是一个其他结构，而是一种计算文本相似性的方法。我们只需要将每一个分支的关键字及其权重存储起来即可。</p>
<p>下面介绍计算文本相似度的算法：</p>
<p>我们将一个关键字在一个数据文本中的权重设置为该关键字在文本中的词频。</p>
<p>10、对于词频的计算方法，首先我们给出一个含有50个关键词的字典，我们规定新输入的数据的文本参数所含有的关键字只能是在我们给出的字典中的关键字，</p>
<p>在进行rtree的建立时，我们需要一个一个插入数据，数据里只是含有一段文本，我们需要对这段文本进行处理，将其处理为关键词和词频的映射结构，然后再根据这个映射结构计算文本相似度。</p>
<p>11、其实这棵树的插入操作我们只需要修改节点的数据结构即可，这一部分我们已经完成，这棵树的删除操作时整个rtree最为最为复杂的过程，这棵树的查询操作，rtree的方法是利用rect和text进行一系列的比较，找到最合适的查询分支叶子节点，但是这就会找到好多个分支，于是我们返回的就是top-k的查询条目，把这些数据全部存储在内部节点中，而不是存储在叶子节点中。</p>
<p><img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230728140826442.png" alt="image-20230728140826442"></p>
<p>12、查询方案：先找出该数据矩形范围距离最小的矩形，将这些矩形对应的branch存在一个列表里，然后我们对比文本参数，找出最佳的top-k索引，这些索引指向了不同的位置，在这些位置中存放着真正的数据，然后将查询的数据随机存放在另一个随机的路径里面，并且越深越好，然后修改原来的叶子分支的索引，将这个索引指向这个分支即可。这就相当于对于path-oram的应用。！！！！！！！牛逼。</p>
<p>第二种方法：</p>
<p>两种优化均使用</p>
<h4 id="对于IFO和RIF的理解："><a href="#对于IFO和RIF的理解：" class="headerlink" title="对于IFO和RIF的理解："></a>对于IFO和RIF的理解：</h4><h5 id="IFO"><a href="#IFO" class="headerlink" title="IFO"></a>IFO</h5><p>首先先给定n个目标，这n个目标均由位置信息和文本信息组成，在对利用这两种信息对查询结果进行排序时，我们有两种不同的方法，其中大概的概念为对位置信息和文本信息进行分别处理和排序后再进行综合排序打分。</p>
<p>然后IFO的算法为：只使用倒置文件的数据结构对文本信息和位置信息进行排序处理，将目标点按照文本相关性的排序依次放入候补队列中。</p>
<h5 id="RIF"><a href="#RIF" class="headerlink" title="RIF"></a>RIF</h5><p>在RIF中，对于文本的信息处理和上述IFO的相同的，所以我们可以根据上述的处理得到了文本相关性的排序信息，接下来在进行位置接近性的排序时，我们采用R树对位置信息进行欧几里得距离的计算，并按照位置接近性的大小顺序来将目标点放入候选队列中。</p>
<p>注意：两种方法在放入候选队列时都要和阈值进行比较。</p>
<p>对于R-tree查询的详细解释：<a href="https://www.cnblogs.com/cmi-sh-love/p/kong-jian-shud-ju-suo-yinRTree-wan-quan-jie-xi-jiJa.html?share_token=e5b096d7-6dbf-4839-9992-b29913335ba9#toc_5">https://www.cnblogs.com/cmi-sh-love/p/kong-jian-shud-ju-suo-yinRTree-wan-quan-jie-xi-jiJa.html?share_token=e5b096d7-6dbf-4839-9992-b29913335ba9#toc_5</a></p>
<h5 id="混合索引R树的数据结构："><a href="#混合索引R树的数据结构：" class="headerlink" title="混合索引R树的数据结构："></a>混合索引R树的数据结构：</h5><p>在论文中，每个节点都是由混合索引树该数据结构构成。对于此数据结构的解释如下：</p>
<p>包含了两部分，大致的结构是R树的形状，但是在每个R树的节点上还添加了该文本的倒置文件的数据结构，。</p>
<p>对于每个节点来说：包含了该R树节点矩形所涵盖范围的所有目标项的文本。另一个数据项为一个文本权重队列。</p>
<h5 id="B-树："><a href="#B-树：" class="headerlink" title="B+树："></a>B+树：</h5><p><a href="https://zhuanlan.zhihu.com/p/149287061">https://zhuanlan.zhihu.com/p/149287061</a></p>
<p><strong>B+树（B+ tree）:</strong> B+树是在B-树的基础上做了一些改进的树状数据结构，也广泛用于数据库和文件系统中。B+树的特点如下：</p>
<ol>
<li><strong>多路搜索树</strong>：B+树也是一种多路搜索树，每个节点可以包含多个子节点和关键字。</li>
<li><strong>平衡性</strong>：B+树仍然是平衡树，每个节点的子树高度差不会超过一个常数。</li>
<li><strong>只有叶子节点存储数据</strong>：B+树的所有数据都存储在叶子节点上，内部节点只存储索引信息。</li>
<li><strong>叶子节点形成有序链表</strong>：所有叶子节点按照关键字的大小顺序连接成一个有序链表，方便范围查询和顺序遍历。</li>
<li><strong>节点分裂和合并</strong>：和B-树一样，在插入和删除操作时，B+树会根据需要进行节点的分裂和合并，以保持树的平衡。</li>
</ol>
<p>B+树相对于B-树的改进点在于，将数据全部存储在叶子节点上，并且叶子节点之间形成有序链表，这提高了范围查询和顺序遍历的效率。而B-树的叶子节点并不直接存储数据，只存储索引信息。</p>
<p>B+树适用于需要频繁进行范围查询和顺序遍历的场景，例如数据库中的索引结构。由于B+树的叶子节点形成有序链表，可以通过遍历叶子节点快速获取有序的数据结果，而且由于数据集中在叶子节点上，减少了磁盘IO次数，提高了查询效率。</p>
<p>综上所述，B+树和B-树都是常用的自平衡查找树数据结构，它们在存储大规模数据和进行高效的范围查询方面具有重要的优势，只是在数据存储方式和节点结构上有一些差异。选择使用哪种树结构取决于具体的应用需求和环境。</p>
<h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="几种平衡树的介绍"><a href="#几种平衡树的介绍" class="headerlink" title="几种平衡树的介绍"></a>几种平衡树的介绍</h5><p>下面是几种常见的平衡树的介绍：</p>
<ul>
<li><strong>AVL树</strong>：AVL树是最早被提出的自平衡二叉搜索树。它通过在每个节点上维护一个平衡因子（即左子树高度减去右子树高度），并根据平衡因子进行旋转操作来保持平衡。AVL树的插入和删除操作的时间复杂度为O(log n)。</li>
<li><strong>红黑树</strong>：红黑树是一种拥有红色和黑色节点的二叉搜索树，通过一系列的颜色约束和旋转操作来保持平衡。红黑树在插入和删除操作时能够进行自平衡，并且保证最坏情况下的搜索时间为O(log n)。红黑树广泛应用于诸如C++ STL的数据结构实现中。</li>
<li><strong>B-树和B+树</strong>：B-树和B+树是用于磁盘或其他辅助存储设备的自平衡树结构。它们通过将多个键值对存储在每个节点中，并且在内部节点和叶子节点之间建立连接来提高磁盘IO效率。B-树和B+树在存储大规模数据和范围查询方面表现出色。</li>
</ul>
<h5 id="对于论文参数的解释："><a href="#对于论文参数的解释：" class="headerlink" title="对于论文参数的解释："></a>对于论文参数的解释：</h5><p>mindist即为distance，是包含位置信息的得分分数，MIND_st,s为空间位置相似性，t为文本相关性，是包含所有信息的得分分数。</p>
<h5 id="余弦相似度和汉明距离："><a href="#余弦相似度和汉明距离：" class="headerlink" title="余弦相似度和汉明距离："></a>余弦相似度和汉明距离：</h5><p>余弦相似度（Cosine Similarity）是一种用于衡量两个向量之间相似性的度量方法。它基于两个向量之间的夹角余弦值来计算相似性，而不仅仅考虑向量的长度或欧氏距离。余弦相似度通常用于文本挖掘、信息检索和推荐系统等领域。</p>
<p>在余弦相似度中，给定两个向量A和B，它们可以表示为n维空间中的两个点。余弦相似度定义为向量A和B的点积（内积）除以它们的模（长度）的乘积。公式如下：</p>
<p>余弦相似度 &#x3D; (A · B) &#x2F; (||A|| * ||B||)</p>
<p>其中，A · B表示向量A和B的点积，||A||和||B||表示向量A和B的模（长度）。</p>
<p>余弦相似度的取值范围在-1到1之间。当两个向量的方向完全相同时，余弦相似度为1，表示它们非常相似；当两个向量完全反向时，余弦相似度为-1，表示它们完全不相似；当两个向量之间夹角为90度时，余弦相似度为0，表示它们无关。</p>
<p>汉明距离（Hamming Distance）是用于比较两个等长字符串之间差异性的度量方法。它衡量的是将一个字符串转换为另一个字符串所需的最小替换次数。汉明距离常用于错误检测和纠错码等领域。</p>
<p>在汉明距离中，假设有两个等长的字符串A和B，它们的汉明距离定义为在相同位置上不相等的字符个数。换句话说，汉明距离等于将字符串A转换为字符串B所需的最小替换次数。</p>
<p>汉明距离的取值范围为0到字符串长度之间。当两个字符串完全相同时，汉明距离为0，表示它们相同；当两个字符串完全不同时，汉明距离等于字符串长度，表示它们完全不同。</p>
<h5 id="NP-hard"><a href="#NP-hard" class="headerlink" title="NP-hard"></a>NP-hard</h5><p>程序的时间复杂度一般可以分为两种级别：</p>
<ul>
<li>多项式级的复杂度，如O(1)，O(log(n))、O（n^a）等</li>
<li>非多项式级（NP，non-deterministic polynomia）的复杂度，如O(a^n)、O(n!)等。后者的复杂度计算机往往不能承受。</li>
</ul>
<h5 id="装箱问题"><a href="#装箱问题" class="headerlink" title="装箱问题"></a>装箱问题</h5><p>在计算机科学中，装箱问题（Bin Packing Problem）是一个经典的组合优化问题，它涉及将一组物品放入一些有限容量的容器中，以最小化所使用的容器数量。</p>
<p>具体而言，装箱问题的目标是将一组具有不同尺寸的物品放入尽可能少的容器中，同时满足以下条件：</p>
<ol>
<li>每个物品只能放入一个容器。</li>
<li>容器具有固定的容量限制，物品的尺寸不能超过容器的容量。</li>
</ol>
<p>装箱问题有多个变体，其中最经典的是单一维度装箱问题（Single-Dimensional Bin Packing Problem）。在该问题中，物品和容器都只有一个维度（通常是长度），并且每个物品和容器的尺寸都是已知的。</p>
<p>单一维度装箱问题可以进一步分为两种类型：</p>
<ol>
<li>固定容量装箱问题（Fixed Capacity Bin Packing Problem）：在这种情况下，所有的容器都具有相同的固定容量限制。目标是找到一种装箱方式，使得使用的容器数量最小化。</li>
<li>不固定容量装箱问题（Variable Capacity Bin Packing Problem）：在这种情况下，容器具有不同的容量限制。目标是找到一种装箱方式，使得使用的容器数量最小化，并且尽可能充分利用每个容器的容量。</li>
</ol>
<p>装箱问题是一个NP难问题，意味着目前没有已知的高效算法可以在多项式时间内解决所有情况。因此，通常使用启发式算法、近似算法或精确的指数级算法来解决该问题。一些常见的解决方法包括首次适应算法、最佳适应算法、近似算法（如首次适应逼近算法）等。</p>
<h5 id="K-means聚类算法："><a href="#K-means聚类算法：" class="headerlink" title="K-means聚类算法："></a>K-means聚类算法：</h5><p>K-means聚类算法是一种迭代的启发式聚类算法，用于将数据点划分为预先指定的K个簇。它的目标是最小化簇内的平方误差和，以获得较好的聚类结果。</p>
<p>以下是K-means聚类算法的详细步骤和相关的数学公式：</p>
<p>输入：</p>
<ul>
<li>数据集X，包含n个数据点：{x₁, x₂, …, xₙ}</li>
<li>预先指定的簇数量K</li>
</ul>
<p>步骤：</p>
<ol>
<li><p>随机初始化K个簇中心：{c₁, c₂, …, cₖ}</p>
</li>
<li><p>迭代以下步骤直到达到停止条件（例如，簇中心不再发生显著变化）： a. 分配数据点到最近的簇中心： 对于每个数据点xᵢ：</p>
<ul>
<li>计算其与每个簇中心cⱼ之间的距离：d(xᵢ, cⱼ) &#x3D; ||xᵢ - cⱼ||₂</li>
<li>将数据点xᵢ分配到距离最近的簇：xᵢ ∈ Cⱼ，其中 Cⱼ 表示第j个簇的成员。</li>
</ul>
<p>b. 更新簇中心为簇内数据点的均值： 对于每个簇Cⱼ：</p>
<ul>
<li>计算新的簇中心：cⱼ &#x3D; (1 &#x2F; |Cⱼ|) * Σxᵢ，其中 |Cⱼ| 表示簇Cⱼ的成员数量。</li>
</ul>
</li>
<li><p>输出最终的簇分配结果。</p>
</li>
</ol>
<p>其中，||.||₂表示欧几里德距离（Euclidean distance），表示两个数据点之间的距离。</p>
<p>K-means聚类算法的数学公式总结如下：</p>
<p>目标函数： J &#x3D; Σᵢ Σⱼ d²(xᵢ, cⱼ)</p>
<p>簇中心与数据点之间的距离： d(xᵢ, cⱼ) &#x3D; ||xᵢ - cⱼ||₂</p>
<p>簇Cⱼ的成员数量： |Cⱼ|</p>
<p>簇中心的更新： cⱼ &#x3D; (1 &#x2F; |Cⱼ|) * Σxᵢ</p>
<p>其中，J表示总的平方误差和，xᵢ表示第i个数据点，cⱼ表示第j个簇的中心，d(xᵢ, cⱼ)表示数据点xᵢ与簇中心cⱼ之间的距离，|Cⱼ|表示簇Cⱼ的成员数量，Σ表示求和运算。</p>
<p>K-means聚类算法通过迭代更新簇中心和重新分配数据点，不断优化平方误差和，以得到较好的聚类结果。注意，该算法可能收敛到局部最优解，因此多次运行并比较不同初始值的结果是常见的做法。</p>
<h5 id="SGX"><a href="#SGX" class="headerlink" title="SGX"></a>SGX</h5><p>SGX（Software Guard Extensions）是英特尔提供的一种安全扩展技术，旨在保护应用程序和数据的机密性和完整性。它提供了一种硬件隔离的环境，被称为安全执行环境（Secure Enclave），其中敏感的计算和数据可以被保护免受恶意软件、特权用户和其他系统组件的干扰。</p>
<p>以下是对SGX的详细解释：</p>
<ol>
<li>安全执行环境（Secure Enclave）：SGX通过在处理器中创建一个被硬件隔离的安全执行环境，保护敏感的应用程序和数据。在这个安全执行环境中，称为“enclave”的代码和数据是加密的，且只有受信任的应用程序可以访问。安全执行环境提供了内存加密和完整性验证机制，确保数据在运行时不会被非授权的实体访问或篡改。</li>
<li>内存加密：SGX使用内存加密来保护安全执行环境中的数据。敏感数据在被写入内存之前，会被加密，而在从内存中读取时则会被解密。这种加密和解密的过程是由处理器硬件自动处理的，不需要应用程序的干预。这样，即使物理内存被非授权的实体读取，也无法获得有效的敏感信息。</li>
<li>完整性验证：SGX使用完整性验证来确保安全执行环境的代码和数据没有被篡改。每个内存页都包含一个完整性验证值，用于验证页内容的完整性。当代码和数据被加载到安全执行环境中时，硬件会计算并存储验证值。在运行时，硬件会定期验证内存页的完整性，以检测是否有篡改行为发生。</li>
<li>受信任的应用程序：只有受信任的应用程序才能创建和操作安全执行环境。这些应用程序需要通过特定的开发流程和签名过程，以确保它们的合法性和安全性。在创建安全执行环境时，应用程序需要提供一个称为“enclave签名”的数字签名，用于验证其身份和完整性。</li>
</ol>
<p>SGX技术在安全领域有广泛的应用，例如：</p>
<ul>
<li>保护敏感数据：SGX可以用于保护个人隐私数据、加密密钥和敏感业务逻辑，防止这些数据被未经授权的实体访问。</li>
<li>保护云计算：SGX可用于在云环境中保护租户的敏感数据，使云服务提供商无法访问或篡改这些数据。</li>
<li>数字版权保护：SGX可以用于保护数字内容和软件免受盗版和逆向工程的威胁。</li>
<li>安全协作计算：SGX可以实现多个实体之间的安全协作计算，而无需将敏感数据暴露给其他实体。</li>
</ul>
<h5 id="Hilbert"><a href="#Hilbert" class="headerlink" title="Hilbert"></a>Hilbert</h5><p>Hilbert 编码是一种空间填充曲线（Space-Filling Curve），用于将多维空间中的点映射到一维空间中。它是由德国数学家David Hilbert在20世纪初引入的。</p>
<p>以下是对 Hilbert 编码的详细解释：</p>
<ol>
<li>空间填充曲线：空间填充曲线是一种连续的曲线，可以通过在一维空间中进行遍历，将多维空间中的点映射到一维空间。在空间填充曲线上，相邻的点在原始多维空间中也是相邻的，保持了空间数据的相对位置关系。Hilbert 编码是其中一种常见的空间填充曲线。</li>
<li>Hilbert 曲线的构造：Hilbert 曲线由一系列细分步骤组成。最初的 Hilbert 曲线是一个单位正方形，分为4个相等的子正方形。通过递归地将每个子正方形划分为4个更小的相等子正方形，并按照特定的顺序连接它们的角点，最终形成了 Hilbert 曲线。</li>
<li>Hilbert 编码的性质：Hilbert 编码具有以下重要性质：<ul>
<li>保序性：相邻的点在 Hilbert 编码中也是相邻的，保持了空间数据的相对位置关系。</li>
<li>紧凑性：靠近的点在 Hilbert 编码中也是相近的，具有局部性质。</li>
<li>连续性：Hilbert 编码是一条连续的曲线，没有断裂或间隙。</li>
</ul>
</li>
<li>Hilbert 编码的应用：Hilbert 编码在计算机科学和地理信息系统（GIS）等领域有广泛的应用，包括：<ul>
<li>空间索引：Hilbert 编码可以用于优化空间数据的索引结构，例如 R-tree 和 Hilbert R-tree。</li>
<li>数据压缩：Hilbert 编码可以用于多维数据的压缩和编码，减少存储和传输的空间开销。</li>
<li>图像处理：Hilbert 编码可以用于图像的空间索引、图像压缩和图像检索等应用。</li>
</ul>
</li>
</ol>
<h5 id="Path-Oram路径协议简述："><a href="#Path-Oram路径协议简述：" class="headerlink" title="Path-Oram路径协议简述："></a>Path-Oram路径协议简述：</h5><p>Path-Oram是由一系列的桶组成的二叉树，其中在每一个二叉树中的节点都是一个桶，每个桶中都有n的block（块），我们对于path-oram数据的读取就是以块为单位进行的。下面对path-oram对于数据的读写协议进行总结：</p>
<p>首先我们先明白，Path-Oram对于数据的存储分别在客户端和服务器中，客户端中维护了一个数据结构为stash，负责存储在客户端中的block以及此block在树中的路径，</p>
<p>我们在进行对于数据的存储的时候，会维护一个映射结构position（map），这个映射结构将每一个block映射到这个block所在的path-oram的路径path（X），此路径是从叶子节点开始到根节点的路径，并且这个路径中包含了所要查找的block。</p>
<p>大致过程如下，</p>
<p>1、首先将要进行操作是根据position映射结构找到此block所对应的路径，</p>
<p>2、设此路径为path(X)，将此路径上的所有的block从服务器取出，将这些block存入到本地客户端的stash中，同时将此路径path（X）也存入到stash中</p>
<p>3、将取出的block数据块设置为a，将这个a-block重新映射到一个新的随机的路径中。</p>
<p>4、循环遍历stash中的每一个bolck，找到我们需要进行操作的block，</p>
<p>5、如果此此操作为写操作，则写操作比只读操作多一个步骤，即将要写入的数据写入到block-a中，若为只读操作，则跳过此步骤。</p>
<p>6、下面是对于将取出的路径重新写回的操作：首先对于path-oram树按层L进行遍历，将stash中的block从最深层逐层向上一层写入，具体写入过程为：首先对于每一层L，找到stash中路径为X且层数为L的block，将其存入到temp-S（S’）中，从temp-S中取出不超过块的最大容量N的block，此时S变为S-（temp-S），然后把取出的block存入到指定bucket中。</p>
<p>7、如何保证block的安全性呢？在stash中会存在一些隐含的块，这些块本来是没有在path-oram路径中的，但是我们在读写操作的最后一步的写入过程中，除了</p>
<h5 id="下面是obvilious-path-oram对于path-oram的改进。"><a href="#下面是obvilious-path-oram对于path-oram的改进。" class="headerlink" title="下面是obvilious path-oram对于path-oram的改进。"></a>下面是obvilious path-oram对于path-oram的改进。</h5><p>我们在上面的算法中可以得知，在进行操作的过程中，我们需要始终维护一个position的映射结构，并且这个映射结构是对应到每一个block上的，这就会导致我们需要花费大量的存储空间去存储这个映射结构，在path-oram的基础上，obvilious的工作即将这种映射结构的存储也以一个path-oram的形式存储到服务器中，即为oram0，oram1，oram2.……，在这种结构下，我们仅在oram0存储真正的block数据块，而在其他的oram中存储映射结构，至于oram的级数，需要根据具体的oram0中block数量的大小来决定，从而做到时间和空间的节省。</p>
<p>根据上述结构的改进之后，我们在本地客户端中仅仅需要维护oramN即可，这个数据结构所需的存储结构是大大减少的。</p>
<p><img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230718200209943.png" alt="image-20230718200209943"></p>
<h5 id="一棵R树满足如下的性质："><a href="#一棵R树满足如下的性质：" class="headerlink" title="一棵R树满足如下的性质："></a>一棵R树满足如下的性质：</h5><ul>
<li>\1. 除非它是根结点之外，所有叶子结点包含有m至M个记录索引（条目）。作为根结点的叶子结点所具有的记录个数可以少于m。通常，m&#x3D;M&#x2F;2。</li>
<li>\2. 对于所有在叶子中存储的记录（条目），I是最小的可以在空间中完全覆盖这些记录所代表的点的矩形（注意：此处所说的“矩形”是可以扩展到高维空间的）。</li>
<li>\3. 每一个非叶子结点拥有m至M个孩子结点，除非它是根结点。</li>
<li>\4. 对于在非叶子结点上的每一个条目，i是最小的可以在空间上完全覆盖这些条目所代表的点的矩形（同性质2）。</li>
<li>\5. 所有叶子结点都位于同一层，因此R树为平衡树。</li>
</ul>
<p>R数的插入操作：</p>
<p>首先每一个R树的节点是由多个分支构成的，并且每一个分支都会自己的子节点，并且这个子节点也是有多个分支构成的，这就相当于每一个节点都有多个孩子节点，初次之外，我们只把数据存储在整个树的叶子节点中，同时，R树中的每一个节点所拥有的分支的个数在min-max之间，其中min一般等于max&#x2F;2，</p>
<p>并且我们在进行数据的插入和删除的过程中，需要时刻保持叶子节点都在同一层中，以此来保证R树的平衡性。</p>
<p>下面介绍数据的插入：</p>
<p>数据的插入过程涉及到节点的分裂，</p>
<p>对于数据的插入是要从叶子节点开始插入，并从叶子节点开始向上一层层的更新，首先每一个叶子节点可以存储的数据的条目最大为max，最小为min，当数据条目小于min时，即删除操作就会涉及到节点的合并，</p>
<p>下面我们考虑如何将一个新加入的数据添加到最合适的节点当中，首先，这个数据会有一个BB，我们计算将这个数据插入到每一个节点后，对应节点的BB的增加量，我们取增加量最小的节点作为最合适的添加节点，若增加量相等，取本身面积最小的节点作为插入节点。</p>
<p>在这之后，我们得到了最佳的插入节点best，将数据插入到节点best中，这就会涉及到节点的分裂操作，如果此时best存储的数据项已经为max了，则需要进行节点的分裂，相当于我们会增加一个新的叶子节点，并把原来节点和插入数据均匀的分配到这两个节点中，</p>
<p>接下来，我们考虑下一层，因为叶子节点增加了，设best节点的父节点为F，则此时就要为新增加的节点设置一个新的分支索引存储到F中，则此时就会又要面临一个同样的问题，这个F节点有没有满，即是否要分裂，层层递进，直到根节点为止。</p>
<p>如果节点并没有分裂，我们只需要将插入数据的BB放到best节点当中，设bset节点的父节点为F，设F节点中指向best节点的分支索引为BF，我们只需将这个BF的BB修改至包含新增加节点的BB即可。</p>
<p>当前的大致想法是：用rtree来作为存储path-oram数据的数据结构：</p>
<p>首先是path-oram的数据结构是在所有的节点中都存有相应的数据，然后rtree是只在叶子节点中存储数据，我们对于一个path-oram中数据的读取是通过一个映射结构来直接完成的，但是我们在rtree中对于一个数据的读取是根据这个数据的BB的范围来完成的，除此之外，我们在path-oram中存取的数据有一个非常大的问题，我们无法确定这个数据的BB通过何种方式来进行确定，这是第一个问题：</p>
<p>就是数据之间的距离或者面积的计算由何种方式来进行确定。</p>
<p>下面是第二个问题：</p>
<p>其实我们在path-oram的存储过程中，只需在除了叶子节点之外的节点中，不再存储数据，而是只进行存储指向其孩子节点的指针即可。</p>
<p>由于我们现在是在rtree这个树结构上存储path-oram的数据，并且只在叶子节点中存储指向真正数据的指针，那么我们的查询过程就需要提供一个需要查询的数据的范围，但是在实际的操作的过程中，我们提供的只是我们需要查询的数据，用户并不会提供查询数据的MBB,那么这个MBB的计算就需要我们自己进行编写：下面是rtree那篇相关论文中提供的方法：</p>
<p>每一个数据节点有两个参数：位置参数和文本参数，但是我们现在需要查询的数据只应用文本参数即可，</p>
<p>论文的方法是：</p>
<p>我们设置存储的数据的本文参数其实是由一个文件描述的，这个文件中的文本有着许多的关键字，相当于是这个数据的文本参数是由一系列的关键字组成的，对于一个查询请求Q，这个查询请求在我们的论文情境下只会涉及到对于文本的查询请求，但是这个请求Q一般是不会恰好对应到path-oram中存储的某个数据的，这时我们就需要计算查询请求文本参数设为L，和path-oram中每一个节点的文本相似性，至于文本相似性的计算，后面再进行讨论。</p>
<p>下面讨论查询请求，在rtree中，我们的查询请求是直接提供每一个节点对应的路径，即为前面提到的映射结构，那么我们也可以在path-oram维护一个这样的映射结构，但是这明显是不现实的，因为我们在进行查询时，不可能直接给出需要查询的节点，这个待查询的节点是我们根据文本的相似性从根节点开始一步一步计算出来的，但是这就会有着大量的时间的浪费，于是便有了上词组会提到的维护一个单独的结构，这个结构中单独存储path-oram中所有的叶子节点，我们只需要在查询时对这个结构进行遍历插叙即可。但是这个结构的维护就会涉及到大量的空间的消耗。</p>
<p>然后是另一个方法，</p>
<p>我们不是将rtree和path-oram放在一个数据结构中，而是分别维护：</p>
<p>我们在rtree的叶子节点中存储数据，将这些数据全部放到patt-oram中进行数据的查询，草，这过程更复杂了，。。。。。。。。。这是个大问题，但是上次的组会说的应该就是这个方法。</p>
<p>下面是优化过程，由于每一个数据的文本参数是由一系列的关键字组成的，这就会涉及到一个优化，倒置文件，我们会rtree的每一个节点中增加一个倒置文件，这个倒置文件存储的是指向导倒置文本的指针，这个倒置的文本其实就是在所有的文件中，包含有这个关键字的文件的索引。这是第一个优化</p>
<p>第二个优化就是：我们在上面提到了需要维护一个path-oram的所有叶子节点的数据结构，这会加大空间的消耗，那么我们就可以存储一个类似于缓存的结构，只存储那些访问次数多的数据的索引。</p>
<p>第三个可以优化的点就是：对于文本相似性的计算。这会涉及到好多算法：<strong>余弦相似度和汉明距离：</strong></p>
<p>余弦相似度（Cosine Similarity）是一种用于衡量两个向量之间相似性的度量方法。它基于两个向量之间的夹角余弦值来计算相似性，而不仅仅考虑向量的长度或欧氏距离。余弦相似度通常用于文本挖掘、信息检索和推荐系统等领域。</p>
<p>在余弦相似度中，给定两个向量A和B，它们可以表示为n维空间中的两个点。余弦相似度定义为向量A和B的点积（内积）除以它们的模（长度）的乘积。公式如下：</p>
<p>余弦相似度 &#x3D; (A · B) &#x2F; (||A|| * ||B||)</p>
<p>其中，A · B表示向量A和B的点积，||A||和||B||表示向量A和B的模（长度）。</p>
<p>余弦相似度的取值范围在-1到1之间。当两个向量的方向完全相同时，余弦相似度为1，表示它们非常相似；当两个向量完全反向时，余弦相似度为-1，表示它们完全不相似；当两个向量之间夹角为90度时，余弦相似度为0，表示它们无关。</p>
<p>汉明距离（Hamming Distance）是用于比较两个等长字符串之间差异性的度量方法。它衡量的是将一个字符串转换为另一个字符串所需的最小替换次数。汉明距离常用于错误检测和纠错码等领域。</p>
<p>在汉明距离中，假设有两个等长的字符串A和B，它们的汉明距离定义为在相同位置上不相等的字符个数。换句话说，汉明距离等于将字符串A转换为字符串B所需的最小替换次数。</p>
<p>汉明距离的取值范围为0到字符串长度之间。当两个字符串完全相同时，汉明距离为0，表示它们相同；当两个字符串完全不同时，汉明距离等于字符串长度，表示它们完全不同。</p>
<p>然后就是进一步的优化，我们根据这些关键字之间的相似度，将这些关键字进行分类并存储在节点当中，这可以加快查询的效率。</p>
<p>至于分类方案：</p>
<h5 id="K-means聚类算法：-1"><a href="#K-means聚类算法：-1" class="headerlink" title="K-means聚类算法："></a>K-means聚类算法：</h5><p>K-means聚类算法是一种迭代的启发式聚类算法，用于将数据点划分为预先指定的K个簇。它的目标是最小化簇内的平方误差和，以获得较好的聚类结果。</p>
<p>以下是K-means聚类算法的详细步骤和相关的数学公式：</p>
<p>输入：</p>
<ul>
<li>数据集X，包含n个数据点：{x₁, x₂, …, xₙ}</li>
<li>预先指定的簇数量K</li>
</ul>
<p>步骤：</p>
<ol>
<li><p>随机初始化K个簇中心：{c₁, c₂, …, cₖ}</p>
</li>
<li><p>迭代以下步骤直到达到停止条件（例如，簇中心不再发生显著变化）： a. 分配数据点到最近的簇中心： 对于每个数据点xᵢ：</p>
<ul>
<li>计算其与每个簇中心cⱼ之间的距离：d(xᵢ, cⱼ) &#x3D; ||xᵢ - cⱼ||₂</li>
<li>将数据点xᵢ分配到距离最近的簇：xᵢ ∈ Cⱼ，其中 Cⱼ 表示第j个簇的成员。</li>
</ul>
<p>b. 更新簇中心为簇内数据点的均值： 对于每个簇Cⱼ：</p>
<ul>
<li>计算新的簇中心：cⱼ &#x3D; (1 &#x2F; |Cⱼ|) * Σxᵢ，其中 |Cⱼ| 表示簇Cⱼ的成员数量。</li>
</ul>
</li>
<li><p>输出最终的簇分配结果。</p>
</li>
</ol>
<p>其中，||.||₂表示欧几里德距离（Euclidean distance），表示两个数据点之间的距离。</p>
<p>K-means聚类算法的数学公式总结如下：</p>
<p>目标函数： J &#x3D; Σᵢ Σⱼ d²(xᵢ, cⱼ)</p>
<p>簇中心与数据点之间的距离： d(xᵢ, cⱼ) &#x3D; ||xᵢ - cⱼ||₂</p>
<p>簇Cⱼ的成员数量： |Cⱼ|</p>
<p>簇中心的更新： cⱼ &#x3D; (1 &#x2F; |Cⱼ|) * Σxᵢ</p>
<p>其中，J表示总的平方误差和，xᵢ表示第i个数据点，cⱼ表示第j个簇的中心，d(xᵢ, cⱼ)表示数据点xᵢ与簇中心cⱼ之间的距离，|Cⱼ|表示簇Cⱼ的成员数量，Σ表示求和运算。</p>
<p>K-means聚类算法通过迭代更新簇中心和重新分配数据点，不断优化平方误差和，以得到较好的聚类结果。注意，该算法可能收敛到局部最优解，因此多次运行并比较不同初始值的结果是常见的做法。</p>
]]></content>
      <categories>
        <category>Science</category>
      </categories>
      <tags>
        <tag>本科论文阅读</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/22/%E9%A1%B9%E7%9B%AE%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="一、项目进程：甘特图："><a href="#一、项目进程：甘特图：" class="headerlink" title="一、项目进程：甘特图："></a>一、项目进程：甘特图：</h4><p>1、需求分析</p>
<p>2、方案设计</p>
<p>3、系统实现</p>
<p>4、系统测试</p>
<p>5、系统上线发布</p>
<p>二、成本分析：</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/08/03/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E9%93%BE/</url>
    <content><![CDATA[<h3 id="马尔可夫链："><a href="#马尔可夫链：" class="headerlink" title="马尔可夫链："></a>马尔可夫链：</h3><img src="https://img-blog.csdnimg.cn/54c4d36bda47463581d7ba7ec6405ee6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bem5omL44Gu5piO5aSp,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img" style="zoom: 67%;" />

<p>要描述某种特定时期的随机现象如某种药品在未来某时期的销售情况，比如说第n季度是畅销还是滞销，用一个随机变量Xn便可以了，但要描述未来所有时期的情况，则需要一系列的随机变量X1，X2，…，Xn，…．称{ Xt，t∈T ，T是参数集}为随机过程，{ Xt }的取值集合称为状态空间。若随机过程{ Xn }的参数为非负整数， Xn 为离散随机变量，且{ Xn }具有无后效性（或称马尔可夫性），则称这一随机过程为马尔可夫链（简称马氏链）。所谓无后效性，直观地说，就是如果把{ Xn }的参数n看作时间的话，那么它在将来取什么值只与它现在的取值有关，而与过去取什么值无关。</p>
<h4 id="马氏链模型说明"><a href="#马氏链模型说明" class="headerlink" title="马氏链模型说明"></a>马氏链模型说明</h4><ul>
<li>时间、状态均为离散的随机转移过程</li>
<li>系统在每个时期所处的状态是随机的</li>
<li>从一时期到下时期的状态按一定概率转移</li>
<li>下时期状态只取决于本时期状态和转移概率</li>
<li>已知现在，将来与过去无关（无后效性）</li>
</ul>
<h5 id="场景一-天气预报"><a href="#场景一-天气预报" class="headerlink" title="场景一: 天气预报"></a>场景一: 天气预报</h5><p>如果我们把天气状况简单分为晴、多云、雨天三个状态，通过对某一地区历史气象数据统计发现[^1]，</p>
<ul>
<li>如果当天是晴天则第二天是晴天的概率为 0.65 ，是阴天的概率为 0.1 ，是雨天的概率为 0.25 .</li>
<li>如果当天是多云则第二天是晴天的概率为 0.25 ，是阴天的概率为 0.25 ，是雨天的概率为 0.5 .</li>
<li>如果当天是雨天则第二天是晴天的概率为 0.25 ，是阴天的概率为 0.15 ，是雨天的概率为 0.6 .</li>
</ul>
<p>如果周一是晴天，那么如何预测周五的天气情况.</p>
<p>几乎所有关于马尔可夫链的教材都会有这样的习题或者例题，但实际应用中往往比这个要复杂得多. 而且第二天的天气真的只与当天天气有关，与前一天无关吗？</p>
<p>当然我们可以改为考虑前两天的天气，只要把连续两天的天气作为一个状态即可，即会有 P32 个状态. 这样马儿可夫链模型就仍然适用了.</p>
<h5 id="场景二-病情-艾滋病-预测"><a href="#场景二-病情-艾滋病-预测" class="headerlink" title="场景二: 病情(艾滋病)预测"></a>场景二: 病情(艾滋病)预测</h5><p>艾滋病毒感染者病情发展有这样几个阶段(状态)：</p>
<ul>
<li>无临床症状(HIV asymptomatic)</li>
<li>有临床病状(HIV symptomatic)</li>
<li>获得性免疫缺陷综合征(AIDS)</li>
<li>死亡(death)</li>
</ul>
<img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230803144440096.png" alt="image-20230803144440096" style="zoom: 33%;" />

<h5 id="场景三-分子扩散模型"><a href="#场景三-分子扩散模型" class="headerlink" title="场景三: 分子扩散模型"></a>场景三: 分子扩散模型</h5><p>如果将两个充满不同气体的容器相互联通当中仅用薄膜分隔(允许分子在两容器间穿梭)，那么经过一段时间后，两个容器中的混合气体成分如何？</p>
<p>1907年物理学家 <em>Tatiana</em> 和 <em>Paul Ehrenfest</em> 为了解释热力学第二定律而提出了一个分子扩散模型. 下面老君用尽可能简单的语言来描述下这个模型.</p>
<p>我们把两个容器编号为A和B，两个容器内分子总数设为 m ，我们把容器A内含有分子个数为 0,1,⋯,m 看作是 m+1 个状态，当一个分子从一个容器转移到另一个容器，则容器A的状态发生一次转移. 假设每个分子等可能被选中发生转移，即从所在的容器转移到另一个容器.</p>
<p>举个具体的例子，假设总共有 10 个分子，容器A目前有 2 个分子(处于状态2). 那么下一次转移，这 10 个分子等可能地被选中发生转移，即有 210 的概率容器A中的分子被选中，有 810</p>
<p>的概率容器B中的分子被选中. 那么转移发生后，有 210 的概率容器A的一个分子跑到容器B(容器A从状态2转移到状态1)，有 810 的概率容器 B 中的一个分子跑到容器 A 中(容器A从状态2转移到状态3).</p>
<p>如果用 P_ij表示容器A从状态 j 到状态 i的概率，则有</p>
<p><img src="https://pic1.zhimg.com/80/v2-d94aae5e3ae3fb81d7d2cac7f7634834_720w.webp" alt="img"></p>
<h5 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h5><p>考虑某地区农业收成变化的3个状态，即“丰收”、“平收”和“歉收”。记E1为“丰收”状态，E2为“平收”状态，E3为“歉收”状态。表给出了该地区1975—2014年期间农业收成的状态变化情况。试计算该地区农业收成变化的状态转移概率矩阵。</p>
<img src="C:\Users\20191\AppData\Roaming\Typora\typora-user-images\image-20230803144937047.png" alt="image-20230803144937047" style="zoom: 33%;" />

<p>代码为：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt; library(markovchain)</span><br><span class="line">&gt; library(readxl)</span><br><span class="line">&gt; library(tidyverse)</span><br><span class="line">&gt; library(expm)</span><br><span class="line">&gt; library(diagram)</span><br><span class="line">&gt; setwd(<span class="string">&quot;D:/code&quot;</span>)</span><br><span class="line">&gt; tb456=read_xlsx(<span class="string">&#x27;markov.xlsx&#x27;</span>) <span class="comment">%&gt;%</span></span><br><span class="line">+   mutate(state1=lag(state)) </span><br><span class="line">&gt;  #交叉统计，变量state1转为state的个数</span><br><span class="line">&gt;  tss= <span class="built_in">table</span>(tb456[<span class="number">-1</span>,]$state1,tb456[<span class="number">-1</span>,]$state) </span><br><span class="line">&gt; #返回交叉表的频率,即状态转移概率矩阵</span><br><span class="line">&gt; tmA=prop.<span class="built_in">table</span>(tss,<span class="number">1</span>) </span><br><span class="line">&gt; tmA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; plotmat(tmA,pos = c(<span class="number">1</span>,<span class="number">2</span>), </span><br><span class="line">+         lwd = <span class="number">1</span>, box.lwd = <span class="number">2</span>, </span><br><span class="line">+         cex.txt = <span class="number">0.8</span>, </span><br><span class="line">+         box.<span class="built_in">size</span> = <span class="number">0.1</span>, </span><br><span class="line">+         box.<span class="built_in">type</span> = <span class="string">&quot;circle&quot;</span>, </span><br><span class="line">+         box.prop = <span class="number">0.5</span>,</span><br><span class="line">+         box.col = <span class="string">&quot;light blue&quot;</span>,</span><br><span class="line">+         arr.<span class="built_in">length</span>=<span class="number">.1</span>,</span><br><span class="line">+         arr.width=<span class="number">.1</span>,</span><br><span class="line">+         self.cex = <span class="number">.6</span>,</span><br><span class="line">+         self.shifty = <span class="number">-.01</span>,</span><br><span class="line">+         self.shiftx = <span class="number">.15</span>,</span><br><span class="line">+         main = <span class="string">&quot;Markov Chain&quot;</span>)</span><br><span class="line"></span><br><span class="line">&gt; #初始状态</span><br><span class="line">&gt; inital=matrix(c(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>),nrow=<span class="number">1</span>, byrow=TRUE)</span><br><span class="line">&gt; #预测下一年</span><br><span class="line">&gt; fc15=inital <span class="comment">%*% tmA</span></span><br><span class="line">&gt; #预测下两年</span><br><span class="line">&gt; fc16=inital <span class="comment">%*% tmA%*% tmA</span></span><br><span class="line">&gt; #预测第三年，tmA<span class="comment">%^% 3相当于tmA%*% tmA%*%tmA</span></span><br><span class="line">&gt; fc17=inital <span class="comment">%*% (tmA%^% 3)</span></span><br><span class="line">&gt; #要进行多年预测，因此编写一个函数</span><br><span class="line">&gt; myfunction=<span class="function"><span class="keyword">function</span><span class="params">(n)</span>&#123;</span></span><br><span class="line">+   inital <span class="comment">%*% (tmA%^% n)</span></span><br><span class="line">+ &#125;</span><br><span class="line">&gt; mats=matrix(data = NA,nrow = <span class="number">11</span>,ncol = <span class="number">3</span>) <span class="comment">%&gt;% </span></span><br><span class="line">+ data.frame()</span><br><span class="line">&gt; #预测<span class="number">2015</span><span class="number">-2025</span>年，共<span class="number">11</span>年，用一个dataframe来进行结果存储</span><br><span class="line">&gt; <span class="keyword">for</span> (<span class="built_in">i</span> in <span class="number">1</span>:<span class="number">11</span>) &#123;</span><br><span class="line">+   mats[<span class="built_in">i</span>,]=myfunction(<span class="built_in">i</span>)</span><br><span class="line">+ &#125;</span><br><span class="line">&gt; mats$year=seq(<span class="number">2015</span>,<span class="number">2025</span>)</span><br><span class="line">&gt; colnames(mats)=c(<span class="string">&#x27;E1&#x27;</span>,<span class="string">&#x27;E2&#x27;</span>,<span class="string">&quot;E3&quot;</span>,<span class="string">&#x27;year&#x27;</span>)</span><br><span class="line">&gt; mats</span><br><span class="line"></span><br><span class="line">&gt; Ma=createSequenceMatrix(tb456$state,toRowProbs = T)</span><br><span class="line">&gt; #定义一个markov对象</span><br><span class="line">&gt; dtmcA &lt;- new(<span class="string">&quot;markovchain&quot;</span>,transitionMatrix=Ma,</span><br><span class="line">+              states=c(<span class="string">&#x27;E1&#x27;</span>,<span class="string">&#x27;E2&#x27;</span>,<span class="string">&quot;E3&quot;</span>),</span><br><span class="line">+              name=<span class="string">&quot;MarkovChain A&quot;</span>) </span><br><span class="line">&gt; #可视化</span><br><span class="line">&gt; <span class="built_in">plot</span>(dtmcA)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
